<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安全性和保密性设计（九）安全性规章</title>
      <link href="/2021/10/22/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B9%9D%EF%BC%89%E5%AE%89%E5%85%A8%E6%80%A7%E8%A7%84%E7%AB%A0/"/>
      <url>/2021/10/22/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B9%9D%EF%BC%89%E5%AE%89%E5%85%A8%E6%80%A7%E8%A7%84%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安全管理制度"><a href="#一、安全管理制度" class="headerlink" title="一、安全管理制度"></a>一、安全管理制度</h1><p>信息系统安全，不仅要从技术角度采取若干措施，还要从组织管理的角度出发，制定明确的安全管理的规章制度，以确保安全技术实施的有效性。只有依靠安全管理规章的有力支持和保障，信息安全的技术解决方案才能够切实地取得预期的效果。</p><p>事实上，管理的缺失是信息安全失败的非常重要的原因。有统计表明，危害信息系统安全的因素中，70%以上来自组织内部。系统管理员随意性的配置或者软件升级不及时造成的安全漏洞，使用脆弱的用户口令，随意下载使用来自网络的软件，在防火墙内部架设拨号服务器却没有对账号认证等严格限制，用户安全意识不强，将自己的账号随意转借他人或与别人共享等，这些管理上的问题无论多么高超的安全技术都不能解决，都会使信息系统处于危险之中。如果没有健全的安全性规章或者安全性规章不能贯彻落实，即便设计和实现了再好的安全设备和系统，信息系统安全也不过是空谈而已。</p><p>所以建立定期的安全检测、口令管理、人员管理、策略管理、备份管理、日志管理等系列安全性规章并认真贯彻执行对于维护信息系统的安全来说是非常必要的。</p><p>为了更好地落实安全性规章，首先需要根据实际情况，建立和健全信息系统安全委员会、安全小组、安全员。安全组织成员应当由主管领导、安全保卫、信息中心、人事、审计等部门的工作人员组成，必要时可聘请相关部门的专家组成。如果有必要，安全组织也可成立专门的独立机构。设立信息安全部门和安全人员，不但可以有效地制定并贯彻落实安全性规章制度，还可以提高对安全事件的反应能力和响应速度。</p><p>有了信息安全部门和人员，还要制定安全管理制度。只有建立健全的安全管理制度，并在信息系统的运行过程中始终坚持贯彻执行，才能从根本上为信息系统的正常运行，以及信息系统安全技术的执行提供良好的、坚固的基础。安全管理制度应该包括下面一些主要方面的内容：</p><p>（1）机房安全管理制度。<br>（2）系统运行管理制度，包括系统启动、关闭、系统状态监控、系统维护等。<br>（3）人员管理制度，包括管理人员、设计人员、操作人员、人事变更等。<br>（4）软件管理制度。<br>（5）数据管理制度。<br>（6）密码口令管理制度。<br>（7）病毒防治管理制度。<br>（8）用户登记和信息管理制度。<br>（9）工作记录制度。<br>（10）数据备份制度<br>（11）审计制度。<br>（12）安全培训制度等。</p><p> 此外，有了制度而不认真执行等于没有制度，所以，只有在系统的运行过程中，管理人员、操作人员、用户之间的相互配合与相互协作，共同遵守既定的安全性规章，才能保证信息系统的安全措施是有用的、有效的。</p><p>总之，信息安全所涉及的方面很多，只有在各个方面都进行全面管理，才能在此基础上与所用的安全技术和设备一起，有效保证信息系统安全。</p><h1 id="二、计算机犯罪与相关法规"><a href="#二、计算机犯罪与相关法规" class="headerlink" title="二、计算机犯罪与相关法规"></a>二、计算机犯罪与相关法规</h1><p>1.计算机犯罪</p><p>所谓计算机犯罪是指针对和利用计算机系统，通过非法操作或者以其他手段，对计算机系统的完整性或正常运行造成危害的行为</p><p>计算机犯罪的犯罪对象是计算机系统或其中的数据，包括计算机设备、系统程序、文本资料、运算数据、图形表格等。所谓非法操作，是指一切没有按照操作规程或是超越授权范围而对计算机系统进行的操作。非法操作是对计算机系统造成损害的直接原因。</p><p>计算机犯罪是随着计算机技术的发展而出现和发展的，在不同的历史时期，具有不同的特点。大体上，计算机犯罪可以划分成两个阶段。</p><p>第一个阶段是计算机单机时代，即早期的电脑犯罪阶段，时间大致从 20 世纪 50 年代至 80 年代。这个时期的主要形式是计算机诈骗，针对计算机内部信息的窃取和破坏。</p><p>第二个阶段是计算机网络时代，时间大致从 20 世纪 80 年代到现在。在这个时期，由于计算机网络的迅速发展及其应用范围越来越广泛，而且计算机软件日益复杂化、普及化，计算机犯罪呈现出一些新的特点：</p><p>(1) 呈现国际化趋势。互联网的发展是跨越国界的，随之而来的就是计算机犯罪由区域性犯罪向跨地区、跨国界的国际性犯罪发展</p><p>(2) 从犯罪所针对的对象看，向全社会各单位和个人蔓延。计算机犯罪由早期的主要攻击金融系统、政府机关向攻击其他所有行业、所有部门的信息系统蔓延；由攻击单位、团体的信息系统向攻击个人信息系统蔓延。这两种趋势的出现都是因为计算机已经从早期的特殊部门向全社会众多机关团体以及个人普及。</p><p>(3) 从组织形式上看，由个人犯罪向群体犯罪、组织犯罪发展；由单一目的犯罪向综合性犯罪发展。</p><p>(4) 从犯罪主体看，所涉及人员范围越来越广泛，并呈现低龄化趋势。从年龄结构来看，低龄化、普遍化是主要特点。从犯罪人员素质层次看，已经从早期的高学历、高技能型向普通人群发展。这些也都是因为计算机技术的普及，使得越来越多的人能够方便地学习到更多的计算机技术，通过长时间的学习和实践，青少年、低学历人员也能够逐渐掌握这些技术，成为计算机和网络犯罪的主体。</p><p>(5) 从危害程度看，后果越来越严重。由于知识经济的发展，各企事业单位的日常业务越来越依赖于信息系统，大量政治、军事、经济等方面的重要文件和数据，以及大量的社会财富集中于信息系统中，例如网络银行、股票等往往就表现为计算机系统中账户上的数据。旦犯罪分子侵入这样的信息系统，必将对国家安全、经济发展、社会进步产生巨大的影响，甚至造成不可挽回的损失。</p><p>(6) 通过网络窃取机密信息将成为间谍活动的主要形式之一。随着越来越多的企事业单位和个人连接互联网，其中的很多机密信息和数据都面临着网络窃密行为的威胁。对于没有采取严格安全措施的系统，通过网络窃取其机密信息相对于其他方式更加隐蔽、快捷。例如，通过后门程序盗窃用户的账号和密码，通过系统漏洞取得系统特权，非法窃取商业机密等。</p><p>这些计算机犯罪行为显然具有很大的危害，它们影响社会的稳定，危及国家安全，扰乱经济秩序，影响社会治安，妨害青少年的健康成长，阻碍高科技产业的健康发展。因此，对于各种形式的计算机犯罪必须运用法律手段进行打击和惩处。加大对网络犯罪的打击力度，是保证我国社会稳定、经济持续发展的一项重要任务。</p><p>2.我国的相关法律、法规</p><p>计算机犯罪，已经成为刑事犯罪的一种新形式。我国《刑法》已经增加了计算机犯罪的相关内容，并将计算机犯罪分为 5 种类型。一类是直接以计算机信息系统为犯罪对象的犯罪，另一类是以计算机为犯罪工具实施其他犯罪。具体的，《刑法》关于计算机犯罪的规定有</p><p>第二百八十五条（非法侵入计算机信息系统罪）违反国家规定，侵入国家事务、国防建设、尖端科学技术领域的计算机信息系统的，处三年以下有期徒刑或者拘役。</p><p>第二百八十六条（破坏计算机信息系统罪）违反国家规定，对计算机信息系统功能进行删除、修改、增加、干扰，造成计算机信息系统不能正常运行，后果严重的，处 5 年以下有期徒刑或者拘役；后果特别严重的，处 5 年以上有期徒刑。违反国家规定，对计算机信息系统中存储、处理或者传输的数据和应用程序进行删除、修改、增加的操作，后果严重的，依照前款的规定处罚。故意制作、传播计算机病毒等破坏性程序，影响计算机系统正常运行，后果严重的，依照第一款的规定处罚。</p><p>第二百八十七条（利用计算机实施的各类犯罪）利用计算机实施金融诈骗、盗窃、贪污挪用公款、窃取国家秘密或者其他犯罪的，依照本法有关规定定罪处罚。</p><p>这些规定对于我国大规模地推广应用各种信息系统，对于保护信息系统的生产者和使用者的合法权益，对于信息系统的安全运作都具有极为重要的作用。</p><p>除了《刑法》之外，我国在信息系统安全方面，自 1994 年以来，国务院及其有关部委相继修改和出台了若干相关法规和管理规定，其中对于我国境内发生的各种计算机犯罪及其处罚都有明文规定。因此，为了做好信息系统安全，有必要详细了解这些法律、法规，包括《中华人民共和国法》、《中华人民共和国刑法》、《中华人民共和国国家安全法》、《中华人民共和国保守国家秘密法》、《中华人民共和国计算机信息系统安全保护条例》、《中华人民共和国计算机信息网络国际联网管理暂行规定》、《中华人民共和国治安管理处罚条例》《中华人民共和国计算机信息网络国际联网管理暂行规定实施办法》、《中华人民共和国专利法》、《中华人民共和国反不正当竞争法》、《中华人民共和国商标法》《中华人民共和国海关法》《中华人民共和国标准化法》《关于对《中华人民共和国计算机信息系统安全保护条例》中涉及的“有害数据”问题的批复》、《科学技术保密规定》、《计算机信息系统安全专用产品检测和销售许可证管理办法》《公安部关于对与国际联网的计算机信息系统进行备案工作的通知》、《计算机信息网络国际联网安全保护管理办法》、《电子出版物管理规定》、《中国互联网络域名注册暂行管理办法》、《从事放开经营电信业务审批管理暂行办法》、《计算机信息网络国际联网出入口信道管理办法》、《中国公用计算机互联网国际联网管理办法》、《中国公众多媒体通信管理办法》、《计算机软件保护条例》、《商用密码管理条例》、《计算机信息系统国际联网保密管理规定》、《计算机病毒防治管理办法》、《信息安全等级保护管理办法》等。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-安全性和保密性设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全性和保密性设计（八）系统的安全性设计</title>
      <link href="/2021/10/22/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%85%AB%EF%BC%89%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/10/22/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%85%AB%EF%BC%89%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="一、物理安全问题与设计"><a href="#一、物理安全问题与设计" class="headerlink" title="一、物理安全问题与设计"></a>一、物理安全问题与设计</h1><p>物理安全包括物理设备本身是否安全可靠，还包括设备的位置与环境的安全、限制物理访问、地域因素等几个方面。</p><p>信息系统的所有重要的物理设备、设施都应该放在专门的区域，并尽可能集中，同时严</p><p>格限制外来人员来访，尽可能地减少未经授权的访问。</p><p>物理安全还要求在设计中注意物理设备的冗余备份，例如，核心设备或部件都应该是热备份系统，具有实时或准实时切换的能力。</p><p>物理安全还要求严格限制对网络信息点、线缆等网络基础设施及其所在地进行物理访问，要想访问必须经过专门的授权。</p><p>物理安全还包括环境方面的因素，在设计之初就要对信息系统中的温度、湿度、灰尘、振动、雷电、电力等方面的参数有明确的要求，要对自然灾害（地震、台风、闪电等）有充分的考虑，还要对电磁泄漏等方面的要求作明确的定义。设计系统时要对这些因素全盘考虑，并采取适当的防护措施或强化手段。例如，机房这种重要的地点，除了所在的建筑物要有防雷系统外，还可以加装一套专用的防雷系统。这样可以保证即使建筑物遭到雷击时，万一建筑物的避雷系统未能充分保护好昂贵的信息系统，那么单独为机房安装的专用避雷系统也能保障机房设备免受损失。</p><h1 id="二、防火墙及其在系统安全中的应用"><a href="#二、防火墙及其在系统安全中的应用" class="headerlink" title="二、防火墙及其在系统安全中的应用"></a>二、防火墙及其在系统安全中的应用</h1><p>网络安全隐患主要是由网络的开放性、无边界性、自由性造成的，所以保护网络安全可以首先考虑把被保护的网络从开放的、无边界的、自由的公共网络环境中独立出来，使之成为有管理的、可控制的、安全的内部网络。也只有做到这一点，实现信息网络的通信安全才有可能。</p><p>目前，最基本的网络分隔手段就是防火墙，它也是目前用来实现网络安全的一种主要措施。利用防火墙，可以用来在拒绝未经允许的网络连接、阻止敏感数据的泄漏的同时，保证合法用户的合法网络流量畅通无阻，可以实现内部可信任网络（如企业网）与外部不可信任网络（如 Internet）之间，或是内部不同子网之间的隔离与控制，保证网络系统及网络服务的可用性。</p><p>1.防火墙的基本原理防火墙通常使用的采用包过滤、状态检测、应用网关等几种方式控制网络连接</p><p>包过滤防火墙是一种简单而有效的安全控制技术，它根据在防火墙中预先定义的规则（允许或禁止与哪些源地址、目的地址、端口号有关的网络连接），对网络层和传输层的数据包进行检查，进而控制数据包的进出。包过滤的优点是对用户透明、传输性能高。但是由于只能在网络层、传输层进行控制，安全控制的方式也只限于源地址、目的地址和端口号这几种，对于应用层的信息无法感知，因而只能进行较为初步的安全控制，对于拥塞攻击、内存覆盖攻击或病毒等高层次的攻击手段，则无能为力。</p><p>状态检测防火墙保持了包过滤防火墙的优点，所以性能比较好，而且对应用是透明的。同时，状态检测防火墙改进了包过滤防火墙仅仅检查进出网络的数据包，不关心数据包状态的缺点，在防火墙的内部建立状态连接表，维护了连接，将进出网络的数据当成一个个的事</p><p>件来处理，对于每一个您已静音，请住空格键暂时开启麦克风接</p><p>通过，并在内存中记录下该连接的相关信息，生成状态表。对该连接的后续数据包，只要符合状态表，就可以通过。这种方式的好处在于：由于不需要对每个数据包进行规则检查，而是对一个连接的后续数据包（通常是大量的数据包）通过散列算法，直接进行状态检查，从而使得性能得到了较大提高。</p><p>与不关心应用层数的前两种方式不同，应用网关防火墙检査所有应用层的信息包，并将检査的内容信息放入决策过程，从而提高网络的安全性。然而，应用网关防火墙是通过打破客户机/服务器模式实现的。每个客户机/服务器通信需要两个连接：一个是从客户端到防火 墙，另一个是从防火墙到服务器。另外，每个网关需要一个不同的应用进程，或一个后台运行的服务程序，对每个新的应用必须添加针对此应用的服务程序，否则不能使用该服务。所以，应用网关防火墙使用起来比较麻烦，而且通用性比较差。</p><p>2.防火墙的优点在系统中使用防火墙，对于系统的安全有很多的优点：</p><p> (1) 可以隔离网络，限制安全问题的扩散。防火墙可以隔离不同的网络，或者用来隔离网络中的某一个网段，这样就能够有效地控制这个网段或网络中的问题在不同的网络中传播，从而限制安全问题的扩散。</p><p> (2) 通过防火墙可以对网络中的安全进行集中化管理，简化网络安全管理的复杂度。只要在防火墙上配置好过滤策略，就能使防火墙成为一个网络安全的检査站，所有进出网络的信息都需要通过防火墙，把非法访问拒于门外。从而实现安全的集中统一的管理，并且能够简化安全管理的复杂度。</p><p> (3) 能够有效地记录 Internet 上的活动。因为所有进出内部网络的信息都必须通过防火墙，所以防火墙能够收集内部网络和外部网络之间或者不同网段之间所发生的事件，为管理员的进一步分析与安全管理提供依据。</p><p>3.正确使用防火墙虽然防火墙的技术日渐成熟起来，成为维护网络安全的一个重要的手段。但是，它也不能完全解决网络上的安全问题。在实际使用过程中还有一些安全性是防火墙不能实现的，在实际工作中，一般应注意如下几点：</p><p>(1) 防火墙虽然能对来自外部网络的非法连接作很严格的限制，但是对来自本地网络内部的攻击却无从防范。事实上，大多数攻击不是来自外部，而是来自内部。因此，即使使用了防火墙，对本地网络内部的主机、应用系统、数据库等也要采取其他有效的措施，才能真正做到安全。</p><p> (2) 即使对于来自外部的攻击，目前的任何防火墙也不能做到完全阻挡所有的非法入侵。随着各种新技术的陆续涌现，非法分子对系统的深入研究与剖析，各种新的应用需求不断被开发，防火墙本身也会受到越来越多的威胁。对这些新的动态、趋势要密切关注，不断地升级防火墙、修正完善防火墙的配置，才能使防火墙本身更加坚固，进而长久地发挥安全保护作用。</p><p> (3) 防火墙不能防范病毒，无法抵御基于数据的攻击。尽管防火墙的过滤技术在不断完善，可是由于病毒的类型太多，隐藏方式也非常复杂，而且它们很多都是隐藏在数据文件中，因此要防火墙对所有的包含病毒的文件作出限制是不太现实的，而应当在系统中单独安装专门的病毒网关或者在主机上安装相应的防病毒软件、反间谍软件等工具软件，才能较好地防范此类安全隐患</p><p> (4) 防火墙不能防范全部的威胁，而只能防备已知的威胁。所以在使用过程中，应当经常根据需要配合使用入侵检测系统。</p><p> (5) 防火墙不能防范不通过它的链接。防火墙可以有效地过滤经过它的信息传输，但不能防范不通过它的信息传输，例如，如果允许拨号访问防火墙后面的内部系统，则防火墙没有任何办法对它进行控制</p><h1 id="三、入侵检测系统"><a href="#三、入侵检测系统" class="headerlink" title="三、入侵检测系统"></a>三、入侵检测系统</h1><p>传统上，一般采用防火墙作为系统安全的边界防线。但是，随着攻击者的知识日趋丰富，攻击工具与手法的日趋复杂多样，单纯的防火墙已经无法满足对安全高度敏感的部门的需要，网络的防卫必须采用一种纵深的、多样的手段。</p><p>与此同时，当今的网络环境也变得越来越复杂，各式各样的复杂的设备，需要不断升级、补漏，系统管理员的工作不断加重，不经意的疏忽便有可能造成安全的重大隐患。所以，信息系统中存在着不少可以被攻击者所利用的安全弱点、漏洞及不安全的配置，主要表现在操作系统、网络服务、TCP/IP协议、应用程序(如数据库、浏览器等)、网络设备等几个方面。 正是这些弱点、漏洞和不安全设置给攻击者以可乘之机。</p><p>另外，由于大部分网络缺少预警防护机制，即使攻击者已经侵入到内部网络，侵入到关键的主机，并从事非法的操作，系统管理员也很难察觉到。这样，攻击者就有足够的时间来做他们想做的任何事情。</p><p>要防止和避免遭受攻击和入侵，不仅要找出网络中存在的安全弱点、漏洞和不安全的配置，然后采取相应措施解决这些弱点、漏洞，对不安全的配置进行修正，最大限度地避免遭受攻击和入侵；还要对网络活动进行实时监测，一旦监测到攻击行为或违规操作，能够及时作出反应，包括记录日志、报警甚至阻断非法连接。</p><p>在这种环境下，入侵检测（Intrusion Detection）技术受到人们愈来愈多的关注，而且已经开始在各种不同的环境中发挥其关键作用。入侵检测系统可以在系统中发生一些不正常的操作时发出警报，防患于未然。设置硬件防火墙，可以提高网络的通过能力并阻挡一般性的攻击行为；而采用入侵检测系统，则可以对越过防火墙的攻击行为及来自网络内部的违规操作进行监测和响应。</p><p>入侵检测技术，通过对计算机网络或计算机系统中的若干关键点收集信息并对其进行分析，从中发现网络或系统中是否有违反安全策略的行为和被攻击的迹象。与其他安全产品不同的是，入侵检测系统需要更多的智能，它要根据智能库对收集到的数据进行分析，并采取相应措施。</p><p>作为对防火墙极其有益的补充，入侵检测系统（IDS）能够帮助人们快速发现系统攻击的发生，扩展了系统管理员的安全管理能力（包括安全审计、监视、进攻识别和响应等），提高了信息系统的安全性。入侵检测系统被认为是防火墙之后的第二道安全闻门，它能在不影响网络性能的情况下对网络进行监听，从而提供对内部攻击、外部攻击和误操作的实时保护</p><p>入侵检测系统作为一种积极主动的安全防护工具，能够在计算机网络和系统受到危害之前进行报警、拦截和响应。其主要功能包括：通过检测和记录系统中的安全违规行为，惩罚信息系统攻击，防止入侵事件的发生；检测其他安全措施未能阻止的攻击或安全违规行为检测黑客在攻击前的探测行为，预先给管理员发出警报；报告信息系统中存在的安全威胁；提供有关攻击的信息，帮助管理员诊断系统中存在的安全弱点，利于其进行修补。</p><p>在大型、复杂的计算机系统中布置入侵检测系统，可以明显提高信息系统安全管理的质量。</p><p>1.入侵检测技术入侵检测系统的处理过程分为数据采集阶段、数据处理及过滤阶段入侵分析及检测阶段、报告及响应阶段 4 个阶段。数据采集阶段主要收集目标系统中引擎</p><p>提供的通信数据包和系统使用等情况。数据处理及过滤阶段是把采集到的数据转换为可以识别是否发生入侵的数据的阶段。分析及检测阶段通过分析上一阶段提供的数据来判断是否发生入侵。这一阶段是整个入侵检测系统的核心阶段。报告及响应阶段针对上一个阶段中得出的判断作出响应。如果被判断为发生入侵，系统将对其采取相应的响应措施，或者通知管理人员发生入侵，以便于采取措施。</p><p>在入侵检测系统的工作过程中，对信息系统中的各种事件进行分析，从中检测出违反安全策略的行为是入侵检测系统的核心功能。检测技术分为两类：一种是基于标识（Signature- based）的入侵检测，另一种是基于异常情况（anomaly- based）的入侵检测。</p><p>在入侵检测系统的工作过程中，对信息系统中的各种事件进行分析，从中检测出违反安全策略的行为是入侵检测系统的核心功能。检测技术分为两类：一种是基于标识（signature- based）的入侵检测，另一种是基于异常情况（anomaly- based）的入侵检测。</p><p>基于标识的检测技术，先定义出违背安全策略的事件的特征，如网络数据包的某些头信息等。然后对收集到的数据进行分析，通过判别这类特征是否在所收集到的数据中出现来判断是否受到入侵。此方法非常类似杀毒软件的特征码检测，比较简单有效。</p><p>而基于异常的检测技术则先定义一组系统“正常”情况的数值，如 CPU 利用率、网络流量规律、文件校验和等（这类数据可以人为定义，也可以通过观察系统，并用统计的办法得出），然后将系统运行时的数值与所定义的“正常”情况比较，得出是否有被攻击的迹象。这种检测方式的核心在于如何定义所谓的“正常”情况。</p><p>两种检测技术的方法、所得出的结论有时会有非常大的差异。基于标识的检测技术的核心是维护一个知识库。对于已知的攻击，它可以详细、准确地报告出攻击类型，但是对未知攻击却效果有限，而且知识库必须不断更新。基于异常的检测技术则无法准确判别出攻击的手法，但它可以判别更广泛，甚至未发觉的攻击。如果条件允许，两者结合的检测会达到更好的效果。</p><p>2.入侵检测系统的种类和选用一般来说，入侵检测系统可分为主机型和网络型。主机型入侵检测系统往往以系统日志、应用程序日志等作为数据源，当然也可以通过其他手段（如监控系统调用）从所在的主机收集信息进行分析。主机型入侵检测系统保护的般是其所在的主机系统。主机型入侵检测系统需要为不同平台开发不同的程序，而且会增加系统负荷，还要在每一台主机安装，比较麻烦，但是可以充分利用操作系统本身提供的功能，并结合异常分析，更准确地报告攻击行为。</p><p>网络型入侵检测系统则以网络上的数据包作为数据源，通过在一台主机或网络设备上监听本网段内的所有数据包来进行分析判断。一般网络型入侵检测系统担负着保护整个网段的任务。这种系统应用十分简便：一个网段上只需安装一个或几个这样的系统，便可以监测整个网段的情况，但是它不跨越多个物理网段，对于复杂结构的网络（如交换环境）监测效果有一定影响。</p><p>主机型入侵检测系统和网络型入侵检测系统各有利弊，应用中可以根据实际需要从中选择。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-安全性和保密性设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全性和保密性设计（七）网络安全体系</title>
      <link href="/2021/10/21/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%83%EF%BC%89%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%93%E7%B3%BB/"/>
      <url>/2021/10/21/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%83%EF%BC%89%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E4%BD%93%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="一、OSI-安全架构"><a href="#一、OSI-安全架构" class="headerlink" title="一、OSI 安全架构"></a>一、OSI 安全架构</h1><p>SO的OS/RM是著名的网络架构模型,但是,OS/RM并没有在安全性方面作专门的设计，因此该模型本身的安全性是很弱的。为了改善网络的安全状况，提高网络安全强度，又在OSI/RM的基础上提出了一套OS安全架构,用以强化网络的安全性。</p><p>OSI 安全架构是一个面向对象的、多层次的结构，它认为安全的网络应用是由安全的服务实现的，而安全服务又是由安全机制来实现的</p><p>1.OSI 安全服务</p><p>针对网络系统的技术和环境，OS 安全架构中对网络安全提出了 5 类安全服务，即对象认证服务、访问控制服务、数据保密性服务、数据完整性服务、禁止否认服务。</p><p> (1) 对象认证服务。对象认证服务又可分为对等实体认证和信源认证，用于识别对等实体或信源的身份，并对身份的真实性、有效性进行证实。其中，对等实体认证用来验证在某一通信过程中的一对关联实体中双方的声称是一致的，确认对等实体中没有假冒的身份。信源认证可以验证所接收到的信息是否确实具有它所声称的来源。</p><p> (2) 访问控制服务。访问控制服务防止越权使用通信网络中的资源。访问控制服务可以分为自主访问控制、强制访问控制、基于角色的访问控制。由于 DAC、MAC 固有的弱点，以及 RBAC 的突出优势，所以 RBAC 一出现就成为在设计中最受欢迎的一种访问控制方法访问控制的具体内容前面已有讲述，此处不再赘述。</p><p> (3) 数据保密性服务。数据保密性服务是针对信息泄漏而采取的防御措施，包括信息保密、选择段保密、业务流保密等内容。数据保密性服务是通过对网络中传输的数据进行加密来实现的</p><p> (4) 数据完整性服务。数据完整性服务包括防止非法篡改信息，如修改、删除、插入、复制等。</p><p> (5) 禁止否认服务。禁止否认服务可以防止信息的发送者在事后否认自己曾经进行过的操作，即通过证实所有发生过的操作防止抵赖。具体的可以分为防止发送抵赖、防止递交抵赖和进行公证等几个方面。</p><p>2.OS安全机制</p><p>为了实现前面所述的 OS5 种安全服务，OS 安全架构建议采用如下 8 种安全机制：加密机制、数字签名机制、访问控制机制、数据完整性机制、鉴别交换机制、流量填充机制路由验证机制、公正机制。</p><p>(1) 加密机制。加密机制即通过各种加密算法对网络中传输的信息进行加密，它是对信息进行保护的最常用措施。加密算法有许多种，大致分为对称密钥加密与公开密钥加密两大类，其中有些（例如，DES 等）加密算法已经可以通过硬件实现，具有很高的效率，</p><p>(2) 数字签名机制。数字签名机制是采用私钥进行数字签名，同时采用公开密钥加密算法对数字签名进行验证的方法。用来帮助信息的接收者确认收到的信息是否是由它所声称的发送方发出的，并且还能检验信息是否被篡改、实现禁止否认等服务。</p><p>(3) 访问控制机制。访问控制机制可根据系统中事先设计好的一系列访问规则判断主体对客体的访问是否合法，如果合法则继续进行访问操作，否则拒绝访问。访问控制机制是安全保护的最基本方法，是网络安全的前沿屏障</p><p>(4) 数据完整性机制。数据完整性机制包括数据单元的完整性和数据单元序列的完整性两个方面。它保证数据在传输、使用过程中始终是完整、正确的。数据完整性机制与数据加密机制密切相关</p><p>(5) 鉴别交换机制。鉴别交换机制以交换信息的方式来确认实体的身份，一般用于同级别的通信实体之间的认证。要实现鉴别交换常常用到如下技术。</p><p>①口令：由发送方提交，由接收方检测。</p><p>②加密：将交换的信息加密，使得只有合法用户才可以解读。</p><p>③实体的特征或所有权：例如，指纹识别、身份卡识别等</p><p>(6) 业务流填充机制。业务流填充机制是设法使加密装置在没有有效数据传输时，还按照一定的方式连续地向通信线路上发送伪随机序列，并且这里发出的伪随机序列也是经过加密处理的。这样，非法监听者就无法区分所监听到的信息中哪些是有效的，哪些是无效的从而可以防止非法攻击者监听数据，分析流量、流向等，达到保护通信安全的目的。</p><p>(7) 路由控制机制。在一个大型的网络里，从源节点到目的节点之间往往有多种路由其中有一些是安全的，而另一些可能是不安全的。在这种源节点到目的节点之间传送敏感数据时，就需要选择特定的安全的路由，使之只在安全的路径中传送，从而保证数据通信的安</p><p>(8) 公证机制。在一个复杂的信息系统中，一定有许多用户、资源等实体。由于各种原因，很难保证每个用户都是诚实的，每个资源都是可靠的，同时，也可能由于系统故障等原因造成信息延、丢失等。这些很可能会引起责任纠纷或争议。而公证机构是系统中通信的各方都信任的权威机构，通信的各方之间进行通信前，都与这个机构交换信息，从而借助于这个可以信赖的第三方保证通信是可信的，即使出现争议，也能通过公证机构进行仲裁。</p><p>3.OSI 安全服务与安全机制之间的关系</p><p>OSI 安全服务与安全机制之间不是一一对应的关系。有的服务需要借助多种机制来实线同时，有些机制可以提供多种服务。<br><img src="/images/ruankao/10-1.png"></p><h1 id="二、VPN-在网络安全中的应用"><a href="#二、VPN-在网络安全中的应用" class="headerlink" title="二、VPN 在网络安全中的应用"></a>二、VPN 在网络安全中的应用</h1><p>虚拟专用网络（Virtual Private Network, VPN）是指利用不安全的公共网络如 Internet 等作为传输媒介，通过一系列的安全技术处理，实现类似专用网络的安全性能，保证重要信息的安全传输的一种网络技术。</p><p>1.VPN 技术的优点</p><p>VPN 技术具有非常突出的优点，主要包括</p><p> (1) 网络通信安全。VPN 采用安全隧道等技术提供安全的端到端的连接服务，位于 VPN 两端的用户在 Internet 上通信时，其所传输的信息都是经过 RSA 不对称加密算法加密处理的，它的密钥则是通过 Diffie- Hellman 算法计算得出的，可以充分地保证数据通信的安全。</p><p> (2) 方便的扩充性。利用 VPN 技术实现企业内部专用网络，以及异地业务人员的远程接入等，具有方便灵活的可扩性。首先是重构非常方便，只需要调整配置等就可以重构网络；其次是扩充网络方便，只需要配置几个节点，不需要对己经建好的网络作工程上的调整。</p><p> (3) 方便的管理。利用 VPN 组网，可以把大量的网络管理工作放到互联网络服务提供商一端来统一实现，从而减轻了企业内部网络管理的负担。同时 VPN 也提供信息传输、路由等方面的智能特性及与其他网络设备相独立的特性，也给用户提供了网络管理的灵活的手段。</p><p> (4) 节约成本显著。利用已有的无处不在的 Internet 组建企业内部专用网络，可以节省大量的投资成本及后续的运营维护成本。以前，要实现两个远程网络的互联，主要是采用专线连接方式。这种方式成本太高。而 VPN 则是在 Internet 基础上建立的安全性较好的虚拟专用网，因此成本比较低，而且可以把一部分运行维护工作放到服务商端，又可以节约部分维护成本。</p><p>2.VPN的原理</p><p>实现 VPN 需要用到一系列关键的安全技术，包括：</p><p> (1) 安全隧道技术。即把传输的信息经过加密和协议封装处理后再嵌套装入另一种协议的数据包中送入网络中，像普通数据包一样进行传输。经过这样的处理，只有源端和目标端的用户对加密封裝的信息能进行提取和处理，而对于其他用户而言，这些信息只是无意义的垃圾。</p><p> (2) 用户认证技术。在连接开始之前先确认用户的身份，然后系统根据用户的身份进行相应的授权和资源访问控制。</p><p> (3) 访问控制技术。由 VPN 服务的提供者与最终网络信息资源的提供者共同协商确定用户对资源的访问权限，以此实现基于用户的访问控制，实现对信息资源的保护。<br><img src="/images/ruankao/10-2.png"></p><p>安全隧道代理和管理中心组成安全传输平面（Secure Transmission Plane, STP），实现在 Internet 上安全传输和相应的系统管理功能。用户认证管理中心和密钥分配中心组成公共功能平面（Common Function Plane, CFP），它是安全传输平面的辅助平面，主要向用户代理提供相对独立的用户身份认证与管理、密钥的分配与管理功能。</p><p>建立 VPN 通信时，VPN 用户代理向安全隧道代理请求建立安全隧道，安全隧道代理接受后，在管理中心的控制和管理下在 Internet 上建立安全隧道，然后向用户提供透明的网络传输。VPN 用户代理包括安全隧道终端功能、用户认证功能和访问控制功能三个部分，它们共同向上层应用提供完整的 VPN 服务。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-安全性和保密性设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全性和保密性设计（五）计算机病毒与防治</title>
      <link href="/2021/10/21/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%94%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%97%85%E6%AF%92%E4%B8%8E%E9%98%B2%E6%B2%BB/"/>
      <url>/2021/10/21/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%94%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%97%85%E6%AF%92%E4%B8%8E%E9%98%B2%E6%B2%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="一、计算机病毒概述"><a href="#一、计算机病毒概述" class="headerlink" title="一、计算机病毒概述"></a>一、计算机病毒概述</h1><p>计算机病毒（Computer Virus）的概念最早是由美国计算机病毒究专家 F. Cohen 博士提出的。对于计算机病毒的定义，不同的国家、不同的专家从不同的角度给出的定义也不尽相同。根据《中华人民共和国计算机信息系统安全保护条例》第 28 条规定：“计算机病毒，是指编制或者在计算机程序中插入的破坏计算机功能或者毁坏数据，影响计算机使用，并能自我复制的一组计算机指令或者程序代码。”此定义在我国具有法律效力和权威性。</p><p>和生物病毒一样，计算机病毒的复制能力使得计算机病毒可以很快地蔓延，又常常难以根除。它们能把自身附在宿主系统或文件中，当系统被运行或文件从一个用户传送到另一个用户时，它们就随同系统运行或文件传输一起蔓延开来。</p><p>在病毒的生命周期中，病毒一般会经历潜伏阶段、传染阶段、触发阶段和发作阶段 4 个阶段。多数病毒是基于某种特定的方式进行工作的，因此也依赖于某个特定的操作系统或某个特定的硬件平台。因此，攻击者经常利用某个特定系统的细节和弱点来设计病毒程序。</p><p>1.计算机病毒的特征</p><p>计算机病毒多种多样，但是它们都具有共同的特征，即传染性、非授权性、潜伏性和破坏性。</p><p>计算机病毒的传染性是指病毒具有把自身复制到其他系统或文件等宿主中去的能力，这是病毒的基本特征。非授权性是指病毒程序的执行不需要得到用户的同意，对用户来说是未知的。潜伏性是病毒生存的必要条件，即病毒潜伏在系统中而不被人们所发觉。破坏性是指病毒在一定条件下可以自动触发，并对计算机实施破坏，是病毒的表现特征。病毒的非授权性、潜伏性使得病毒的行为是不可预见的，也增加了病毒检测的困难。病毒破坏性的触发条件越多，则传染性越强，但同时其潜伏性降低。一个病毒必须具备传染性，但不一定需要拥有其他属性。</p><p>2.计算机病毒的分类</p><p>计算机病毒按不同的分类标准，有许多不同分类：</p><p>按照操作系统分，可分为攻击 DOS 系统的病毒、攻击 Windows 系统的病毒、攻击 Unix/ Linux系统的病毒、攻击OS/2系统的病毒、攻击 Macintosh 系统的病毒、攻击手机的病毒、其他操作系统上的病毒。</p><p>按照链接方式分，计算机病毒可分为源码型病毒、嵌入型病毒、She 病毒、宏病毒、脚本型病毒、操作系统型病毒</p><p>按照破坏情况分，计算机病毒可分为良性病毒和恶性病毒。</p><p>按传播媒介来分，计算机病毒可分为单机病毒和网络病毒。</p><p>3.计算机病毒的组成</p><p>病毒程序一般由传染模块、触发模块、破坏模块和主控模块组成，相应地完成病毒的传染、触发和破坏等任务。也有少数病毒不具备所有的模块</p><p> (1) 传染模块。传染模块是病毒进行扩散传播的部分，负责把计算机病毒从一个系统或文件传播到更多的系统或文件中去。每个病毒都有一个自我识别的标记，叫作传染标记或病毒签名。病毒程序传染系统或文件时，要把传染标记写入系统或文件中某个特定区域，例如，宿主程序、注册表、物理磁道等，作为该系统或文件已被传染的标记，以防止重复传染，增强病毒的潜伏效果。传染模块的主要功能有：寻找一个可传染的系统或文件；检査该系统或文件中是否有传染标记，判断该系统或文件是否已经被传染；如果没有传染标记，则进行传染操作，将病毒代码植入宿主系统或文件中，完成一次传染。</p><p> (2) 触发模块。病毒触发模块主要检査预定触发条件是否满足，如果满足，则调用相应传染或破坏模块，进行传染和破坏动作。病毒的触发条件有多种形式，如日期、时间、键盘、发现特定程序、发现网络连接、发现系统漏洞、传染的次数、特定中断调用的次数等。依据触发条件的情况，可以控制病毒传染和破坏动作的频率，使病毒在隐蔽的状态下，进行传染和破坏动作。</p><p> (3) 破坏模块。破坏模块负责实施病毒的破坏动作。这些破坏动作可能是破坏程序及数据、降低系统的性能、干扰系统的运行，还有些病毒甚至可以破坏计算机硬件。也有少数病毒的破坏模块并没有明显的恶意破坏行为，仅在被传染的系统设备上表现出特定的现象，该模块有时又称为表现模块。</p><p> (4) 主控模块。主控模块在总体上控制病毒程序的运行。染毒程序运行时，首先运行的是病毒的主控模块。</p><h1 id="二、网络环境下的病毒发展新趋势"><a href="#二、网络环境下的病毒发展新趋势" class="headerlink" title="二、网络环境下的病毒发展新趋势"></a>二、网络环境下的病毒发展新趋势</h1><h1 id="三、计算机病毒的检测与清除"><a href="#三、计算机病毒的检测与清除" class="headerlink" title="三、计算机病毒的检测与清除"></a>三、计算机病毒的检测与清除</h1><p>1.特征码检测</p><p>所谓特征码査毒法，就是在获取病毒样本后，提取出其特征码，（例如，杨基病毒的特征码是 16 进制的“F47A200”，快乐时光病毒中的“Fun Time”字符串等），然后通过该特征码对目标文件或内存等进行扫描。如果发现这种特征码，就说明感染了这种病毒，然后针对性地清除病毒。</p><p>特征码技术是最早被采用，而且被许多反病毒软件一直沿用至今的病毒检测方法。特征码检测方法检测病毒，方法简单、准确、快速，可识别病毒的名称，误报警率低。</p><p>但是，特征码技术只能诊断已知的计算机病毒，其响应速度永远滞后于病毒，而且不能检査未知病毒和变形病毒，不能对付隐蔽性病毒。</p><p>随着计算机病毒的发展，不断出现的新的病毒，甚至有些病毒具有自动变形功能，例如，“卡死脖”病毒，采用传统病毒特征码搜索技术的杀毒软件常常难以应付这些变形病毒。为此，人们提出了广谱特征码过滤技术，该技术在一定程度上可以弥补以上缺陷。</p><p>2.校验和检测</p><p>先计算正常文件的内容和正常的系统扇区数据的校验和，将该校验和写入数据库中保存。检测时，检査文件现在内容的校验和与原来保存的校验和是否一致，从而可以发现文件或扇区是否被感染，这种方法称校验和检测。</p><p>校验和检测技术的优点是：方法简单、能发现未知病毒、被査文件的细微变化也能发现。但是，它不能识别病毒种类。而且，由于病毒感染并非是文件内容改变的唯一原因，文件内容的改变有可能是正常程序引起的，所以校验和检测技术受到种种限制，同时这种方法也会影响文件的运行速度。另外，校验和不能检测新的文件，如从网络传输来的文件、磁盘和光盘拷入的文件、备份文件和压缩文档中的文件等。</p><p>3.行为监测</p><p>随着近年来病毒与反病毒斗争的不断升级、新病毒产生的速度不断加快，传统反病毒技术滞后于病毒的特点越来越不能适应防病毒的需要，更需要采用通用反病毒技术来保护计算机的安全。现阶段中被广泛研究和采用的通用病毒检测技术有病毒行为监测技术、启发式扫描技术和虚拟机技术。</p><p>通过研究发现，病毒不论伪装得如何巧妙，它们总是存在着一些和正常程序不同的行为，而这些行为在正常应用程序中却十分罕见，这就是病毒的行为特性。</p><p>常见的病毒行为特性有：对可执行文件进行写操作、写磁盘引导区、病毒程序与宿主程序的切换、程序自己重定位、通过搜索函数索引表来获取 A 函数地址等。</p><p>利用这些特征，就可以对病毒实施监视，在病毒程序体进行活动时发出报警。采用这种行为特性检测方法不仅可以检测出已知病毒，而且可以检测出新出现的未知病毒，无论该病毒是什么种类，或是否变形。但是，行为监测技术也可能误报警，而且不能识别病毒名称。</p><p>4.启发式扫描</p><p>在特征码扫描技术的基础上，利用对病毒代码的分析，获得一些统计的、静态的启发性知识，可以用于静态的启发性扫描技术（Heuristic Scanning)</p><p>启发式扫描主要分析文件中的指令序列，根据统计知识，判断该文件可能被感染或者没有被感染，从而有可能找到未知的病毒。因此，启发式扫描技术是一种概率方法，遵循概率理论的规律。早期的启发式扫描软件采用代码反编译技术作为它的实现基础。这类病毒检测软件在内部保存数万种病毒行为代码的跳转表，每个表项对应一类病毒行为的必用代码序列，如病毒格式化磁盘必须用到的代码等。启发式病毒扫描软件利用代码反编译技术，反编译出被检测文件的代码，然后在这些表格的支持下，使用“静态代码分析法”和“代码相似比较法”等有效手段，就能有效地査出已知病毒的变种，以及判定文件是否含有未知病毒。</p><p>由于病毒代码千变万化，具体实现启发式病毒扫描技术是相当复杂的。通常这类病毒检测软件要能够识别并探测许多可疑的程序代码指令序列，如格式化磁盘类操作、搜索和定位各种可执行程序的操作、实现驻留内存的操作、子程序调用中只执行入栈操作、远距离（如超过文件长度的三分之二）跳往文件头的指令等。一般来说，仅仅一项可疑的功能操作不足以触发病毒报警。但如果同时具有多项可疑操作，目标程序就很可能是病毒程序</p><p>5.虚拟机</p><p>自动变形病毒，也称为多态性病毒或多型（形）性病毒。自动变形病毒每次感染宿主时都自动改变自身的程序代码和特征码，这类病毒的代表有“幽灵”病毒等</p><p>般而言，自动变形病毒采用以下几种操作来不断变换自己：采用等价代码对原有代码进行替换；改变与执行次序无关的指令的次序；增加许多垃圾指令；对原有病毒代码进行压缩或加密等。因为自动变形病毒对其代码不断进行变换，而且每次传染使用不同的密钥。将染毒文件的病毒代码相互比较，也难以找出相同的可作为病毒特征的稳定特征码，因此用传统检测方法根本无法检测出这类病毒。但是，自动变形病毒也有一个共同的规律：即无论病毒如何变化，每一个自动变形病毒在其自身执行时都要对自身进行还原。</p><p>为了检测自动变形病毒，出现了一种新的病毒检测方法虚拟机技术”。该技术用软件方法让病毒在一个虚拟的环境中，仿真一部分系统指令和功能调用，对病毒代码作解释执行，而且仿真运行不对系统产生实际的影响，即可获得程序运行的后果，并在此基础上对程序运行分析，进而判断是否存在病毒。不管病毒使用什么样的加密、隐形等伪装手段，只要在虚拟机所营造的虚拟环境下，病毒都会随着运行过程自动褪去伪装（实际上是被虚拟机动态还原）。正是基于上述设计原理，虚拟机在处理加密、变换、变形病毒方面具有很强的优越性。</p><p>虚拟机检测方法，实际上是用软件实现了模拟人工反编译、智能动态跟踪、分析代码运行的过程，其效率更高，也更准确。使得反病毒从单纯的静态分析进入了动态和静态分析相结合的新时期，极大地提高了对已知病毒和未知病毒的检测水平。在今后相当长的一段时间内，虚拟机技术还会有很大的发展</p><p>6.病毒的清除</p><p>将病毒代码从宿主中去除，使之恢复为可正常运行的系统或程序，称为病毒清除。大多数情况下，采用反病毒软件或采用手工处理方式可以恢复受感染的文件或系统。</p><p>不是所有染毒文件都可以消毒，也不是所有染毒的宿主都能够被有效恢复。依据病毒的种类及其破坏行为的不同，感染病毒后，如果宿主数据没有被删除，常常可以恢复；如果宿主数据被病毒删除或覆盖、或者宿主数据的逻辑关系被病毒破坏，常常不能恢复。</p><h1 id="四、计算机病毒的预防"><a href="#四、计算机病毒的预防" class="headerlink" title="四、计算机病毒的预防"></a>四、计算机病毒的预防</h1><p>“防重于治”，对于计算机病毒也是如此。在日常使用计算机的过程中，同时做好预防工作，可以很大程度上避免被病毒感染，减少不必要的物力、数据损失</p><p>要预防计算机病毒，最好的方法就是不与外界交换文件，但这是不可能的。人们在工作中，要经常与外界进行各种数据交换。而大量与外界交换信息，就给病毒的感染与传播创造了条件。</p><p>为了保护计算机不受病毒破坏，至少必须做到： (1) 一定要在计算机中安装反病毒软件。</p><p> (2) 不要轻易使用来历不明的或者没有经过确认的软件；对从网络上下载的程序和文档应十分小心，在执行文件或打开文档之前，要检査是否有病毒；从外部取得的介质及其中的文件，应检査病毒后再使用；压缩后的文件应解压缩后检査病毒。</p><p> (3) 电子邮件的附件应该先检病毒后再开启，并在发送邮件之前检査病毒；不要运行来历不明的 E-mail 附件，尤其是在邮件正文中以诱惑性的文字建议执行的附件程序。</p><p> (4) 定期使用反病毒软件扫描系统。</p><p> (5) 确保所使用的反病毒软件的扫描引和病毒代码库为最新的，因为旧的扫描引擎和病毒代码库不会检查到新出现的病毒</p><p> (6) 为防止引导型病毒对系统的破坏，应该在系统安装完成后立即制作系统应急启动盘，以便万一硬盘分区表遭到破坏时，能从应急盘启动，并用备份的引导区、分区表等直接进行恢复。</p><p> (7) 对于一些重要的文件，要定期进行备份，以便万一系统遭受病毒破坏时能够从备份恢复。</p><p> (8) 利用安全扫描工具定时扫描系统和主机。若发现漏洞，及时寻找解决方案，从而减少被病毒和蠕虫感染的机会。</p><p> (9) 使用反病毒软件时，最好先毒，找到了带毒文件后，再确定是否进行杀毒操作。因为査毒不是危险操作，它可能产生误报，但绝不会对系统造成任何损坏；而杀毒是危险操作，有的操作可能把文件破坏。</p><p> (10) 建立本单位的计算机病毒防治管理制度；并对计算机用户进行反病毒培训。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-安全性和保密性设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全性和保密性设计（四）安全协议</title>
      <link href="/2021/10/21/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%9B%9B%EF%BC%89%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE/"/>
      <url>/2021/10/21/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%9B%9B%EF%BC%89%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、IPSec-协议简述"><a href="#一、IPSec-协议简述" class="headerlink" title="一、IPSec 协议简述"></a>一、IPSec 协议简述</h1><p>在TCP/P协议中,对IP数据包没有提供任何安全保护,攻击者可以通过网络嗅探、IP 欺骗、连接截获等方法来攻击正常的TCP/IP通信。因此,通信过程中会存在以下危险:数据并非来自合法的发送者、数据在传输过程中被非法篡改、信息内容已被人窃取等。</p><p>为了确保在 P 网络上进行安全保密的通信，IETF 制定了一套开放标准的网络安全协议  Ipsec (IP Security）。该协议把密码技术应用在网络层，以向信息的发送方和接收方提供源地址验证、数据传输的完整性、存取控制、保密性等安全服务，保护通信免遭窃听、抵御网络攻击，而且更高层的应用层协议也可以直接或间接地使用这些安全服务，为其上层协议如 TCP、UDP 等提供透明的安全保护服务，在 Internet 这样不安全的网络中为通信提供安全保证。</p><p>在 IPv6 中，Ipsec 协议是一个必备的组成部分，被强制实施；在 IPv4 中，它是一个可选的扩展协议。</p><p>由于 Internet 等网络具有公共特性，因此在通信过程中难以确认传输媒介是安全的，所以要进行安全的通信，则通信数据必须经过加密。Ipsec 协议对数据的加密以数据包而不是整个数据流为单位，这不仅非常灵活，也有助于进一步提高 P 数据包的安全性。</p><p>Ipsec 协议的基本工作原理是：发送方在发送数据前对数据实施加密，然后把密文数据发送到网络中去，开始传输。在整个传输过程中，数据都是以密文方式传输的，直到数据到达目的节点，才由接收方对密文进行解密，提取明文信息。</p><p>PSec 协议对网络层的通信使用了加密技术，它不是加密数据包的头部和尾部信息（如源地址、目的地址、端口号、CRC 校验值等），而是对数据包中的数据进行加密。由于加密过程发生在 IP 层，因此可在不改变 HTP 等上层应用协议的情况下进行网络协议的安全加密，为通信提供透明的安全传输服务。</p><p> Ipsec 协议中使用端到端的工作模式，掌握加密、解密方法的只有数据的发送方和接收方，两者各自负责相应的数据加密、解密处理，而网络中其他节点只负责转发数据，无须支持 Ipsec，从而可以实现加密通信与传输媒介无关，保证机密数据在公共网络环境下的适应性和安全性。因此，Ipsec 可以应用到非常广泛的环境中，能为局域网、拨号用户、远程站点、Internet 之上的通信提供强有力的保护，而且还能用来筛选特定数据流，还可以用于不同局域网之间通过互联网的安全互联</p><p> Ipsec 协议不是一个单独的协议，它包括应用于 P 层上网络数据安全的一整套协议，主要包括 AH (Authentication Header, IP 认证头部协议）、ESP (Encapsulating Security Payload，封装安全负载协议）、IKE (Internet Key Exchange, Internet 密钥交换协议）和用于网络认证及加密的一些算法等。</p><p>AH 提供数据的完整性和认证，但不包括保密性；而 ESP 原则上只提供保密性，但也可在 ESP Header 中选择适当的算法及模式来实现数据的完整性和认证。AH 和 ESP 可分开使用也可一起使用。IKE 则提供加密算法、密钥等的协商。</p><h1 id="二、SSL-协议"><a href="#二、SSL-协议" class="headerlink" title="二、SSL 协议"></a>二、SSL 协议</h1><p>SSL 是用于安全传输数据的一种通信协议。它米用公钥加密技术、对称密钥加密技术等保护两个应用之间的信息传输的机密性和完整性。但是，SSL 也有一个不足，就是它本身不能保证传输信息的不可否认性。</p><p>SL 协议包括服务器认证、客户认证、SSL 链路上的数据完整性、SSL 链路上的数据保密性等几个方面，通过在浏览器和 Web 服务器之间建立一条安全的通道来保证 Internet 数据传递的安全性。目前，利用公钥加密的 SL 技术，已经成为 Internet 上进行保密通信的工业标准。SSL 协议常常用于增强 Web 服务的安全性。</p><p>在 TCP/IP协议中,SSL协议建立在传输层即TCP之上、应用层之下。SSL 协议有一个突出的优点，就是它与应用层协议相独立，高层的应用层协议如 HTTP 等可以透明地建立在 SSL 协议之上进行工作。</p><p>通过 SSL 协议建立的传输通道具有如下的基本安全性</p><p> (1) 通道是保密的，经过握手确定密钥之后，所有的消息被加密。SSL 协议在应用层协议工作之前就已经完成了加密算法、密钥的协商、服务器认证等工作，而此后的所有应用层所传送的数据都是经过加密的，因此 SSL 协议具有很好的保密性。</p><p> (2) 通道是被认证的，通信中的服务器端总是被认证，客户端可选认证。在基于 SSL 协议的通信过程中，服务器端认证是必须进行的，所以，即使在一次会话过程中不进行客户端认证，该会话的确认性也能够有很好的保证。</p><p> (3) 通道是可靠的，用 MAC 对传送的消息进行完整性检查，保证通道上数据的完整性。基于 SSL 协议的通信过程，因为传递的消息中包括消息完整性检査数据（即 MAC 数据），因此，可以保证该通信是可靠的。</p><p>SSL 协议由 SL 记录协议、SSL 握手协议、SSL 密码变更说明协议、SSL 警告协议等组成。</p><h1 id="三、PGP-协议"><a href="#三、PGP-协议" class="headerlink" title="三、PGP 协议"></a>三、PGP 协议</h1><p>PGP (Pretty Good Privacy）是美国人 Philzimmermann 于 1995 年提出的一套电子邮件加密方案。它可以用来对邮件加密以防止非授权者阅读，还能对邮件加上数字签名而使收信人可以确认邮件确实是由发送方发出的</p><p>PGP 并不是新的加密算法或协议，它综合采用了多种加密算法，例如，对邮件内容加密采用 IDEA 算法、对于加密信息采用 RSA 公钥加密算法，还采用了用于数字签名的消息摘要算法，加密前进行压缩处理等技术手段进行邮件加密的一套软件。通过组合使用这些加密方法，把 RSA 公钥加密体系的良好加密效果和对称密钥加密体系的高速度结合起来，并且通过在数字签名和密钥认证管理机制中的巧妙设计，使得 PGP 成为一个优秀的强有力的数据加密程序。</p><p>由于 PGP 功能强大、处理迅速、使用简便，而且它的源代码是免费的，因此，PGP 在 T 等多个行业得到了广泛的应用，迅速普及。如今，PGP 除了用于通常的电子邮件加密，还可以用来加密重要文件，用 PGP 代替 Uuencode 生成 RADIX64 格式（就是 MIME 的 BASE64 格式）的编码文件，以保证它们在网络上的安全传输，或为文件做数字签名，以防止篡改和伪造。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-安全性和保密性设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全性和保密性设计（六）身份认证与访问控制</title>
      <link href="/2021/10/21/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%85%AD%EF%BC%89%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
      <url>/2021/10/21/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%85%AD%EF%BC%89%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>访问控制是通过某种途径限制和允许对资源的访问能力及范围的一种方法。它是针对越权使用系统资源的保护措施，通过限制对文件等资源的访问，防止非法用户的侵入或者合法用户的不当操作造成的破坏，从而保证信息系统资源的合法使用</p><p>访问控制技术可以通过对计算机系统的控制，自动、有效地防止对系统资源进行非法访问或者不当地使用，检测出一部分安全侵害，同时可以支持应用和数据的安全需求</p><p>访问控制技术并不能取代身份认证，它是建立在身份认证的基础之上的。</p><p>问控制技术包括如下几方面的内容</p><p> (1) 用户标识与认证。用户标识与认证是一种基于用户的访问控制技术，它是防止未经授权的用户进入系统的一种常规技术措施。用户标识用于向系统声明用户的身份。用户标识一般应当具有唯一性，其最常见的形式就是用户 ID。系统必须采用一定的策略来维护所有的用户标识。验证用户标识的有效性、真实性，通常有三种类型的认证方式：一是用户个人掌握的秘密信息，例如，口令、密钥、PIN 码等；二是用户个人所拥有的带有认证信息的特定物品，例如，磁卡、IC 卡等；三是用户个人的特定生理、生物学特征，例如，声音指纹等。在同一种系统中可以单独采用一种认证方法，也可以联合采用多种认证方法。</p><p> (2) 逻辑访问控制。逻辑访问控制是基于系统的访问控制技术，用来控制特定的用户对特定资源的访问。通常，把用户分成不同的组，再对组授予不同的访问权限来实现对用户的逻辑访问控制，防止用户访问他所不需要访问的资源、或者进行与工作无关的访问</p><p> (3) 审计与跟踪。审计与跟踪系统的一个或多个运行记录，在事件发生后对事件进行调査，分析其时间、原因、活动内容、引发的相关事件、涉及的用户等。</p><p> (4) 公共访问控制。如果一个应用系统是面向公众开放，允许公众进行访问时，面临的主要威胁是来自外部的匿名攻击，必须采取访问控制等措施以保护系统数据的完整性和敏感信息的保密性。</p><h1 id="一、身份认证技术"><a href="#一、身份认证技术" class="headerlink" title="一、身份认证技术"></a>一、身份认证技术</h1><p>身份认证是对系统的用户进行有效性、真实性验证。</p><p>1.口令认证方式</p><p>使用口令认证方式，用户必须具有一个唯一的系统标识，并且保证口令在系统的使用和存储过程中是安全的，同时口令在传输过程中不能被窃取、替换。另外特别要注意的是在认证前，用户必须确认认证者的真实身份，以防止把口令发给冒充的认证者。</p><p>使用口令的单向身份认证过程一般是：请求认证者和认证者之间建立安全连接、并确认认证者身份等；然后请求认证者向认证者发送认证请求，认证请求中必须包括请求认证者的 ID 和口令；认证者接受 ID 和口令，在用户数据库中找出请求认证的 ID 和口令；査找是否有此用户并比较两口令是否相同；最后向请求认证者发回认证结果。如果请求认证者的 ID 在认证者的用户数据库中，并且请求认证者发送的口令与数据库中相应的口令相同，则允许请求认证者通过认证</p><p>2.基于公钥签名的认证方式</p><p>公开密钥签名算法的身份认证方式，是通过请求认证者与认证者（对于双向身份认证而言，双方互为请求认证者和认证者）之间对于一个随机数做数字签名与验证数字签名来实现的。这种方式中认证双方的个人秘密信息不用在网络上传送，从而减少了口令等秘密信息泄漏的风险。</p><p>采用数字签名技术认证与口令认证方式有一个很大的不同：口令认证通常在正式数据交换开始之前进行。认证一旦通过，双方即建立安全通道进行通信，此后的通信被认为是安全的，不再进行身份认证；而数字签名认证在每一次的请求和响应中进行，即接收信息的一方先从接收到的信息中验证发送者的身份信息，验证通过后才对收到的信息进行相应处理</p><p>使用公钥加密算法进行身份认证要求：请求认证者必须具有私钥实现数字签名的功能；认证者必须具有使用公钥验证数字签名的功能；认证者必须具有产生随机数的功能，而且随机数的质量必须达到一定要求</p><p>使用公钥加密算法进行身份认证的方式，对用于数字签名的私钥由参与通信的认证者自己保密，而用于验证数字签名的公钥则需要采用可靠的方式进行安全分发。一般可以采用公钥数据库方式或者使用认证机构签发数字证书的方式（认证机构与数字证书的内容参见前文 PKI 部分）</p><p>如果使用公钥数据库的方式管理公钥，则请求认证者 1D 就包含在认证请求中发给认证者，认证者使用该 ID 从公钥数据库中获得请求认证者的公钥。</p><p>如果使用认证机构签发数字证书的方式管理公钥，则请求认证者的数字证书包含在认证请求中发给认证者，认证者验证请求认证者的数字证书后，从数字证书中获取请求认证者的公钥。</p><p>3.持卡认证方式</p><p>持卡认证方式最早采用磁卡。磁卡中最重要的部分是磁道，不仅存储数据，而且还存储用户的身份信息。目前所用的卡是 IC 卡，与磁卡相比，它除了存储容量大之外，还可一卡多用，同时具有可靠性高，寿命长，读写机构简单可靠，造价便宜，维护方便，容易推广等诸多优点。正由于上述优点，使得 IC 卡在世界各地广泛使用。IC 卡上一般分为不加密的公共区、加密的数据区等，有些还有自己的操作系统和微处理器。IC 卡已被广泛应用于身份认证领域。</p><p>一般 IC 卡与用户的个人 PIN 一起使用。在脱机系统中，PN 以加密的形式存在卡中识别设备读出 C 卡中的身份信息，然后将其中的 PIN 解密，与用户输入的 PIN 比较，以决定 IC 卡持有者是否合法。在联机系统中，PIN 可不存在 IC 卡上，而存在主机系统中，鉴别时，系统将用户输入的 PIN 与主机的 PIN 比较，而由此认证其身份的合法性。</p><p>4.基于人体生物特征的认证方式</p><p>这种方式是指通过计算机，利用人体固有的生理特征或行为特征进行个人身份鉴定。与传统的身份鉴别手段相比，基于生物特征的认证技术具有突出的优点：一是不会遗忘或丢失二是防伪性能好，无法伪造；三是随时随地可用。能够用来鉴别身份的生物特征一般具有广泛性（每个人都应该具有这种特性）、唯一性（每个人拥有的特征应各不相同）、稳定性（所选择的特征应该不随时间变化而发生变化）和可采集性（所选择的特征应该便于采集、测量）。前，可用于身份鉴别的生物特征主要有指纹、笔迹、脸像、红外温、视网膜、手形、掌纹等。</p><p>由于生物特征识别的设备比其他身份认证的设备要复杂，所以一般用在非常重要的机密场合，如军事等。生物特征识别主要采用模式识别技术。身份识别系统工作方式分为识别模式和鉴定模式，其性能指标主要有错误拒绝率和错误接受率等。在选择这种认证方式时需要对这些参数作认真的考虑。</p><p>5.动态口令技术（一次性口令技术）</p><p>般情况下，所使用的计算机口令都是静态的，也就是说在一定的时间内是相对不变的，而且可重复使用。这种口令很容易被系统中的嗅探程序所劫持，而且很容易受到基于字典的暴力攻击</p><p>针对这种静态口令认证方式的缺陷，人们提出了利用散列函数产生一次性口令的方法，即用户每次登录系统时使用的口令都是变化的。一次性口令是动态变化的密码，其变化来源于产生密码的运算因子。一次性口令的产生因子一般都采用双运算因子：一是用户的私钥，它代表用户身份的识别码，是固定不变的。二是变动因子，正是变动因子的不断变化，才能够产生动态的一次性口令</p><p>动态口令技术认证方式中要用到动态口令密码卡，这是一种便于携带的智能化硬件产品。这种密码卡内置的构件和程序能通过密码卡内的密钥加上其他因子动态地计算出新的口令</p><p>当密码卡持有者将这个口令输入计算机时，系统中的认证服务器会根据相同的算法和动态因子计算出对应于该密码卡的认证口令，并把这个口令与密码卡产生的口令比对，进行身份认证。</p><p>6.PPp中的认证协议</p><p>点到点协议（Point-to- Point Protocol, PPp）提供了一种在点到点链路上封装网络层协议信息的标准方法。PP 也定义了可扩展的链路控制协议。链路控制协议使用验证协议磋商机制，在链路层上传输网络层协议前验证链路的对端。</p><p>PPP 包含如下几个部分：在串行链路上封装数据报的方法；建立、配置和测试数据链路连接的链路控制协议（Link Control Protocol, LC）；建立和配置不同网络层协议的一组网络控制协议（Network Control Protocol, NCP）。</p><p>PPP 协议定义了两种验证协议：密码验证协议（Password Authentication Protocol, PAP）和挑战一握手验证协议（Challenge- Handshake Authentication Protocol, CHAP），此外还有扩展认证协议（Extensible Authentication Protocol, EAP）。</p><p>一个典型的 PPP 链路建立过程分为三个阶段：创建阶段、认证阶段和网络层协商阶段。（1) 创建阶段。在这个阶段，将对基本的通信方式进行选择。链路两端设备通过 LCP 向对方发送配置信息，建立链路。在链路创建阶段，只是对验证协议进行选择，具体的用户验证过程在认证阶段实现。</p><p> (2) 认证阶段。在这个阶段，客户端会将自己的身份发送给远端的接入服务器。该阶段使用一种安全的验证方式避免第三方窃取数据或冒充远程客户接管与客户端的连接。认证成功，则转到网络层协商阶段。如果认证失败，则链路终止。</p><p> (3) 网络层协商阶段。认证阶段完成之后，PPP 将调用在链路创建阶段选定的各种 NC 协商高层协议问题，例如，在该阶段 IP 控制协议可以向拨入用户分配动态地址。这样，经过三个阶段以后，一条完整的 PP 链路就建立起来了。</p><p>最常用的认证协议有 PAP 和 CHAP，此外还有 EAP。</p><p>7.RADIUS 协议</p><p> RADIUS (Remote Authentication Dial- in User Service)协议是由朗讯公司提出的客户/服务器方式的安全认证协议，它能在拨号网络中提供注册、验证功能，现已成为 Internet 的正式协议标准，是当前流行的 AAA (Authentication、Authorization、Accountion）协议  RADIUS 协议可以把拨号和认证这两种功能放在两个分离的服务器一一网络接入服务器（NAS）和后台认证服务器（RADIUS 服务器）上。在 RADIUS 服务器上存放有用户名和它们相应的认证信息的一个大数据库，来提供认证用户名和密码及向用户发送配置服务的详细信息等。</p><h1 id="二、访问控制技术"><a href="#二、访问控制技术" class="headerlink" title="二、访问控制技术"></a>二、访问控制技术</h1><p>访问控制是在身份认证的基础上，根据不同身份的用户对用户的访问请求加以限制。身份认证关心的是“你是谁，你是否拥有你所声明的身份”这个问题；而访问控制则关心“你能做什么，不能做什么”的问题。</p><p>在访问控制过程中，一般把发出访问、存取请求的一方，例如，用户、程序、进程等叫作主体；而把被访问的对象和资源，例如，文件、数据库、设备、内存区域等叫作客体。另外还有一套定义主体与客体之间相互关系，确定不同主体对不同客体的访问能力与权限的规则，叫作访问规则。一个完整的访问控制体系就是由上述三方面共同构成的。</p><p>1.访问控制策略</p><p>访问控制策略一般可以划分为三类：自主访问控制（Discretionary Access Control, DAC）强制访问控制（Mandarory Access Control, MAC），基于角色的访问控制（Roal Based Access  Control, RBAC）。其中 DAC、MAC 是属于传统的访问控制策略，而 RBAC 则是后来出现的种访问控制策略，被认为具有很大的优势，具有很好的发展前景。</p><p> (1) DAC。自主访问控制是目前计算机系统中实现最多的访问控制机制，它使主体可以自主地进行配置以决定其他的主体可以采取什么样的方式来访问其所拥有的一些资源，即个拥有一定权限范围的主体可以直接或者间接地把权限授予其他的主体</p><p>常见的操作系统如 Windows、UNⅨ等都是采用自主访问控制策略来实施访问控制的其常见的方式是由某个用户（一般为某个文件或资源的拥有者或超级管理员）采用某种方式指定不同类型、不同分组的其他用户对其名下的资源的访问许可和访问方式</p><p>自主访问控制策略中，由用户自己决定其他用户对系统中某些资源的访问权限，这样虽然方便，但是却很难保证这种类型的授权对于整个系统来说是安全的。首先，用户往往不知道或者难以确定其他的用户是否适合具有对某些资源的访问权限；其次，如果不是所有的用户都有很强的安全意识，可能随意授权，那么这对于系统安全就是一个潜在的威胁；再次，由用户自己决定访问权限的分配，不利于系统管理员实施统一的全局访问控制；另外，许多组织中往往希望对于信息系统采取的授权与控制结构能够与该组织的行政结构一致。总之自主访问控制策略容易使系统失控，容易给非法入侵者留下可乘之机。所以，自主访问控制策略的安全性不是很高。</p><p>随着网络规模的扩大，用户对访问控制服务的质量也提出了更高的要求，采用自主访问控制策略已经很难满足一个安全性要求比较高的系统的需要。</p><p> (2) MAC。强制访问控制是系统统一采用某种访问权限的授予和撤销的策略，而且强制所有主体都必须服从这种访问权限的分配。</p><p>MAC 一般用在安全级别层次比较多的军事、安全等特殊应用领域中。它预先为系统中接受的所有主体、客体根据可以信任的程度、所处的岗位和承担的任务、信息的敏感程度时间发展的阶段等划分成若干级别，例如，信息可以分为绝密、机密、秘密和无密级等不同的级别。然后再根据主体和客体的级别标记来决定访问模式，任何用户对任何客体的访问请求都由这种安全级别的划分及相应的权限配置来控制</p><p>强制访问控制由于过于强调系统的安全性能，虽然能够很好地控制系统的安全，但是它管理起来比较麻烦，工作量很大，也不够灵活。</p><p>(3) RBAC。DAC 和 MAC 访问控制策略都各有其特点，但是也各有它们的不足。而基于角色的访问控制则可以在克服以上两者的缺点的同时，提供一个良好的安全的系统环境，因而是面向企业的系统中一种十分有效的访问控制策略。</p><p>DAC 系统中，有一种常见的情况，就是在一个组织中，最终用户能够使用某些资源但是它并不是该资源的拥有者，资源的拥有者是这个组织或组织中的所有用户。这时，就应该基于用户的职务来进行访问权限的设置和分配，而不应该基于资源的拥有者来进行。</p><p>例如，在图书馆中，应该根据某一个用户是流通人员、文献编目人员，还是分馆的管理员等不同的角色来分配和设置权限。如果是文献编目人员，那么他对系统中流通的图书这种资源就只能有看的权限，而对未进行典藏的图书等资源就有比较高的访问权限；如果是分馆的管理员，那么他相应地就具有对该分馆的读者、文献等资源有较高的访问权限，而对其他用户则没有。也就是说，用户具有什么样的访问权限，不直接取决于用户自己，而是取决于他所属的角色，有什么样的角色就有什么样的权限。</p><p>角色的种类和访问权限由系统管理员来定义，每一个成员属于哪种类型的角色也由系统管理员来规定，即只有系统管理员才有权定义和分配角色，而且对于用户来说只能服从系统中的这一系列规定，而不能有自主的配置，因此这是一种非自主型访问控制策略。</p><p>2.访问许可的授权对访问许可的授权有三种类型</p><p> (1) 等级型。把对客体的存取控制权限的修改能力划分成不同的等级，拥有高级别修改能力的主体可以把这种权限分配给比其级别低的主体。依此类推，从而将访问许可的授权关系组成一个树型结构。</p><p>例如，超级管理员可以作为这个等级树的根，具有修改所有客体的存取控制表的能力且可以向任意一个主体分配这种修改权。系统管理员把用户根据部门划分成多个子集，并对部门领导授予相应存取控制权限的修改权和对修改权的分配权。部门领导又可以把自己所拥有的权力按照同样的方法向下授权。</p><p>这种方式的优点是树型结构与实际组织机构类似，并且可以由领导根据日常实际工作需要进行授权来对各级用户进行控制与管理。但这种方式也有一个缺点，就是对同一个客体来说，可能存在多个主体有能力修改其存取控制权限</p><p> (2) 拥有型。这种类型对每一个客体都有一个拥有者（一般情况下就是该客体的创建者），拥有者具有对所拥有的客体的全部的控制权，并且可以任意修改其拥有的客体的访问控制表，并可对其他主体授予或销对其客体的任何一种访问权限。但是拥有者无权将其对客体的访问控制权的分配权予其他主体</p><p>在 UNX 系统中就是用这种方式来进行授权控制的</p><p> (3) 自由型。自由型的特点是一个客体的拥有者可以对任何主体授予对他所拥有的客体的访问权限，同时还可以把这种分配权授予其他主体而不受任何限制。这样，获得了这种授权的主体就可以把这种分配权授予更多的主体而不受该客体拥有者的限制。这样，一旦访问控制的分配权被授予出去，就很难控制对客体的访问了。显然，这样做安全性比较差，般的系统中很少采用这种方式</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-安全性和保密性设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全性和保密性设计（一）加密和解密</title>
      <link href="/2021/10/20/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/"/>
      <url>/2021/10/20/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89%E5%8A%A0%E5%AF%86%E5%92%8C%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>信息安全，具体地说就是保证信息的保密性、完整性、真实性、占有性。</p><p>保密性是指系统中的信息必须按照该信息拥有者的要求保证一定的秘密性，不会被未经许可的第三方非法获取。系统必须阻止一切对秘密信息的非授权访问或泄露。</p><p>完整性是指系统中的信息应当安全、准确、有效，要求数据不能被非法改动或删除。完整性是信息安全的最基本要求。为了实现完整性，可以借助本章讲述的数字签名、加密等措施，从而有力地保护数据的完整。</p><p>真实性是指对信息的发送者身份的确认或系统中有关主体的身份确认，这样可以保证信息的可信度。信息的真实性可以通过数字签名、公钥加密等方式来实现。</p><p>占有性是指要保护信息赖以存储的节点、介质、载体等不被盗用或窃取。保护信息占有性的方法有使用版权、专利、商业秘密性，提供物理的或逻辑的存取限制方法，维护和检有关窃取文件的记录等。</p><h1 id="加密和解密"><a href="#加密和解密" class="headerlink" title="加密和解密"></a>加密和解密</h1><p>密码学是研究加密方法、秘密通信的原理，以及解密方法、破译密码的方法的一门科学。</p><p>加密和解密的过程大致如下：首先，信息的发送方准备好要发送信息的原始形式，叫作明文。然后对明文经过一系列变换后形成信息的另一种不能直接体现明文含义的形式，叫作密文。由明文转换为密文的过程叫作加密。在加密时所采用的一组规则或方法称为加密算法接收者在收到密文后，再把密文还原成明文，以获得信息的具体内容，这个过程叫作解密。解密时也要运用一系列与加密算法相对应的方法或规则，这种方法或规则叫作解密算法。在加密、解密过程中，由通信双方掌握的参数信息控制具体的加密和解密过程，这个参数叫作密钥。密钥分为加密密钥和解密密钥，分别用于加密过程和解密过程。</p><p>在加密和解密的过程中，如果采用的加密密钥与解密密钥相同，或者从一个很容易计算出另一个，则这种方法叫作对称密钥密码体制，也叫作单钥密码体制。反之，如果加密和解密的密钥并不相同，或者从一个很难计算出另外一个，就叫作不对称密钥密码系统或者公开密钥密码体制，也叫作双钥密码体制。</p><h2 id="一、对称秘钥加密算法"><a href="#一、对称秘钥加密算法" class="headerlink" title="一、对称秘钥加密算法"></a>一、对称秘钥加密算法</h2><p>对称密钥密码体制中，加密和解密过程中所使用的是同一个密钥，或者即使加密密钥和解密密钥不同，但是很容易地由一个计算出另外一个。显然，在这种密码体制中，密钥成为整个秘密通信的核心，整个加密系统的安全性完全以密钥的保密为基础。如果密钥暴露，则整个密码体制就完全失去了保密的效果。所以说，密钥的保密是对称密钥加密体制安全保密的关键，必须妥善保存并经由可靠的渠道传递。</p><p>对称密钥加密算法有多种，例如，DES (Data Encryption Standard，数据加密标准）、IDEA  (International Data Encryption Algorithm，国际数据加密算法）、Skipjack、3DES、GDES、New DES、Lucifer、FEAL N、LOKI91、RC4、RC5 等。</p><h2 id="二、不对称秘钥加密算法"><a href="#二、不对称秘钥加密算法" class="headerlink" title="二、不对称秘钥加密算法"></a>二、不对称秘钥加密算法</h2><p>对称密钥加密方法是加密、解密使用同样的密钥，由发送者和接收者同时保存，在加密和解密时使用相同的密钥。采用这种方法的主要问题是密钥的生成、导入、存储、管理、分发等过程比较复杂，特别是随着用户的增加，密钥的需求量成倍增加。而在较大规模的信息系统中，大量密钥的分配与管理是一个难以解决的问题。</p><p>与对称密钥加密方法不同，不对称密钥加密技术在对信息进行加密和解密时，需要分别采用两个不同的密钥，因此也称为双钥加密方法。它在运算中，先产生一对密钥，其中之是保密密钥，由用户自己保存，不能向外界泄漏，简称私钥；另一个为公开密钥，可对外公开，甚至可在公共目录中列示，简称公钥，因此也称公开密钥加密方法。</p><p>只有使用私钥才能解密用公钥加密的数据，同时使用私钥加密的数据只能用公钥解密。在通信过程中，如果发送者要向接收者发送保密信息，则需要先用接收者的公开密钥对信息进行加密，然后发送给该接收者，接收方用其私钥能够顺利解密。而其他人即使收到加密的密文也无法正确解读，从而达到保密通信的目的。</p><p>公开密钥加密方法中，要想达到良好的加密效果，算法上必须做到：在计算上产生密钥常容易；已知公钥的情况下对明文加密在计算上很容易实现；已知私钥的情况下对密文解密在计算上很容易实现；尽管用于加密和解密的两个密钥在数学上是相关的，但是在已知公钥的情况下，要想求得私钥在计算上不可行；已知公钥和密文的情况下，要想求得明文在计算上不可行。只有做到以上几点，才能有效地防止攻击者对算法的破译。</p><p>不对称密钥加密算法有多种，例如，RSA、背包密码、Mceliece、Diffe Hellman、Rabin、 Ong Fiat Shamir、零知识证明的算法、椭圆曲线、Elgamal 等。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-安全性和保密性设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全性和保密性设计（三）数字证书与秘钥管理</title>
      <link href="/2021/10/20/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%89%EF%BC%89%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E4%B8%8E%E7%A7%98%E9%92%A5%E7%AE%A1%E7%90%86/"/>
      <url>/2021/10/20/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%89%EF%BC%89%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E4%B8%8E%E7%A7%98%E9%92%A5%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>过去，人们总是依赖于对于加密算法和密钥的保密来增加保密的强度和效果。随着现代密码学的发展，大部分的加密算法都已经公开了。一些典型的算法（例如，DES、IDEA、RSA 等）更是成了国际标准，被广泛接纳。人们可以从多种途径来获取算法的细节，也已经有很多采用这些算法的软件、硬件设备可以利用</p><p>因此，在现代密码系统中，算法本身的保密已经不重要了，对于数据的保密在很大程度上，甚至完全依赖于对密钥的保密。只要密钥能够保密，即使加密算法公开，甚至加密设备丢失，也不会对加密系统的坚固性和正常使用产生多大影响。相反，如果密钥丢失，则非法用户可以窃取机密数据，而合法用户却面对密文如读天书，无法提取有效的信息。与其如此还不如不加密呢！因此，在密码系统中，如何高效地分配密钥、安全地管理密钥对于保证数据安全至关重要。</p><h1 id="一、秘钥分配中心（Key-Distribution-Center，密匙分配中心）"><a href="#一、秘钥分配中心（Key-Distribution-Center，密匙分配中心）" class="headerlink" title="一、秘钥分配中心（Key Distribution Center，密匙分配中心）"></a>一、秘钥分配中心（Key Distribution Center，密匙分配中心）</h1><p>在 KDC 方案中，每一个用户都只保存自己的私钥 SK 和 KDC 的公钥 PKDC，而在通信时再经由 KDC 获得其他用户的公钥 PK 或者仅仅在某一次通信中可以使用的对称密钥加密算法的临时密钥 K。</p><h1 id="二、数字证书和公开密钥基础设施"><a href="#二、数字证书和公开密钥基础设施" class="headerlink" title="二、数字证书和公开密钥基础设施"></a>二、数字证书和公开密钥基础设施</h1><p>公钥加密算法的密钥分配和对称密钥加密算法中密钥的分配要求有着很大的区别。在对称密钥加密体制中，要求将密钥从一方传送到另一方，并且保证只有通信的双方知道密钥，而不让其他任何一方知道密钥。</p><p>而在公钥加密体制中，则要求通信各方的私钥只有通信的一方知道，而其他任何一方都不能知道，同时每一方的公钥需要公开，其他任何一方都可以查看和提取。</p><p>在公钥加密体制中，私钥的分配相对容易，但是，公钥的发布和获取就需要采取合适的方法来进行，否则很容易留下安全漏洞种简单的发布公钥的方法是公开宣布。通信系统中的每一方都独自保管好自己的私钥，而把自己的公钥公开地公布给其他所有各方，以使其他人能够得到他的公钥，从而可以与他进行加密通信。这实现起来非常简单，似乎也没有什么问题。但是，却有一个致命的漏洞，就是任何一个非法入侵者也可以冒充是这个通信系统中的一方，向这个通信系统中公布一个冒充的公钥。此后系统中与该用户的通信实际上就是与该非法冒充者进行通信。</p><p>数字签名和公钥加密都是基于不对称加密技术，因此也存在这样的问题：如何保证公开密钥的持有者是真实的；大规模信息系统环境下公开密钥如何产生、分发和管理。</p><p>要解决上述问题，就要用到数字证书和 PK (Public Key Infrastructure，公开密钥基础设施）</p><p>1、数字证书</p><p>数字证书提供了一个在公钥和拥有相应私钥的实体之间建立关系的机制。目前最常用的数字证书格式是由国际标准 ITU-TX.509v3 版本定义的。</p><p>数字证书中采用公钥体制，即利用一对互相匹配的密钥进行加密、解密。每个用户自己保存私钥，用它进行解密和签名；同时设定一个公钥，并由本人公开，为一组用户所共享，用于加密和验证签名。</p><p>数字证书是用户在系统中作为确认身份的证据。在通信的各个环节中，参与通信的各方通过验证对方数字证书，从而确认对方身份的真实性和有效性，从而解决相互间的信任问题。</p><p>数字证书的内容一般包括：唯一标识证书所有者的名称、唯一标识证书签发者的名称、证书所有者的公开密钥、证书签发者的数字签名、证书的有效期及证书的序列号等。</p><p>2.公开密钥基础设施</p><p>PKI 在信息系统中的作用就相当于作为公共设施在社会生活中的作用，其目标是向广大的信息系统用户和应用程序提供公开密钥的管理服务。PKI 是指由数字证书、证书颁发机构（Certificate Authority, CA），以及对电子交易、通信等所涉及的各方的合法性进行检查和验证的其他注册机构组成的一套系统。为了使用户在不可靠的网络环境中获得真实可靠的公开密钥，PK 引入公认可信的第三方；同时 PK 中采用数字证书机制来避免在线询集中存放的公开密钥产生的性能瓶颈。可信的第三方是 PKI 的核心部件，系统中任意两个实体之间都是通过公认可信的第三方建立安全联系的。数字证书中第三方的数字签名，使用户可以离线地确认一个公开密钥的真实性。</p><p>除了数字证书的有效期，证书撤销列表（Certificate Revocation List, CRL）是另一种数字证书有效期控制机制。当数字证书中认可的事实发生变化时，数字证书发布者必须使用某种</p><p>机制来销以前发出、但现在失效的证书。证书发布者定期发布 CRL，列出所有曾发布但当前已被销的证书号，证书的使用者依据 CRL 即可验证某证书是否已被撤销。</p><p>(1) PKI 的结构模型。PK 中有三类实体：管理实体、端实体和证书库。管理实体是 PKI 的核心，是 PKI 服务的提供者；端实体是 PKI 的用户，是 PK 服务的使用者；证书库是一个分布式数据库，用于证书和 CRL 的存放和检索。</p><p>CA 和注册机构（Registeauthority, RA）是两种管理实体。CA 是 PK 框架中唯一能够发布和撤销证书的实体，维护证书的生命周期；RA 负责处理用户请求，在验证了请求的有效性后，代替用户向 CA 提交。RA 可以单独实现，也可以合并在 CA 中实现。作为管理实体，CA 和 RA 以证书方式向端实体提供公开密钥的分发服务。</p><p>持有者和验证者是两种端实体。持有者是证书的拥有者，是证书所声明的事实上的主体持有者向管理实体申请并获得证书，也可以在需要时请求撇销或更新证书。持有者使用证书声明自己的身份，从而获得相应的权力。验证者确认持有者所提供的证书的有效性和对方是否为该证书的真正拥有者，只有在成功鉴别之后オ可与对方进行更进一步的交互。</p><p>证书库可以用 Web、FTP 或目录等来实现。由于证书库中存取的对象是证书和 CRL，其完整性由数字签名保证，因此对证书库的操作可在无特殊安全保护的通道上传输。</p><p>不同的实体间通过 PKI 操作完成证书的请求、确认、发布、撇销、更新和获取等过程。PK 操作分成存取操作和管理操作两类。其中，存取操作包括管理实体或端实体，把证书和 CRL 存放到证书库、从证书库中读取证书和 CRL；管理操作则是管理实体与端实体之间或管理实体与管理实体之间的交互，是为了完成证书的各项管理任务和建立证书链。</p><p>(2) PKI 层次模型。PKI 框架可以分为三个层次。最低层是传输层，向上提供 PKI 报文的可靠传输，它可以是传输层协议或应用层协议。中间层是密码学服务层，向上提供加密、解密、数字签名、消息摘要等基本密码学服务，可由 RSA、MD5 等方法实现。最高层是证书服务层，使用前面两层提供的加密和传输服务，向用户提供证书的请求、签发、发布、撤销和更新等服务。</p><p>PKI 的三类实体对这三层服务的使用各不相同。证书库不需要特殊的安全交互措施，所以仅使用传输层服务来分发证书和 CRL；管理实体和端实体使用证书服务层构造 PK 证书，使用密码学服务层来鉴别和保护交互信息，使用传输层服务传送信息。</p><p>(3)X.509数字证书。ISO/TU、ANSl、IETF等组织制定的X.509 标准，对数字证书的格式进行了专门定义，该标准是为了保证使用数字证书的系统间的互操作性而制定的。理论上为一种应用创建的 X.509 证书可以用于其他任何符合 X.509 标准的应用。但实际上，不同的公司对 X.509 证书进行了不同的扩展，并不是所有的证书都彼此兼容。</p><p>X.509 证书具有如下一些突出的特点：</p><p>①支持多种算法。X.509 证书独立于算法，CA 可以根据需要选择证书的签名和摘要算法，以及端实体所拥有密钥对的类型。摘要算法有 MD2、MD5 和 SHA-1, 证书签名算法有 RSA 和 DSA，密钥对类型有 RSA 密钥、DSA 签名密钥、D-H 密钥交换密钥、KEA 密钥和  ECDSA 密钥。</p><p>支持多种命名机制。X.509 证书除了使用 X.500 名字机制标识持证者和验证者，还支持 E-mail 地址、IP 地址、DNS 名和 UR。</p><p>③可以限制证书（公开密钥）的用途。CA 能够规定证书的使用范围，如签名、不可否认、密钥加密、数据加密、密钥协商、证书签发和 CRL 签发等。</p><p>④定义证书遵循的策略。每个 CA 都定义了一定的安全策略，规范证书的操作过程。这些策略包括：CA 的命名空间、身份验证、撇销机制、法律责任和收费等。</p><p>⑤控制信任关系的传递。建立 CA 体系，跨域认证，使得每个 CA 除负责本域的证书管理任务外，还要维护与其他 CA 间的信任关系。X.509 证书定义若干字段用于控制信任关系的传递，CA 能够将自己管理域的安全策略体现在信任关系中</p><p>可见，X.509 证书适用于大规模信息系统环境，它的灵活性和扩展性能够满足各种应用系统不同类型的安全要求。</p><p>X.509 有不同的版本，例如，X.509v3 是比较新的版本，它是在原有版本 X.509 的基础上进行功能的扩充。每一版本都包含下列数据项：</p><p>①版本号。用来区分 X.509 的不同版本号。</p><p>序列号。由 CA 给每一个证书分配唯一的数字型编号，由同一 CA 发放的每个证书的序列号是唯一的。</p><p>3③签名算法识别符。用来指定 CA 签发证书时所使用的公开密钥算法和 HASH 算法，须向国际标准组织注册。</p><p>④发行者名称。建立和签署证书的 CA 名称。</p><p>⑤有效期。证书有效的时间包括两个日期：证书开始生效的日期、证书失效的日期和时间。在所指定的这两个时间之间有效。</p><p>⑥主体名称。证书持有人的姓名、服务处所等信息。</p><p>⑦主体的公开密钥信息。包括主体的公开密钥、使用这一公开密钥的算法的标识符及相应的参数。</p><p>⑧ 发行者唯一识别符。这一数据项是可选的，当 CA 名称重新用于其他实体时，则用这一识别符来唯一标识发行者。</p><p>⑨主体唯一标识符。这一数据项也是可选的，当主体的名称重新用于其他实体时，则用这一识别符来唯一识别主体。</p><p>⑩扩充域。其中包括一个或多个扩充的数据项。</p><p>⑪签名。CA 用自己的私钥对上述各数据项的散列值进行数字签名的结果。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-安全性和保密性设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全性和保密性设计（二）数字签名与数字水印</title>
      <link href="/2021/10/20/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E4%B8%8E%E6%95%B0%E5%AD%97%E6%B0%B4%E5%8D%B0/"/>
      <url>/2021/10/20/%E8%BD%AF%E8%80%83/16%E3%80%81%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E4%B8%8E%E6%95%B0%E5%AD%97%E6%B0%B4%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<p>散列函数是一种公开的数学函数。散列函数运算的输入信息也可叫作报文。散列函数运算后所得到的结果叫作散列码或者叫作消息摘要。散列函数具有如下一些特点：</p><p> (1) 不同内容的报文具有不同的散列码，而一旦原始报文有任何改变，哪怕改变一位信息，则通过散列函数计算后得到的散列码也将完全不同。这样，这个散列码就好比是这个报文所特有的“指纹”。</p><p> (2) 散列函数是单向的，即求解某一个报文的散列码非常容易，但是根据散列码来倒推原始报文是非常困难的</p><p> (3) 对于任何一个报文，无法预知它的散列码。</p><p> (4) 散列码具有固定的长度，不管原始报文的长度如何，通过散列函数运算后的散列码都具有一样的长度。例如，MD5 (Message Digest Algorithm5, 消息摘要算法第 5 个版本）散列算法的散列码长度为 128 位，并且不管是对一部百科全书，还是对某个人的工资进行 MD5 散列运算，得到的散列码长度都是 128 位。</p><p>由于散列函数具有这些特征，因此散列函数可以用来检测报文的可靠性。接收者对收到的报文用与发送者相同的散列函数进行运算，如果得到与发送者相同的散列码，则可以认为报文没有被篡改，否则，报文就是不可信的。</p><p>常见的散列函数有 MD5、SHA、HMAC 等。MD5 是一种非常著名的散列算法，已经成为国际标准，具有很好的安全性能。MD5 算法在对输入的报文进行计算时，是以 512 位为单位进行处理的，结果生成一个 128 位长的消息摘要；SHA、HMAC 等算法都是对任意长度的报文以 512 位为单位进行处理，最后得出一个 160 位的消息摘要。</p><h1 id="一、数字签名"><a href="#一、数字签名" class="headerlink" title="一、数字签名"></a>一、数字签名</h1><p>对于计算机系统中传送、存储的重要文件、数据、信息等，一般需要有某种方式来确认其真实性，即接收者能够确认自己得到的信息确实是由该信息所声称的发送者发出的，而不是由非法入侵者伪造、冒充发出的，并且还要能够保证信息在传送、存储中没有被恶意改，这样这份信息才能真实地反映发送方的意图。另外，对于发送方来说，如果发出一份信息还必须有一定的措施阻止其否认自己发出信息的行为，即不可否认性。</p><p>只有做到以上几点，一个信息传送、存储系统才能够安全、可靠，其上所传送、存储的信息才是真实的、值得相信的。</p><p>数字签名主要由两个算法组成：签名算法和验证算法。通过使用签名算法签名一个消息，所得到的签名能够通过一个验证算法来验证签名的真实性和有效性。</p><p>所以数字签名技术的大致过程就是：信息的发送方对信息利用自己的私钥进行签名，接着发送方把这个签名和信息一起发送给接收方。接收方收到信息后利用发送方的公钥来对其中的数字签名进行验证，确认其合法性。</p><p>目前已经有大量的数字签名算法，例如，RSA 数字签名算法、El Gamal、Fiat-shamir、 Guillon- Oucsquerrter、DS (Digital Signature Standard，数字签名标准）、DSA (Digital Signature Algorithm，数字签名算法）、椭圆曲线等。</p><p>1．RSA 结合 MD5 数字签名<br>RSA 结合 MD5 数字签名的主要过程是：信息的发送方通过对信息进行散列运算生成个消息摘要，接着发送方用自己的私钥对这个消息摘要进行加密，就形成发送方的数字签名。然后，把这个数字签名作为信息的附件和信息一起发送给信息的接收方。接收方收到信息后首先对收到的信息进行与发送者相同的散列运算得到一个消息摘要，接着再用发送方的公钥来对信息中附加的数字签名进行解密得到发送方计算出的散列码。如果两个散列码相同，那么接收方就能确认该信息和数字签名是由发送方发出的。通过数字签名能够实现对原始信息完整性的鉴别和发送方发送信息的不可抵赖性。</p><p>RSA 用于数字签名的一个重要的特点是能够证实信息发送方的身份及电子文件的可靠性和完整性，它对于发送方和被发送的信息都是独一无二的，具有可验证性和不可否认的权威性特点；另一个重要的特点是它通过在计算机之间交换数字证书就可以确定当事者就是他们所宣称的人。</p><p>2．数字签名标准</p><p>DSs 是美国国家标准与技术学会的数字签名标准，自 1991 年提出以来又经过广泛的修改。DSS 为计算和验证数字签名指定了一个数字签名算法-DSA。DSA 是 E Gamal 数字签名算法的一个改进版本，它通过选择较小规格的参数减少数字签名的数据量，从而减少了存储空间和传输带宽。</p><p>DSs 中指定 SHA 作为其散列算法，它对原始信息进行运算后产生 160 位的消息摘要，然后 DS 把这一消息摘要与一个用作这个特殊签名的随机数作为输入送到数字签名算法中，经过运算生成数字签名</p><p>该数字签名函数还依赖于发送方的私钥 SK 和一个对许多通信方都公开的由重要的公钥集合组成的全局公钥。</p><p>接收方在收到消息摘要和签名后将其作为验证函数的输入。验证函数还依赖于全局公钥和与发送方的私钥相匹配的公钥 PK，这样只有发送方用其自己的私钥才能产生有效的签名</p><p>数字签名作为一项重要的鉴别技术，近年来越来越受到人们的重视，在政府、军事、金融、安全等领域得到广泛的运用。通过数字签名可以有效地保证数据的完整性，防止第三方伪造或发送方的抵赖。</p><p>2004 年 8 月 28 日，十届全国人大常委会第十一次会议表决通过了电子签名法。这部法律规定，可靠的电子签名与手写签名或者盖章具有同等的法律效力，并于 2005 年 4 月 1 日起施行。这部法律将对我国电子商务、电子政务等计算机信息系统的发展起到极其重要的促进作用。</p><h1 id="二、数字信封"><a href="#二、数字信封" class="headerlink" title="二、数字信封"></a>二、数字信封</h1><p>数字信封是公钥密码体制在实际中的一个应用，是用加密技术来保证只有规定的特定收信人才能阅读通信的内容。</p><p>在数字信封中，信息发送方采用对称密钥来加密信息内容，然后将此对称密钥用接收方的公开密钥来加密（这部分称数字信封），之后，将它和加密后的信息一起发送给接收方，接收方先用相应的私有密钥打开数字信封，得到对称密钥，然后使用对称密钥解开加密信息。这种技术的安全性相当高。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-安全性和保密性设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据科学（一）概率统计与统计推断</title>
      <link href="/2021/10/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B9%9D%E3%80%81%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%EF%BC%88%E4%B8%80%EF%BC%89%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1%E4%B8%8E%E7%BB%9F%E8%AE%A1%E6%8E%A8%E6%96%AD/"/>
      <url>/2021/10/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B9%9D%E3%80%81%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%EF%BC%88%E4%B8%80%EF%BC%89%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1%E4%B8%8E%E7%BB%9F%E8%AE%A1%E6%8E%A8%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="1、掌握概率、条件概率的概念，并会计算简单的概率、条件概率。"><a href="#1、掌握概率、条件概率的概念，并会计算简单的概率、条件概率。" class="headerlink" title="1、掌握概率、条件概率的概念，并会计算简单的概率、条件概率。"></a>1、掌握概率、条件概率的概念，并会计算简单的概率、条件概率。</h1><p>概率，亦称“或然率”，它是反映随机事件出现的可能性大小。随机事件是指在相同条件下，可能出现也可能不出现的事件。例如，从一批有正品和次品的商品中，随意抽取一件，“抽得的是正品”就是一个随机事件。设对某一随机现象进行了n次试验与观察，其中A事件出现了m次，即其出现的频率为m/n。经过大量反复试验，常有m/n越来越接近于某个确定的常数（此论断证明详见伯努利大数定律）。该常数即为事件A出现的概率，常用P (A) 表示。</p><p>条件概率是指事件A在事件B发生的条件下发生的概率。条件概率表示为：P（A|B），读作“A在B发生的条件下发生的概率”。若只有两个事件A，B，那么，P(A|B)=P(AB)/P(B)。</p><p>P(B|A)=P(A|B)P(B)/P(A)</p><h2 id="统计独立性"><a href="#统计独立性" class="headerlink" title="统计独立性"></a>统计独立性</h2><p>当且仅当两个随机事件A与B满足P(A∩B)=P(A)P(B)的时候，它们才是统计独立的，这样联合概率可以表示为各自概率的简单乘积。<br>同样，对于两个独立事件A与B有P(A|B)=P(A)以及P(B|A)=P(B)，换句话说，如果A与B是相互独立的，那么A在B这个前提下的条件概率就是A自身的概率；同样，B在A的前提下的条件概率就是B自身的概率。</p><h2 id="互斥性"><a href="#互斥性" class="headerlink" title="互斥性"></a>互斥性</h2><p>当且仅当A与B满足P(A∩B)=0且P(A)≠0，P(B)≠0的时候，A与B是互斥的。<br>因此，P(A|B)=0，P(B|A)=0。换句话说，如果B已经发生，由于A不能和B在同一场合下发生，那么A发生的概率为零；同样，如果A已经发生，那么B发生的概率为零。</p><h1 id="2、理解随机事件的独立性和随机变量的独立性。"><a href="#2、理解随机事件的独立性和随机变量的独立性。" class="headerlink" title="2、理解随机事件的独立性和随机变量的独立性。"></a>2、理解随机事件的独立性和随机变量的独立性。</h1><p>事件的相互独立可定义试验的相互独立，试验的相互独立可推出一些事件的相互独立。试验的独立性和随机变量的独立性都是在事件独立性的基础上来定义的。随机变量取某个值或取某个连续区间时，就是表示某事件。</p><h1 id="3、掌握乘法公式、全概率公式、贝叶斯公式，并会简单应用。"><a href="#3、掌握乘法公式、全概率公式、贝叶斯公式，并会简单应用。" class="headerlink" title="3、掌握乘法公式、全概率公式、贝叶斯公式，并会简单应用。"></a>3、掌握乘法公式、全概率公式、贝叶斯公式，并会简单应用。</h1><p><img src="/images/bigdata/4-1.png"><br><img src="/images/bigdata/4-2.png"><br><img src="/images/bigdata/4-3.png"><br><img src="/images/bigdata/4-4.png"><br><img src="/images/bigdata/4-5.png"><br><img src="/images/bigdata/4-6.png"></p><h1 id="4、掌握随机变量分布函数的概念，掌握连续型随机变量的密度函数和离散型随机变量的分布列。"><a href="#4、掌握随机变量分布函数的概念，掌握连续型随机变量的密度函数和离散型随机变量的分布列。" class="headerlink" title="4、掌握随机变量分布函数的概念，掌握连续型随机变量的密度函数和离散型随机变量的分布列。"></a>4、掌握随机变量分布函数的概念，掌握连续型随机变量的密度函数和离散型随机变量的分布列。</h1><p>概率分布用以表达随机变量取值的概率规律，根据随机变量所属类型的不同，概率分布取不同的表现形式<br>离散型分布：二项分布、多项分布、伯努利分布（两点分布）、泊松分布<br>连续型分布：均匀分布、正态分布、指数分布、伽玛分布、偏态分布、贝塔分布</p><h1 id="5、掌握常见分布（两点分布、二项分布、泊松分布、均匀分布、正态分布、指数分布）及其简单性质。"><a href="#5、掌握常见分布（两点分布、二项分布、泊松分布、均匀分布、正态分布、指数分布）及其简单性质。" class="headerlink" title="5、掌握常见分布（两点分布、二项分布、泊松分布、均匀分布、正态分布、指数分布）及其简单性质。"></a>5、掌握常见分布（两点分布、二项分布、泊松分布、均匀分布、正态分布、指数分布）及其简单性质。</h1><p>二项分布的每一次尝试都是独立的，前一次投掷的结果不能决定或影响当前投掷的结果，只有两个可能结果并且重复n次的实验叫做二项式。</p><p>多项分布是二项分布的推广扩展，在n次独立实验中每次只输出k种结果中的一个，且每种结果都有一个确定概率，多项分布给出在多种输出状态的情况下，关于成功次数的各种组合的概率。</p><p>伯努利分布（两点分布）只有两种可能的结果，1-成功和0-失败，具有伯努利分布特征的随机变量X可以取值为1的概率为p，取值为0的概率1-p，其中成功和失败的概率不一定相等。</p><p>当二项分布的n很大而p很小时，泊松分布可作为二项分布的近似，其中λ为np。通常当n≧20,p≦0.05时，就可以用泊松公式近似得计算。</p><p>均匀分布也叫矩形分布，它是对称概率分布，在相同长度间隔的分布概率是等可能的。 均匀分布由两个参数a和b定义，它们是数轴上的最小值和最大值，通常缩写为U（a，b）。</p><p>正态分布（Normal distribution），也称“常态分布”，又名高斯分布（Gaussian distribution）。正态曲线呈钟型，两头低，中间高，左右对称因其曲线呈钟形，因此人们又经常称之为钟形曲线。</p><p>指数分布（也称为负指数分布）是描述泊松过程中的事件之间的时间的概率分布，即事件以恒定平均速率连续且独立地发生的过程。 这是伽马分布的一个特殊情况。 它是几何分布的连续模拟，它具有无记忆的关键性质。 除了用于分析泊松过程外，还可以在其他各种环境中找到。</p><h1 id="6、理解数学期望、方差（标准差）、相关系数的概念，并会简单计算。"><a href="#6、理解数学期望、方差（标准差）、相关系数的概念，并会简单计算。" class="headerlink" title="6、理解数学期望、方差（标准差）、相关系数的概念，并会简单计算。"></a>6、理解数学期望、方差（标准差）、相关系数的概念，并会简单计算。</h1><h2 id="数学期望"><a href="#数学期望" class="headerlink" title="数学期望"></a>数学期望</h2><p>在概率论和统计学中，数学期望(mean)（或均值，亦简称期望）是试验中每次可能结果的概率乘以其结果的总和，是最基本的数学特征之一。它反映随机变量平均取值的大小。<br><img src="/images/bigdata/4-7.png"></p><h2 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h2><p>概率论中方差用来度量随机变量和其数学期望（即均值）之间的偏离程度。统计中的方差（样本方差）是每个样本值与全体样本值的平均数之差的平方值的平均数。在许多实际问题中，研究方差即偏离程度有着重要意义。方差是衡量源数据和期望值相差的度量值。<br><img src="/images/bigdata/4-8.png"></p><h2 id="标准差"><a href="#标准差" class="headerlink" title="标准差"></a>标准差</h2><p>标准差是方差算术平方根。</p><h1 id="7、了解多元随机变量的概念，掌握多元正态分布。"><a href="#7、了解多元随机变量的概念，掌握多元正态分布。" class="headerlink" title="7、了解多元随机变量的概念，掌握多元正态分布。"></a>7、了解多元随机变量的概念，掌握多元正态分布。</h1><p>多元随即变量也是变量，这个变量有两个未知的数组成<br>比如说，向直角坐标平面内投掷小球，小球的落点是一个随机变量，这个随机变量是用坐标表示（x，y），则就是二元随机变量<br>又如某一天的天气情况，由阴晴和风的情况组成，是一个随机变量，用（晴，三级）表示某天的天气晴，三级风，这也是一个二元随机变量，如果再加上温度的话，就是三元随机变量了。</p><p>多变量正态分布亦称为多变量高斯分布。它是单维正态分布向多维的推广。它同矩阵正态分布有紧密的联系。</p><h1 id="8、理解统计量的概念，理解样本均值、样本方差（标准差）的概念，并会简单计算。"><a href="#8、理解统计量的概念，理解样本均值、样本方差（标准差）的概念，并会简单计算。" class="headerlink" title="8、理解统计量的概念，理解样本均值、样本方差（标准差）的概念，并会简单计算。"></a>8、理解统计量的概念，理解样本均值、样本方差（标准差）的概念，并会简单计算。</h1><p>统计量是统计理论中用来对数据进行分析、检验的变量。宏观量是大量微观量的统计平均值，具有统计平均的意义，对于单个微观粒子，宏观量是没有意义的．相对于微观量的统计平均性质的宏观量也叫统计量。需要指出的是，描写宏观世界的物理量例如速度、动能等实际上也可以说是宏观量，但宏观量并不都具有统计平均的性质，因而宏观量并不都是统计量。</p><h1 id="9、了解点估计的概念，了解点估计的无偏性、相合性。"><a href="#9、了解点估计的概念，了解点估计的无偏性、相合性。" class="headerlink" title="9、了解点估计的概念，了解点估计的无偏性、相合性。"></a>9、了解点估计的概念，了解点估计的无偏性、相合性。</h1><h1 id="10、了解参数的矩估计、最大似然估计。"><a href="#10、了解参数的矩估计、最大似然估计。" class="headerlink" title="10、了解参数的矩估计、最大似然估计。"></a>10、了解参数的矩估计、最大似然估计。</h1><h1 id="11、了解线性回归的基本概念。"><a href="#11、了解线性回归的基本概念。" class="headerlink" title="11、了解线性回归的基本概念。"></a>11、了解线性回归的基本概念。</h1><p>线性回归是利用数理统计中回归分析，来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法，运用十分广泛。其表达形式为y = w’x+e，e为误差服从均值为0的正态分布。</p><p>回归分析中，只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。</p><h1 id="12、了解方差分析（ANOVA）的基本概念。"><a href="#12、了解方差分析（ANOVA）的基本概念。" class="headerlink" title="12、了解方差分析（ANOVA）的基本概念。"></a>12、了解方差分析（ANOVA）的基本概念。</h1><p>方差分析(Analysis of Variance，简称ANOVA)，又称“变异数分析”，是R.A.Fisher发明的，用于两个及两个以上样本均数差别的显著性检验。 由于各种因素的影响，研究所得的数据呈现波动状。造成波动的原因可分成两类，一是不可控的随机因素，另一是研究中施加的对结果形成影响的可控因素。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-计算机基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据科学（三）深度学习与强化学习</title>
      <link href="/2021/10/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B9%9D%E3%80%81%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%EF%BC%88%E4%B8%89%EF%BC%89%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/10/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B9%9D%E3%80%81%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%EF%BC%88%E4%B8%89%EF%BC%89%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="1、掌握全连接网络（MLP）的定义与算法原理、并能够应用。"><a href="#1、掌握全连接网络（MLP）的定义与算法原理、并能够应用。" class="headerlink" title="1、掌握全连接网络（MLP）的定义与算法原理、并能够应用。"></a>1、掌握全连接网络（MLP）的定义与算法原理、并能够应用。</h1><p>全连接网络，是指前一层的每个神经元会都与下一层的全部神经元连接。</p><h1 id="2、掌握卷积神经网络（CNN）基本概念，了解几种经典的卷积神经网络，-如-AlexNet、VGG、GoogLeNet、ResNet。"><a href="#2、掌握卷积神经网络（CNN）基本概念，了解几种经典的卷积神经网络，-如-AlexNet、VGG、GoogLeNet、ResNet。" class="headerlink" title="2、掌握卷积神经网络（CNN）基本概念，了解几种经典的卷积神经网络， 如 AlexNet、VGG、GoogLeNet、ResNet。"></a>2、掌握卷积神经网络（CNN）基本概念，了解几种经典的卷积神经网络， 如 AlexNet、VGG、GoogLeNet、ResNet。</h1><p>卷积神经网络（Convolutional Neural Networks, CNN）是一类包含卷积计算且具有深度结构的前馈神经网络（Feedforward Neural Networks），是深度学习（deep learning）的代表算法之一。卷积神经网络具有表征学习（representation learning）能力，能够按其阶层结构对输入信息进行平移不变分类（shift-invariant classification），因此也被称为“平移不变人工神经网络（Shift-Invariant Artificial Neural Networks, SIANN）”。</p><p>AlexNet是2012年ILSVRC图像分类和物体识别算法的优胜者，也是LetNet-5之后受到人工智能领域关注的现代卷积神经网络算法。AlexNet的隐含层由5个卷积层、3个池化层和3个全连接层组成。</p><p>VGGNet是牛津大学视觉几何团队（Visual Geometry Group, VGG）开发的一组卷积神经网络算法，包括VGG-11、VGG-11-LRN、VGG-13、VGG-16和VGG-19。其中VGG-16是2014年ILSVRC物体识别算法的优胜者，其规模是AlexNet的2倍以上并拥有规律的结构，这里以VGG-16为例介绍其构筑。VGG-16的隐含层由13个卷积层、3个全连接层和5个池化层组成。</p><p>GoogLeNet是2014年ILSVRC图像分类算法的优胜者，是首个以Inception模块进行堆叠形成的大规模卷积神经网络。GoogLeNet共有四个版本：Inception v1、Inception v2、Inception v3、Inception v4。</p><p>ResNet来自微软的人工智能团队Microsoft Research，是2015年ILSVRC图像分类和物体识别算法的优胜者，其表现超过了GoogLeNet的第三代版本Inception v3。ResNet是使用残差块建立的大规模卷积神经网络，其规模是AlexNet的20倍、VGG-16的8倍，在ResNet的原始版本中，其残差块由2个卷积层、1个跳跃连接、BN和激励函数组成，ResNet的隐含层共包含16个残差块。</p><h1 id="3、掌握循环神经网络（RNN）原理与基本概念，了解几种常见的模型，如-长短期记忆网络-LSTM、GRU。"><a href="#3、掌握循环神经网络（RNN）原理与基本概念，了解几种常见的模型，如-长短期记忆网络-LSTM、GRU。" class="headerlink" title="3、掌握循环神经网络（RNN）原理与基本概念，了解几种常见的模型，如 长短期记忆网络 LSTM、GRU。"></a>3、掌握循环神经网络（RNN）原理与基本概念，了解几种常见的模型，如 长短期记忆网络 LSTM、GRU。</h1><p>循环神经网络（Recurrent Neural Network, RNN）是一类以序列（sequence）数据为输入，在序列的演进方向进行递归（recursion）且所有节点（循环单元）按链式连接的递归神经网络（recursive neural network）。</p><p>对循环神经网络的研究始于二十世纪80-90年代，并在二十一世纪初发展为深度学习（deep learning）算法之一，其中双向循环神经网络（Bidirectional RNN, Bi-RNN）和长短期记忆网络（Long Short-Term Memory networks，LSTM）是常见的循环神经网络。</p><p>循环神经网络具有记忆性、参数共享并且图灵完备（Turing completeness），因此在对序列的非线性特征进行学习时具有一定优势。循环神经网络在自然语言处理（Natural Language Processing, NLP），例如语音识别、语言建模、机器翻译等领域有应用，也被用于各类时间序列预报。引入了卷积神经网络（Convolutional Neural Network,CNN）构筑的循环神经网络可以处理包含序列输入的计算机视觉问题。</p><p>LSTM是最早被提出的RNN门控算法，其对应的循环单元，LSTM单元包含3个门控：输入门、遗忘门和输出门。相对于RNN对系统状态建立的递归计算，3个门控对LSTM单元的内部状态建立了自循环（self-loop）。具体地，输入门决定当前时间步的输入和前一个时间步的系统状态对内部状态的更新；遗忘门决定前一个时间步内部状态对当前时间步内部状态的更新；输出门决定内部状态对系统状态的更新。</p><p>由于LSTM中3个门控对提升其学习能力的贡献不同，因此略去贡献小的门控和其对应的权重，可以简化神经网络结构并提升其学习效率。GRU即是根据以上观念提出的算法，其对应的循环单元仅包含2个门控：更新门和复位门，其中复位门的功能与LSTM单元的输入门相近，更新门则同时实现了遗忘门和输出门的功能。</p><h1 id="4、掌握生成对抗网络（GAN、WGAN）的基本定义与原理，能够完成基本-应用"><a href="#4、掌握生成对抗网络（GAN、WGAN）的基本定义与原理，能够完成基本-应用" class="headerlink" title="4、掌握生成对抗网络（GAN、WGAN）的基本定义与原理，能够完成基本 应用"></a>4、掌握生成对抗网络（GAN、WGAN）的基本定义与原理，能够完成基本 应用</h1><p>生成式对抗网络（GAN, Generative Adversarial Networks ）是一种深度学习模型，是近年来复杂分布上无监督学习最具前景的方法之一。模型通过框架中（至少）两个模块：生成模型（Generative Model）和判别模型（Discriminative Model）的互相博弈学习产生相当好的输出。原始 GAN 理论中，并不要求 G 和 D 都是神经网络，只需要是能拟合相应生成和判别的函数即可。但实用中一般均使用深度神经网络作为 G 和 D 。一个优秀的GAN应用需要有良好的训练方法，否则可能由于神经网络模型的自由性而导致输出不理想。</p><p>WGAN：<br>1、彻底解决GAN训练不稳定的问题，不再需要小心平衡生成器和判别器的训练程度<br>2、基本解决了collapse mode的问题，确保了生成样本的多样性<br>3、训练过程中终于有一个像交叉熵、准确率这样的数值来指示训练的进程，这个数值越小代表GAN训练得越好，代表生成器产生的图像质量越高<br>4、以上一切好处不需要精心设计的网络架构，最简单的多层全连接网络就可以做到</p><h1 id="5、掌握马尔可夫决策过程的定义，了解其算法应用范围，并能够实际应用"><a href="#5、掌握马尔可夫决策过程的定义，了解其算法应用范围，并能够实际应用" class="headerlink" title="5、掌握马尔可夫决策过程的定义，了解其算法应用范围，并能够实际应用"></a>5、掌握马尔可夫决策过程的定义，了解其算法应用范围，并能够实际应用</h1><p>马尔可夫决策过程（Markov Decision Process, MDP）是序贯决策（sequential decision）的数学模型，用于在系统状态具有马尔可夫性质的环境中模拟智能体可实现的随机性策略与回报。MDP的得名来自于俄国数学家安德雷·马尔可夫（Андрей Андреевич Марков），以纪念其为马尔可夫链所做的研究。</p><p>MDP基于一组交互对象，即智能体和环境进行构建，所具有的要素包括状态、动作、策略和奖励。在MDP的模拟中，智能体会感知当前的系统状态，按策略对环境实施动作，从而改变环境的状态并得到奖励，奖励随时间的积累被称为回报。</p><p>MDP的理论基础是马尔可夫链，因此也被视为考虑了动作的马尔可夫模型。在离散时间上建立的MDP被称为“离散时间马尔可夫决策过程（descrete-time MDP）”，反之则被称为“连续时间马尔可夫决策过程（continuous-time MDP）”。此外MDP存在一些变体，包括部分可观察马尔可夫决策过程、约束马尔可夫决策过程和模糊马尔可夫决策过程。</p><p>在应用方面，MDP被用于机器学习中强化学习（reinforcement learning）问题的建模。通过使用动态规划、随机采样等方法，MDP可以求解使回报最大化的智能体策略，并在自动控制、推荐系统等主题中得到应用。</p><h1 id="6、掌握经典强化学习算法（Q-learning、SARMA）的定义与原理。"><a href="#6、掌握经典强化学习算法（Q-learning、SARMA）的定义与原理。" class="headerlink" title="6、掌握经典强化学习算法（Q-learning、SARMA）的定义与原理。"></a>6、掌握经典强化学习算法（Q-learning、SARMA）的定义与原理。</h1><p>强化学习的概念，通俗的讲，强化学习就是通过agent，也就是动作的发起者，对环境造成一个影响，环境接受该动作后状态发生变化，同时产生一个强化信号(奖或惩)反馈给Agent，Agent根据强化信号和环境当前状态再选择下一个动作，选择的原则是使受到正强化(奖)的概率增大。选择的动作不仅影响立即强化值，而且影响环境下一时刻的状态及最终的强化值。在强化学习中，包含两种基本的元素：状态与动作，在某个状态下执行某种动作，这便是一种策略，学习器要做的就是通过不断地探索学习，从而获得一个好的策略。</p><p>Q-Learning属于强化学习的经典算法，用于解决马尔可夫决策问题。为无监督学习。</p><h1 id="7、掌握经典深度强化学习算法（DQN、DDPG、A3C、TRPO、PPO）的定义-与原理，了解其算法特性。"><a href="#7、掌握经典深度强化学习算法（DQN、DDPG、A3C、TRPO、PPO）的定义-与原理，了解其算法特性。" class="headerlink" title="7、掌握经典深度强化学习算法（DQN、DDPG、A3C、TRPO、PPO）的定义 与原理，了解其算法特性。"></a>7、掌握经典深度强化学习算法（DQN、DDPG、A3C、TRPO、PPO）的定义 与原理，了解其算法特性。</h1><p>DeepMind在2013年提出的DQN算法（2015年提出了DQN的改进版本）可以说是深度学习和强化学习的第一次成功结合。要想将深度学习融合进强化学习，是有一些很关键的问题需要解决的，其中的两个问题如下：<br>1、深度学习需要大量有标签的数据样本；而强化学习是智能体主动获取样本，样本量稀疏且有延迟。<br>2、深度学习要求每个样本相互之间是独立同分布的；而强化学习获取的相邻样本相互关联，并不是相互独立的。</p><p>DQN是一种基于值函数的方法，基于值函数的方法难以应对的是大的动作空间，特别是连续动作情况。因为网络难以有这么多输出，且难以在这么多输出之中搜索最大的Q值。而DDPG是基于上面所讲到的Actor-Critic方法，在动作输出方面采用一个网络来拟合策略函数，直接输出动作，可以应对连续动作的输出及大的动作空间。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-计算机基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据科学（二）统计学习与数据挖掘</title>
      <link href="/2021/10/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B9%9D%E3%80%81%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%EF%BC%88%E4%BA%8C%EF%BC%89%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
      <url>/2021/10/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B9%9D%E3%80%81%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%EF%BC%88%E4%BA%8C%EF%BC%89%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1、掌握感知机的定义和基本原理。"><a href="#1、掌握感知机的定义和基本原理。" class="headerlink" title="1、掌握感知机的定义和基本原理。"></a>1、掌握感知机的定义和基本原理。</h1><p>感知机是二分类的线性模型，其输入是实例的特征向量，输出的是事例的类别，分别是+1和-1，属于判别模型。</p><p>假设训练数据集是线性可分的，感知机学习的目标是求得一个能够将训练数据集正实例点和负实例点完全正确分开的分离超平面。如果是非线性可分的数据，则最后无法获得超平面。感知机由Rosenblatt于1957年提出的，是神经网络和支持向量机的基础。</p><p><img src="/images/bigdata/4-9.png"></p><h1 id="2、掌握-Logistic-回归算法原理与特点，能够使用-Logistic-回归进行数据的分类建模与参数解释。"><a href="#2、掌握-Logistic-回归算法原理与特点，能够使用-Logistic-回归进行数据的分类建模与参数解释。" class="headerlink" title="2、掌握 Logistic 回归算法原理与特点，能够使用 Logistic 回归进行数据的分类建模与参数解释。"></a>2、掌握 Logistic 回归算法原理与特点，能够使用 Logistic 回归进行数据的分类建模与参数解释。</h1><p>Logistic回归虽然说是回归，但确是为了解决分类问题，是二分类任务的首选方法，简单来说，输出结果不是0就是1。</p><p>逻辑回归（Logistic Regression）与线性回归（Linear Regression）都是一种广义线性模型（generalized linear model）。</p><p>逻辑回归假设因变量 y 服从二项分布，而线性回归假设因变量 y 服从高斯分布。</p><p>因此与线性回归有很多相同之处，去除Sigmoid映射函数的话，逻辑回归算法就是一个线性回归。</p><p>可以说，逻辑回归是以线性回归为理论支持的，但是逻辑回归通过Sigmoid函数引入了非线性因素，因此可以轻松处理0/1分类问题。</p><h1 id="3、掌握朴素贝叶斯算法的定义与基本原理。"><a href="#3、掌握朴素贝叶斯算法的定义与基本原理。" class="headerlink" title="3、掌握朴素贝叶斯算法的定义与基本原理。"></a>3、掌握朴素贝叶斯算法的定义与基本原理。</h1><p>贝叶斯方法是以贝叶斯原理为基础，使用概率统计的知识对样本数据集进行分类。由于其有着坚实的数学基础，贝叶斯分类算法的误判率是很低的。贝叶斯方法的特点是结合先验概率和后验概率，即避免了只使用先验概率的主观偏见，也避免了单独使用样本信息的过拟合现象。贝叶斯分类算法在数据集较大的情况下表现出较高的准确率，同时算法本身也比较简单。</p><p>朴素贝叶斯分类（NBC）是以贝叶斯定理为基础并且假设特征条件之间相互独立的方法，先通过已给定的训练集，以特征词之间独立作为前提假设，学习从输入到输出的联合概率分布，再基于学习到的模型，输入 求出使得后验概率最大的输出 。</p><p><img src="/images/bigdata/4-10.png"></p><h1 id="4、掌握-k-近邻算法算法定义与原理。"><a href="#4、掌握-k-近邻算法算法定义与原理。" class="headerlink" title="4、掌握 k 近邻算法算法定义与原理。"></a>4、掌握 k 近邻算法算法定义与原理。</h1><p>给定测试样本，基于某种距离度量找出训练集中与其最靠近的k个训练样本，然后基于这k个”邻居”的信息来进行预测。<br>通俗点说：就是计算一个点与样本空间所有点之间的距离，取出与该点最近的k个点，然后统计这k个点里面所属分类比例最大的（“回归”里面使用平均法），则点A属于该分类。</p><p>1、算距离： 给定测试对象，计算它与训练集中的每个对象的距离；<br>2、找邻居：圈定距离最近的k个训练对象，作为测试对象的近邻；<br>3、做分类：根据这k个近邻归属的主要类别，来对测试对象分类；</p><p>欧氏距离、曼哈顿距离</p><h1 id="5、掌握支持向量机（SVM）算法的思想与原理。"><a href="#5、掌握支持向量机（SVM）算法的思想与原理。" class="headerlink" title="5、掌握支持向量机（SVM）算法的思想与原理。"></a>5、掌握支持向量机（SVM）算法的思想与原理。</h1><p>支持向量机（Support Vector Machine, SVM）是一类按监督学习（supervised learning）方式对数据进行二元分类的广义线性分类器（generalized linear classifier），其决策边界是对学习样本求解的最大边距超平面（maximum-margin hyperplane）。</p><p>SVM使用铰链损失函数（hinge loss）计算经验风险（empirical risk）并在求解系统中加入了正则化项以优化结构风险（structural risk），是一个具有稀疏性和稳健性的分类器。SVM可以通过核方法（kernel method）进行非线性分类，是常见的核学习（kernel learning）方法之一。</p><p>SVM被提出于1964年，在二十世纪90年代后得到快速发展并衍生出一系列改进和扩展算法，在人像识别、文本分类等模式识别（pattern recognition）问题中有得到应用。</p><h1 id="6、掌握决策树的算法的定义与原理，了解决策树的剪枝理论。"><a href="#6、掌握决策树的算法的定义与原理，了解决策树的剪枝理论。" class="headerlink" title="6、掌握决策树的算法的定义与原理，了解决策树的剪枝理论。"></a>6、掌握决策树的算法的定义与原理，了解决策树的剪枝理论。</h1><p>决策树(Decision Tree）是在已知各种情况发生概率的基础上，通过构成决策树来求取净现值的期望值大于等于零的概率，评价项目风险，判断其可行性的决策分析方法，是直观运用概率分析的一种图解法。由于这种决策分支画成图形很像一棵树的枝干，故称决策树。在机器学习中，决策树是一个预测模型，他代表的是对象属性与对象值之间的一种映射关系。</p><p>决策树是一种树形结构，其中每个内部节点表示一个属性上的测试，每个分支代表一个测试输出，每个叶节点代表一种类别。</p><p>分类树（决策树）是一种十分常用的分类方法。它是一种监督学习，所谓监督学习就是给定一堆样本，每个样本都有一组属性和一个类别，这些类别是事先确定的，那么通过学习得到一个分类器，这个分类器能够对新出现的对象给出正确的分类。这样的机器学习就被称之为监督学习。</p><p>剪枝是决策树停止分支的方法之一，剪枝有分预先剪枝和后剪枝两种。预先剪枝是在树的生长过程中设定一个指标，当达到该指标时就停止生长，这样做容易产生“视界局限”，就是一旦停止分支，使得节点N成为叶节点，就断绝了其后继节点进行“好”的分支操作的任何可能性。不严格的说这些已停止的分支会误导学习算法，导致产生的树不纯度降差最大的地方过分靠近根节点。后剪枝中树首先要充分生长，直到叶节点都有最小的不纯度值为止，因而可以克服“视界局限”。然后对所有相邻的成对叶节点考虑是否消去它们，如果消去能引起令人满意的不纯度增长，那么执行消去，并令它们的公共父节点成为新的叶节点。这种“合并”叶节点的做法和节点分支的过程恰好相反，经过剪枝后叶节点常常会分布在很宽的层次上，树也变得非平衡。后剪枝技术的优点是克服了“视界局限”效应，而且无需保留部分样本用于交叉验证，所以可以充分利用全部训练集的信息。但后剪枝的计算量代价比预剪枝方法大得多，特别是在大样本集中，不过对于小样本的情况，后剪枝方法还是优于预剪枝方法的。</p><h1 id="7、了解常见集成方法如-boosting、bagging-等。"><a href="#7、了解常见集成方法如-boosting、bagging-等。" class="headerlink" title="7、了解常见集成方法如 boosting、bagging 等。"></a>7、了解常见集成方法如 boosting、bagging 等。</h1><h2 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging:"></a>Bagging:</h2><p>Bagging即套袋法，其算法过程如下：<br>1、从原始样本集中抽取训练集。每轮从原始样本集中使用Bootstraping的方法抽取n个训练样本（在训练集中，有些样本可能被多次抽取到，而有些样本可能一次都没有被抽中）。共进行k轮抽取，得到k个训练集。（k个训练集之间是相互独立的）<br>2、每次使用一个训练集得到一个模型，k个训练集共得到k个模型。（注：这里并没有具体的分类算法或回归方法，我们可以根据具体问题采用不同的分类或回归方法，如决策树、感知器等）<br>3、对分类问题：将上步得到的k个模型采用投票的方式得到分类结果；对回归问题，计算上述模型的均值作为最后的结果。（所有模型的重要性相同）</p><p>Boosting：<br>Boosting方式每次使用的是全部的样本，每轮训练改变样本的权重。下一轮训练的目标是找到一个函数f 来拟合上一轮的残差。当残差足够小或者达到设置的最大迭代次数则停止。Boosting会减小在上一轮训练正确的样本的权重，增大错误样本的权重。（对的残差小，错的残差大）<br>梯度提升的Boosting方式是使用代价函数对上一轮训练出的模型函数f的偏导来拟合残差。</p><h1 id="8、掌握聚类分析的相关概念。"><a href="#8、掌握聚类分析的相关概念。" class="headerlink" title="8、掌握聚类分析的相关概念。"></a>8、掌握聚类分析的相关概念。</h1><p>聚类分析指将物理或抽象对象的集合分组为由类似的对象组成的多个类的分析过程。它是一种重要的人类行为。</p><p>聚类分析的目标就是在相似的基础上收集数据来分类。聚类源于很多领域，包括数学，计算机科学，统计学，生物学和经济学。在不同的应用领域，很多聚类技术都得到了发展，这些技术方法被用作描述数据，衡量不同数据源间的相似性，以及把数据源分类到不同的簇中。</p><h1 id="9、掌握主成分分析的原理。"><a href="#9、掌握主成分分析的原理。" class="headerlink" title="9、掌握主成分分析的原理。"></a>9、掌握主成分分析的原理。</h1><p>主成分分析（Principal Component Analysis，PCA）， 是一种统计方法。通过正交变换将一组可能存在相关性的变量转换为一组线性不相关的变量，转换后的这组变量叫主成分。</p><p>在实际课题中，为了全面分析问题，往往提出很多与此有关的变量（或因素），因为每个变量都在不同程度上反映这个课题的某些信息。</p><p>主成分分析首先是由K.皮尔森（Karl Pearson）对非随机变量引入的，尔后H.霍特林将此方法推广到随机向量的情形。信息的大小通常用离差平方和或方差来衡量。</p><p>在用统计分析方法研究多变量的课题时，变量个数太多就会增加课题的复杂性。人们自然希望变量个数较少而得到的信息较多。在很多情形，变量之间是有一定的相关关系的，当两个变量之间有一定相关关系时，可以解释为这两个变量反映此课题的信息有一定的重叠。主成分分析是对于原先提出的所有变量，将重复的变量（关系紧密的变量）删去多余，建立尽可能少的新变量，使得这些新变量是两两不相关的，而且这些新变量在反映课题的信息方面尽可能保持原有的信息。</p><p>设法将原来变量重新组合成一组新的互相无关的几个综合变量，同时根据实际需要从中可以取出几个较少的综合变量尽可能多地反映原来变量的信息的统计方法叫做主成分分析或称主分量分析，也是数学上用来降维的一种方法。</p><h1 id="10、了解生成式半监督学习方法、半监督-SVM、图半监督学习方法的思想与原理。"><a href="#10、了解生成式半监督学习方法、半监督-SVM、图半监督学习方法的思想与原理。" class="headerlink" title="10、了解生成式半监督学习方法、半监督 SVM、图半监督学习方法的思想与原理。"></a>10、了解生成式半监督学习方法、半监督 SVM、图半监督学习方法的思想与原理。</h1><p>半监督学习(Semi-Supervised Learning，SSL)是模式识别和机器学习领域研究的重点问题，是监督学习与无监督学习相结合的一种学习方法。半监督学习使用大量的未标记数据，以及同时使用标记数据，来进行模式识别工作。当使用半监督学习时，将会要求尽量少的人员来从事工作，同时，又能够带来比较高的准确性，因此，半监督学习正越来越受到人们的重视。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-计算机基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据分析模型</title>
      <link href="/2021/10/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E5%85%AB%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/10/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E5%85%AB%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1、了解常用的大数据分析模型，例如行为事件分析模型、点击分析模型、用户行为路径分析模型、用户分群分析模型等，具有应用大数据技术进行大数据分析能力"><a href="#1、了解常用的大数据分析模型，例如行为事件分析模型、点击分析模型、用户行为路径分析模型、用户分群分析模型等，具有应用大数据技术进行大数据分析能力" class="headerlink" title="1、了解常用的大数据分析模型，例如行为事件分析模型、点击分析模型、用户行为路径分析模型、用户分群分析模型等，具有应用大数据技术进行大数据分析能力"></a>1、了解常用的大数据分析模型，例如行为事件分析模型、点击分析模型、用户行为路径分析模型、用户分群分析模型等，具有应用大数据技术进行大数据分析能力</h1><h2 id="行为事件分析模型"><a href="#行为事件分析模型" class="headerlink" title="行为事件分析模型"></a>行为事件分析模型</h2><p>行为事件分析法来研究某行为事件的发生对企业组织价值的影响以及影响程度。企业借此来追踪或记录的用户行为或业务过程，如用户注册、浏览产品详情页、成功投资、提现等，通过研究与事件发生关联的所有因素来挖掘用户行为事件背后的原因、交互影响等。<br>在日常工作中，运营、市场、产品、数据分析师根据实际工作情况而关注不同的事件指标。如最近三个月来自哪个渠道的用户注册量最高？变化趋势如何？各时段的人均充值金额是分别多少？上周来自北京发生过购买行为的独立用户数，按照年龄段的分布情况？每天的独立 Session 数是多少？诸如此类的指标查看的过程中，行为事件分析起到重要作用。</p><p>行为事件分析法具有强大的筛选、分组和聚合能力，逻辑清晰且使用简单，已被广泛应用。行为事件分析法一般经过事件定义与选择、下钻分析、解释与结论等环节。</p><h3 id="事件定义与选择。"><a href="#事件定义与选择。" class="headerlink" title="事件定义与选择。"></a>事件定义与选择。</h3><p>事件描述的是，一个用户在某个时间点、某个地方、以某种方式完成了某个具体的事情。Who、When、Where、What、How是定义一个事件的关键因素。其中：<br>Who 是参与事件的主体，对于未登陆用户，可以是 Cookie、设备ID 等匿名 ID ；对于登录用户，可以使用后台配置的实际用户ID；<br>When 是事件发生的实际时间，应该记录精确到毫秒的事件发生时间；<br>Where 即事件发生的地点，可以通过IP来解析用户所在省市；也可以根据 GPS 定位方式获取地理位置信息。<br>How 即用户从事这个事件的方式。用户使用的设备、浏览器、 App 版本、渠道来源等等；<br>What 描述用户所做的这个事件的所有具体内容。比如对于“购买”类型的事件，则可能需要记录的字段有：商品名称、商品类型、购买数量、购买金额、付款方式等。</p><h3 id="多维度下钻分析。"><a href="#多维度下钻分析。" class="headerlink" title="多维度下钻分析。"></a>多维度下钻分析。</h3><p>最为高效的行为事件分析要支持任意下钻分析和精细化条件筛选。当行为事件分析合理配置追踪事件和属性，可以激发出事件分析的强大潜能，为企业回答关于变化趋势、维度对比等等各种细分问题。同时，还可以通过添加筛选条件，可以精细化查看符合某些具体条件的事件数据。</p><h3 id="解释与结论。"><a href="#解释与结论。" class="headerlink" title="解释与结论。"></a>解释与结论。</h3><p>此环节要对分析结果进行合理的理论解释，判断数据分析结果是否与预期相符，如判断产品的细节优化是否提升了触发用户数。如果相悖，则应该针对不足的部分进行再分析与实证。</p><h2 id="用户分群分析模型"><a href="#用户分群分析模型" class="headerlink" title="用户分群分析模型"></a>用户分群分析模型</h2><p>用户分群数据分析方法是进行用户画像的关键数据分析模型，这是企业进行数据分析、精细化运营的第一步。用户分群即用户信息标签化，通过用户的历史行为路径、行为特征、偏好等属性，将具有相同属性的用户划分为一个群体，并进行后续分析。</p><h3 id="漏斗分析关注阶段差异，用户分群关注群体差异"><a href="#漏斗分析关注阶段差异，用户分群关注群体差异" class="headerlink" title="漏斗分析关注阶段差异，用户分群关注群体差异"></a>漏斗分析关注阶段差异，用户分群关注群体差异</h3><p>通过漏斗分析模型，运营人员可以看到，用户在不同阶段所表现出的行为是不同的，譬如新用户的关注点在哪里？已购用户什么情况下会再次付费？然而，由于群体特征不同，行为会有很大差别，因此运营人员或者产品人员希望可以根据历史数据将用户进行划分，将具有一定规律特性的用户群体进行归类，进而再次观察该群体的具体行为。这就是用户分群的原理。</p><h3 id="普通用户分群与预测分群"><a href="#普通用户分群与预测分群" class="headerlink" title="普通用户分群与预测分群"></a>普通用户分群与预测分群</h3><p>严格说来，用户分群分为普通分群和预测分群。普通分群是依据用户的属性特征和行为特征将用户群体进行分类；预测分群是根据用户以往的行为属性特征，运用机器学习算法来预测他们将来会发生某些事件的概率。</p><h2 id="点击分析模型"><a href="#点击分析模型" class="headerlink" title="点击分析模型"></a>点击分析模型</h2><p>点击分析模型在各行业内数据分析应用较为广泛，是重要的数据分析模型之一。<br>点击图是点击分析方法的效果呈现，在用户行为分析领域，点击分析被应用于显示页面或页面组（结构相同的页面，如商品详情页、官网博客等）区域中不同元素点击密度的图示。包括元素被点击的次数、占比、发生点击的用户列表、按钮的当前与历史内容等因素。</p><p>点击分析具有分析过程高效、灵活、易用，效果直观的特点。点击分析采用可视化的设计思想与架构，简洁直观的操作方式，直观呈现访客热衷的区域，帮助运营人员或管理者评估网页的设计的科学性。</p><p>在追求精细化网站运营的路上，企业对用户点击行为的可视化分析提出了更高需求，理想的点击分析方法主要分析：</p><h3 id="1、精准评估用户与网站交互背后的深层关系"><a href="#1、精准评估用户与网站交互背后的深层关系" class="headerlink" title="1、精准评估用户与网站交互背后的深层关系"></a>1、精准评估用户与网站交互背后的深层关系</h3><p>除了展示单个页面或页面组的点击图，前沿的点击分析应该能够支持事件（元素）属性、用户属性的任意维度筛选下钻；运营人员可以按照事件属性和用户属性进行筛选，对特定环境下特定用户群体对特定元素的点击进行精细化分析；支持查看页面元素点击背后的用户列表，满足企业网站的精细化分析需求。</p><h3 id="2、实现网页内跳转点击分析，抽丝剥茧般完成网页深层次的点击分析；"><a href="#2、实现网页内跳转点击分析，抽丝剥茧般完成网页深层次的点击分析；" class="headerlink" title="2、实现网页内跳转点击分析，抽丝剥茧般完成网页深层次的点击分析；"></a>2、实现网页内跳转点击分析，抽丝剥茧般完成网页深层次的点击分析；</h3><p>前沿的点击分析应支持网页内点击跳转分析——在浏览页面点击图时，使用者能够像访问者一样，点击页面元素，即可跳转至新的分析页面，且新的分析页面自动延续上一页面的筛选条件。同一筛选条件下，运营人员可抽丝剥茧般完成网页深层次的点击分析，操作流畅，分析流程简易、高效。</p><h3 id="3、与其他分析模型配合，以全面视角探索数据价值，能够深度感知用户体验，实现科学决策。"><a href="#3、与其他分析模型配合，以全面视角探索数据价值，能够深度感知用户体验，实现科学决策。" class="headerlink" title="3、与其他分析模型配合，以全面视角探索数据价值，能够深度感知用户体验，实现科学决策。"></a>3、与其他分析模型配合，以全面视角探索数据价值，能够深度感知用户体验，实现科学决策。</h3><p>无法精细化地深入分析，会让网页设计与优化丧失了科学性。点击图呈现用户喜爱点击的模块或聚焦的内容，是数据价值最上层表现。当“点击分析”与其他分析模块配合，交叉使用，将数据和分析结果以多种形式可视化展现，运营人员即可深度感知用户体验。例如，改版后，如何评估新版本对用户体验的影响？一处修改，是否影响其他元素的点击……等等。再如 A/B 测试，反复验证优化效果选择最优方案等。</p><h2 id="用户行为路径分析模型"><a href="#用户行为路径分析模型" class="headerlink" title="用户行为路径分析模型"></a>用户行为路径分析模型</h2><h3 id="什么是用户行为路径？"><a href="#什么是用户行为路径？" class="headerlink" title="什么是用户行为路径？"></a>什么是用户行为路径？</h3><p>用户路径分析，顾名思义，用户在APP或网站中的访问行为路径。为了衡量网站优化的效果或营销推广的效果，以及了解用户行为偏好，时常要对访问路径的转换数据进行分析。</p><p>以电商为例，买家从登录网站／APP到支付成功要经过首页浏览、搜索商品、加入购物车、提交订单、支付订单等过程。而在用户真实的选购过程是一个交缠反复的过程，例如提交订单后，用户可能会返回首页继续搜索商品，也可能去取消订单，每一个路径背后都有不同的动机。与其他分析模型配合进行深入分析后，能为找到快速用户动机，从而引领用户走向最优路径或者期望中的路径。</p><h3 id="用户路径分析模型的价值"><a href="#用户路径分析模型的价值" class="headerlink" title="用户路径分析模型的价值"></a>用户路径分析模型的价值</h3><p>用户路径的分析结果通常以桑基图形式展现，以目标事件为起点／终点，详细查看后续／前置路径，可以详细查看某个节点事件的流向，总的来说，科学的用户路径分析能够带来以下价值：</p><p>第一，可视化用户流，全面了解用户整体行为路径；</p><p>通过用户路径分析，可以将一个事件的上下游进行可视化展示。用户即可查看当前节点事件的相关信息，包括事件名、分组属性值、后续事件统计、流失、后续事件列表等。运营人员可通过用户整体行为路径找到不同行为间的关系，挖掘规律并找到瓶颈。</p><p>第二，定位影响转化的主次因素，产品设计的优化与改进有的放矢。</p><p>路径分析对产品设计的优化与改进有着很大的帮助，了解用户从登录到购买整体行为的主路径和次路径，根据用户路径中各个环节的转化率，发现用户的行为规律和偏好，也可以用于监测和定位用户路径走向中存在的问题，判断影响转化的主要因素和次要因素，也可以发现某些冷僻的功能点。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-数据库系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据技术与应用</title>
      <link href="/2021/10/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%83%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
      <url>/2021/10/18/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%83%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="（一）数据可视化"><a href="#（一）数据可视化" class="headerlink" title="（一）数据可视化"></a>（一）数据可视化</h1><h2 id="1、了解常见可视化图形（散点图、折线图、饼图、环图、双层环图、柱状图、堆积柱状图、分组柱状图、正负条形图、雷达图）的概念，具有初步的可视化图形展示数据的能力。"><a href="#1、了解常见可视化图形（散点图、折线图、饼图、环图、双层环图、柱状图、堆积柱状图、分组柱状图、正负条形图、雷达图）的概念，具有初步的可视化图形展示数据的能力。" class="headerlink" title="1、了解常见可视化图形（散点图、折线图、饼图、环图、双层环图、柱状图、堆积柱状图、分组柱状图、正负条形图、雷达图）的概念，具有初步的可视化图形展示数据的能力。"></a>1、了解常见可视化图形（散点图、折线图、饼图、环图、双层环图、柱状图、堆积柱状图、分组柱状图、正负条形图、雷达图）的概念，具有初步的可视化图形展示数据的能力。</h2><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p>散点图是指在回归分析中，数据点在直角坐标系平面上的分布图，散点图表示因变量随自变量而变化的大致趋势，据此可以选择合适的函数对数据点进行拟合。<br>用两组数据构成多个坐标点，考察坐标点的分布，判断两变量之间是否存在某种关联或总结坐标点的分布模式。散点图将序列显示为一组点。值由点在图表中的位置表示。类别由图表中的不同标记表示。散点图通常用于比较跨类别的聚合数据。</p><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><p>折线图是排列在工作表的列或行中的数据可以绘制到折线图中。折线图可以显示随时间（根据常用比例设置）而变化的连续数据，因此非常适用于显示在相等时间间隔下数据的趋势。<br>在折线图中，类别数据沿水平轴均匀分布，所有值数据沿垂直轴均匀分布。</p><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><p>饼图常用于统计学模块。<br>仅排列在工作表的一列或一行中的数据可以绘制到饼图中。饼图显示一个数据系列中各项的大小与各项总和的比例。饼图中的数据点显示为整个饼图的百分比。</p><p>数据系列：在图表中绘制的相关数据点，这些数据源自数据表的行或列。图表中的每个数据系列具有唯一的颜色或图案并且在图表的图例中表示。可以在图表中绘制一个或多个数据系列。饼图只有一个数据系列。</p><p>数据点：在图表中绘制的单个值，这些值由条形、柱形、折线、饼图或圆环图的扇面、圆点和其他被称为数据标记的图形表示。相同颜色的数据标记组成一个数据系列。</p><h2 id="环图"><a href="#环图" class="headerlink" title="环图"></a>环图</h2><h2 id="双层环图"><a href="#双层环图" class="headerlink" title="双层环图"></a>双层环图</h2><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p>柱形图，又称长条图、柱状统计图，亦称条图、条状图、棒形图，是一种以长方形的长度为变量的统计图表。长条图用来比较两个或以上的价值（不同时间或者不同条件），只有一个变量，通常利用于较小的数据集分析。长条图亦可横向排列，或用多维方式表达。</p><h2 id="堆积柱状图"><a href="#堆积柱状图" class="headerlink" title="堆积柱状图"></a>堆积柱状图</h2><h2 id="分组柱状图"><a href="#分组柱状图" class="headerlink" title="分组柱状图"></a>分组柱状图</h2><h2 id="正负条形图"><a href="#正负条形图" class="headerlink" title="正负条形图"></a>正负条形图</h2><h2 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h2><p>雷达图是以从同一点开始的轴上表示的三个或更多个定量变量的二维图表的形式显示多变量数据的图形方法。轴的相对位置和角度通常是无信息的。 雷达图也称为网络图，蜘蛛图，星图，蜘蛛网图，不规则多边形，极坐标图或Kiviat图。它相当于平行坐标图，轴径向排列。</p><h1 id="（二）大数据处理技术"><a href="#（二）大数据处理技术" class="headerlink" title="（二）大数据处理技术"></a>（二）大数据处理技术</h1><h2 id="1、掌握云计算的概念、云计算的特征、云计算的三层-SPI-模型（IaaS、PaaS、-SaaS）。"><a href="#1、掌握云计算的概念、云计算的特征、云计算的三层-SPI-模型（IaaS、PaaS、-SaaS）。" class="headerlink" title="1、掌握云计算的概念、云计算的特征、云计算的三层 SPI 模型（IaaS、PaaS、 SaaS）。"></a>1、掌握云计算的概念、云计算的特征、云计算的三层 SPI 模型（IaaS、PaaS、 SaaS）。</h2><p>参考<a href="/2021/10/14/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%89%E3%80%81%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89%E6%96%B0%E4%B8%80%E4%BB%A3%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/">[信息化基础知识（三）新一代信息技术]</a>云计算部分。</p><h2 id="2、掌握虚拟化技术的概念、常用虚拟化方法，了解常用虚拟化软件。"><a href="#2、掌握虚拟化技术的概念、常用虚拟化方法，了解常用虚拟化软件。" class="headerlink" title="2、掌握虚拟化技术的概念、常用虚拟化方法，了解常用虚拟化软件。"></a>2、掌握虚拟化技术的概念、常用虚拟化方法，了解常用虚拟化软件。</h2><p>虚拟化（Virtualization）技术最早出现在 20 世纪 60 年代的 IBM 大型机系统，在 20 世纪 70 年代的 System370 系列中逐渐流行起来，这些机器通过一种叫虚拟机监控器（Virtual Machine Monitor, VMM）的程序在物理硬件之上生成许多可以运行独立操作系统软件的虚拟机（Virtual Machine）实例。随着近年多核系统、集群、网格甚至云计算的广泛部署，虚拟化技术在商业应用上的优势日益体现，不仅降低了 T 成本，而且还增强了系统安全性和可靠性，虚拟化的概念也逐渐深入到人们日常的工作与生活中。</p><p>虚拟化是一个广义的术语，对于不同的人来说可能意味着不同的东西，这要取决他们所处的环境。在计算机科学领域中，虚拟化代表着对计算资源的抽象，而不仅仅局限于虚拟机的概念。例如对物理内存的抽象，产生了虚拟内存技术，使得应用程序认为其自身拥有连续可用的地址空间（Address Space），而实际上，应用程序的代码和数据可能被分隔成多个碎片页或段，甚至被交换到磁盘、闪存等外部存储器上，即使物理内存不足，应用程序也能顺利执行。</p><h3 id="（1）全虚拟化"><a href="#（1）全虚拟化" class="headerlink" title="（1）全虚拟化"></a>（1）全虚拟化</h3><p>全虚拟化（Full Virtualization）是指虚拟机模拟了完整的底层硬件，包括处理器、物理 内存、时钟、外设等，使得为原始硬件设计的操作系统或其他系统软件完全不作任何修改就 可以在虚拟机中运行。<br>比较著名的全虚拟化 VMM 有 Microsoft Virtual PC、VMware Workstation、SUN Virtual Box、Parallels Desktop forMac 和 QEMU。</p><h3 id="（2）超虚拟化"><a href="#（2）超虚拟化" class="headerlink" title="（2）超虚拟化"></a>（2）超虚拟化</h3><p>超虚拟化（Paravirtualization）是一种修改 Guest OS 部分访问特权状态的代码以便直接 与 VMM 交互的技术。在超虚拟化虚拟机中，部分硬件接口以软件的形式提供给客户机操 作系统，这可以通过 Hypercall（VMM 提供给 Guest OS 的直接调用，与系统调用类似）的 方式来提供。<br>比较著名的 VMM 有 Denali、Xen。</p><h3 id="（3）硬件辅助虚拟化"><a href="#（3）硬件辅助虚拟化" class="headerlink" title="（3）硬件辅助虚拟化"></a>（3）硬件辅助虚拟化</h3><p>硬件辅助虚拟化（Hardware-Assisted Virtualization）是指借助硬件（主要是主机处理器） 的支持来实现高效的全虚拟化。<br>Intel-VT 和 AMD-V 是目前 x86 体系结构上可用的两种硬件辅助虚拟化技术。</p><h3 id="（4）部分虚拟化"><a href="#（4）部分虚拟化" class="headerlink" title="（4）部分虚拟化"></a>（4）部分虚拟化</h3><p>部分虚拟化（Partial Virtualization）中，VMM 只模拟部分底层硬件，因此客户机操作系 统不作修改是无法在虚拟机中运行的，其他程序可能也需要进行修改。</p><h3 id="（5）操作系统级虚拟化"><a href="#（5）操作系统级虚拟化" class="headerlink" title="（5）操作系统级虚拟化"></a>（5）操作系统级虚拟化</h3><p>在传统操作系统中，所有用户的进程本质上是在同一个操作系统的实例中运行，因此内 核或应用程序的缺陷可能影响到其他进程。 操作系统级虚拟化（ Operating System Level Virtualization）是一种在服务器操作系统中使用的轻量级的虚拟化技术，内核通过创建多个 虚拟的操作系统实例（内核和库）来隔离不同的进程，不同实例中的进程完全不了解对方的 存在。<br>比较著名的有 Solaris Container、FreeBSD Jail 和 OpenVZ 等。</p><h2 id="3、具有应用虚拟化技术搭建虚拟化平台的能力。"><a href="#3、具有应用虚拟化技术搭建虚拟化平台的能力。" class="headerlink" title="3、具有应用虚拟化技术搭建虚拟化平台的能力。"></a>3、具有应用虚拟化技术搭建虚拟化平台的能力。</h2><h2 id="4、了解分布式计算、高性能计算、边缘计算的概念。"><a href="#4、了解分布式计算、高性能计算、边缘计算的概念。" class="headerlink" title="4、了解分布式计算、高性能计算、边缘计算的概念。"></a>4、了解分布式计算、高性能计算、边缘计算的概念。</h2><h3 id="分布式计算"><a href="#分布式计算" class="headerlink" title="分布式计算"></a>分布式计算</h3><p>分布式计算是一种计算方法，和集中式计算是相对的。<br>随着计算技术的发展，有些应用需要非常巨大的计算能力才能完成，如果采用集中式计算，需要耗费相当长的时间来完成。<br>分布式计算将该应用分解成许多小的部分，分配给多台计算机进行处理。这样可以节约整体计算时间，大大提高计算效率。</p><h3 id="高性能计算"><a href="#高性能计算" class="headerlink" title="高性能计算"></a>高性能计算</h3><p>高性能计算(High performance computing， 缩写HPC) 指通常使用很多处理器（作为单个机器的一部分）或者某一集群中组织的几台计算机（作为单个计 算资源操作）的计算系统和环境。有许多类型的HPC 系统，其范围从标准计算机的大型集群，到高度专用的硬件。大多数基于集群的HPC系统使用高性能网络互连，比如那些来自 InfiniBand 或 Myrinet 的网络互连。基本的网络拓扑和组织可以使用一个简单的总线拓扑，在性能很高的环境中，网状网络系统在主机之间提供较短的潜伏期，所以可改善总体网络性能和传输速率。</p><h3 id="边缘计算"><a href="#边缘计算" class="headerlink" title="边缘计算"></a>边缘计算</h3><p>边缘计算，是指在靠近物或数据源头的一侧，采用网络、计算、存储、应用核心能力为一体的开放平台，就近提供最近端服务。其应用程序在边缘侧发起，产生更快的网络服务响应，满足行业在实时业务、应用智能、安全与隐私保护等方面的基本需求。边缘计算处于物理实体和工业连接之间，或处于物理实体的顶端。而云端计算，仍然可以访问边缘计算的历史数据。</p><h2 id="5-了解有监督学习、无监督学习、强化学习的概念和区别。"><a href="#5-了解有监督学习、无监督学习、强化学习的概念和区别。" class="headerlink" title="5.了解有监督学习、无监督学习、强化学习的概念和区别。"></a>5.了解有监督学习、无监督学习、强化学习的概念和区别。</h2><h3 id="有监督学习"><a href="#有监督学习" class="headerlink" title="有监督学习"></a>有监督学习</h3><p>训练数据由一组训练实例组成。在监督学习中，每一个例子都是一对由一个输入对象（通常是一个向量）和一个期望的输出值（也被称为监督信号）。有监督学习算法分析训练数据，并产生一个推断的功能，它可以用于映射新的例子。一个最佳的方案将允许该算法正确地在标签不可见的情况下确定类标签。<br>用已知某种或某些特性的样本作为训练集，以建立一个数学模型(如模式识别中的判别模型，人工神经网络法中的权重模型等)，再用已建立的模型来预测未知样本，此种方法称为有监督学习。是最常见的机器学习方法。</p><h3 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h3><p>现实生活中常常会有这样的问题：缺乏足够的先验知识，因此难以人工标注类别或进行人工类别标注的成本太高。很自然地，我们希望计算机能代我们完成这些工作，或至少提供一些帮助。根据类别未知(没有被标记)的训练样本解决模式识别中的各种问题，称之为无监督学习。</p><h3 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h3><p>强化学习（Reinforcement Learning, RL），又称再励学习、评价学习或增强学习，是机器学习的范式和方法论之一，用于描述和解决智能体（agent）在与环境的交互过程中通过学习策略以达成回报最大化或实现特定目标的问题。<br>强化学习的常见模型是标准的马尔可夫决策过程（Markov Decision Process, MDP）。按给定条件，强化学习可分为基于模式的强化学习（model-based RL）和无模式强化学习（model-free RL），以及主动强化学习（active RL）和被动强化学习（passive RL）。强化学习的变体包括逆向强化学习、阶层强化学习和部分可观测系统的强化学习。求解强化学习问题所使用的算法可分为策略搜索算法和值函数（value function）算法两类。深度学习模型可以在强化学习中得到使用，形成深度强化学习。</p><h2 id="6、了解数据集市、数据仓库、数据中台、数据平台的概念。"><a href="#6、了解数据集市、数据仓库、数据中台、数据平台的概念。" class="headerlink" title="6、了解数据集市、数据仓库、数据中台、数据平台的概念。"></a>6、了解数据集市、数据仓库、数据中台、数据平台的概念。</h2><h3 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h3><p>数据仓库：是一个集成的面向主题的数据集合，设计的目的是支持DSS（决策支持系统）的功能，在数据仓库里，每个数据单元都和特定的时间相关。数据仓库包括原子级别的数据和轻度汇总的数据。数据仓库是面向主题的、集成的、不可更新的(稳定性)、随时间不断变化（不同时间）的数据集合，用以支持经营管理中的决策制定过程。</p><h3 id="数据集市"><a href="#数据集市" class="headerlink" title="数据集市"></a>数据集市</h3><p>数据集市：是一个小型的部门或工作组级别的数据仓库。有两种类型的数据集市——独立型和从属型。独立型数据集市直接从操作型环境获取数据。从属型数据集市从企业级数据仓库获取数据。从长远的角度看，从属型数据集市在体系结构上比独立型数据集市更稳定。</p><h3 id="数据中台和数据平台"><a href="#数据中台和数据平台" class="headerlink" title="数据中台和数据平台"></a>数据中台和数据平台</h3><p>数据中台的本质就是“数据仓库+数据服务中间件”。</p><p>想要理解数据中台和数据平台的区别，首先应该了解中台和平台的区别。我理解的平台是企业或者研发团队为了满足用户需求而建设的基于业务的平台（也就是各种不同类型的能力组合后的产物）。而中台，一般是组合前的能力集合，处于同一中台的能力一般都是相似能力的，前台调用者只需要对中台的各种能力进行组合就可以来满足用户的需求。</p><p>数据中台就是对数据能力的一个建设集合，数据平台可以通过组合数据中台的能力来满足用户的需求，数据平台是直接面向客户的能力组合过后的商业产品，而数据中台是企业自身的能力集合。产品层从用户获取需求之后，制定出需要构建的数据能力平台，该能力平台就可以从企业已有的数据中台中获取不同的数据能力，通过能力的组合的方法，将中台中的小能力通过组合，拆分聚合构建起数据平台。如果数据能力中台中不包含某项能力，那么中台的建设者就应该积极去拓展这样的能力。</p><p>中台建设的过程中，中台抽象自平台。在平台的搭建过程中，平台来源于对中台能力的组合和聚合。单从用处来讲，中台的出现是为了减少重复劳动，基于用户需求的各种平台可以构建在企业能力中台之上，平台由各种中台能力类似于像搭积木一样构建起来。通过对不同能力的组合，聚合，构建起满足一定用户需求的大功能。中台的建设也需要从平台中借鉴经验，比如，用户需要什么样的功能，如果目前中台对这样的功能无法支持，那么我们就需要对中台能力进行扩充。数据中台就是为了避免重复创造数据能力相关的轮子而出现的数据能力集合。虽然数据平台也是能力集合，单从组成来讲，平台的能力比较基于某种功能，而中台能力集合中的某一个能力往往只基于某一个点。可以简单想象成企业内部的能力库。中台的出现就是为了减少重复轮子的构建工作。</p><h2 id="7、掌握数据采集与预处理过程，掌握数据采集、数据清洗、数据转换、数据脱敏的方法。"><a href="#7、掌握数据采集与预处理过程，掌握数据采集、数据清洗、数据转换、数据脱敏的方法。" class="headerlink" title="7、掌握数据采集与预处理过程，掌握数据采集、数据清洗、数据转换、数据脱敏的方法。"></a>7、掌握数据采集与预处理过程，掌握数据采集、数据清洗、数据转换、数据脱敏的方法。</h2><h3 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h3><p>数据采集根据采集数据的类型可以分为不同的方式，主要方式有：传感器采集、爬虫、录入、导入、接口等。</p><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><p>1）忽略该条记录<br>若一条记录中有属性值被遗漏了，则将此条记录排除，尤其是没有类别属性值而又要进行分类数据挖掘时。当然，这种方法并不很有效，尤其是在每个属性的遗漏值的记录比例相差较大时。<br>2）手工填补遗漏值<br>一般这种方法比较耗时，而且对于存在许多遗漏情况的大规模数据集而言，显然可行性较差。<br>3）利用默认值填补遗漏值<br>对一个属性的所有遗漏的值均利用一个事先确定好的值来填补，如都用“OK”来填补。但当一个属性的遗漏值较多时，若采用这种方法，就可能误导挖掘进程。因此这种方法虽然简单，但并不推荐使用，或使用时需要仔细分析填补后的情况，以尽量避免对最终挖掘结果产生较大误差。<br>4）利用均值填补遗漏值<br>计算一个属性值的平均值，并用此值填补该属性所有遗漏的值。例如，若顾客的平均收入为 10000 元，则用此值填补“顾客收入”属性中所有被遗漏的值。<br>5）利用同类别均值填补遗漏值<br>这种方法尤其适合在进行分类挖掘时使用。例如，若要对商场顾客按信用风险进行分类挖掘时，就可以用在同一信用风险类别（如良好）下的“顾客收入”属性的平均值，来填补所有在同一信用风险类别下“顾客收入”属性的遗漏值。<br>6）利用最可能的值填补遗漏值<br>可以利用回归分析、贝叶斯计算公式或决策树推断出该条记录特定属性的最大可能的取值。例如，利用数据集中其他顾客的属性值，可以构造一个决策树来预测“顾客收入”属性的遗漏值。<br>最后一种方法是一种较常用的方法，与其他方法相比，它最大程度地利用了当前数据所包含的信息来帮助预测所遗漏的数据。</p><h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><p>1）平滑处理<br>帮助除去数据中的噪声，主要技术方法有 Bin 方法、聚类方法和回归方法。<br>2）合计处理<br>对数据进行总结或合计操作。例如，每天的数据经过合计操作可以获得每月或每年的总额。这一操作常用于构造数据立方或对数据进行多粒度的分析。<br>3）数据泛化处理<br>用更抽象（更高层次）的概念来取代低层次或数据层的数据对象。</p><p>例如，街道属性可以泛化到更高层次的概念，如城市、国家，数值型的属性，如年龄属性，可以映射到更高层次的概念，如年轻、中年和老年。<br>4）规格化处理<br>将有关属性数据按比例投射到特定的小范围之中。例如，将工资收入属性值映射到 0 到 1 范围内。<br>5）属性构造处理<br>根据已有属性集构造新的属性，以帮助数据处理过程。</p><h3 id="数据脱敏"><a href="#数据脱敏" class="headerlink" title="数据脱敏"></a>数据脱敏</h3><p>1.数据替换<br>要求：用设置的固定虚构值替换真值。例如将手机号码统一替换为 13800013800<br>2.无效化<br>要求：通过对数据值得截断、加密、隐藏等方式使敏感数据脱敏，使其不再具有利用价值，例如将地址以 ****** 代替真值。数据无效化与数据替换所达成的效果基本类似。<br>3.随机化<br>要求：用随机数据代替真值，保持替换值的随机性以模拟样本的真实性。例如用随机生成的姓和名代替真值。<br>【注意】这个例子中我们针对数据脱敏引入了外部字典表，实际情况中可以根据数据脱敏要求，随时引入任意外部字典表，通过数据的随机化组合，实现替换真值数据的脱敏处理。<br>4.偏移和取整<br>要求：通过随机移位改变数字数据，例如日期 2018-01-02 8:12:25 变为 2018-01-02 8:00:00，偏移取整在保持了数据的安全性的同时保证了范围的大致真实性，此项功能在大数据利用环境中具有重大价值。<br>5.掩码屏蔽<br>要求：掩码屏蔽是针对账户类数据的部分信息进行脱敏时的有力工具，比如银行卡号或是身份证号的脱敏。将身份证号的出生日期进行掩码屏蔽脱敏。使用left()函数截取身份证号的左边 6 位 + 字符串 ********+right()函数截取身份证号右边 4 位替换源身份证字符串。<br>6.灵活编码<br>要求：在需要特殊脱敏规则时，可执行灵活编码以满足各种可能的脱敏规则。比如用固定字母和固定位数的数字替代合同编号真值。将合同编号进行自定义编码脱敏。自定义编码规则：4 位固定码 + 当前年份 + 源目标字符串 4 位号码 + 9 位数值组成。</p><h2 id="8、了解数据存储与管理技术、大数据处理架构-Hadoop、分布式文件系统-HDFS、NoSQL-数据库、分布式数据库-HBase-的相关概念。"><a href="#8、了解数据存储与管理技术、大数据处理架构-Hadoop、分布式文件系统-HDFS、NoSQL-数据库、分布式数据库-HBase-的相关概念。" class="headerlink" title="8、了解数据存储与管理技术、大数据处理架构 Hadoop、分布式文件系统 HDFS、NoSQL 数据库、分布式数据库 HBase 的相关概念。"></a>8、了解数据存储与管理技术、大数据处理架构 Hadoop、分布式文件系统 HDFS、NoSQL 数据库、分布式数据库 HBase 的相关概念。</h2><h3 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h3><p>Hadoop 是一种分析和处理大数据的软件平台，是一个用 Java 语言实现的 Apache 的开源软件框架，在大量计算机组成的集群中实现了对海量数据的分布式计算。<br>Hadoop 采用 MapReduce 分布式计算框架，根据 GFS 原理开发了 HDFS（分布式文件系统），并根据 BigTable 原理开发了 HBase 数据存储系统。<br>Hadoop 是一个基础框架，允许用简单的编程模型在计算机集群上对大型数据集进行分布式处理。它的设计规模从单一服务器到数千台机器，每个服务器都能提供本地计算和存储功能，框架本身提供的是计算机集群高可用的服务，不依靠硬件来提供高可用性。<br>用户可以在不了解分布式底层细节的情况下，轻松地在 Hadoop 上开发和运行处理海量数据的应用程序。低成本、高可靠、高扩展、高有效、高容错等特性让 hadoop 成为最流行的大数据分析系统。<br><img src="/images/bigdata/3-7.jpg"><br>Hadoop 生态圈包括以下主要组件。<br>1）HDFS<br>一个提供高可用的获取应用数据的分布式文件系统。<br>2）MapReduce<br>一个并行处理大数据集的编程模型。<br>3）HBase<br>一个可扩展的分布式数据库，支持大表的结构化数据存储。是一个建立在 HDFS 之上的，面向列的 NoSQL 数据库，用于快速读/写大量数据。<br>4）Hive<br>一个建立在 Hadoop 上的数据仓库基础构架。它提供了一系列的工具；可以用来进行数据提取转化加载（ETL），这是一种可以存储、查询和分析存储在 Hadoop 中的大规模数据的机制。<br>Hive 定义了简单的类 SQL 查询语言，称为 HQL，它允许不熟悉 MapReduce 的开发人员也能编写数据查询语句，然后这些语句被翻译为 Hadoop 上面的 MapReduce 任务。<br>5）Mahout<br>可扩展的机器学习和数据挖掘库。它提供的 MapReduce 包含很多实现方法，包括聚类算法、回归测试、统计建模。<br>6）Pig<br>一个支持并行计算的高级的数据流语言和执行框架。它是 MapReduce 编程的复杂性的抽象。Pig 平台包括运行环境和用于分析 Hadoop 数据集的脚本语言（PigLatin）。其编译器将 PigLatin 翻译成 MapReduce 程序序列。<br>7）Zookeeper<br>—个应用于分布式应用的高性能的协调服务。它是一个为分布式应用提供一致性服务的软件，提供的功能包括配置维护、域名服务、分布式同步、组服务等。<br>8）Amban<br>一个基于 Web 的工具，用来供应、管理和监测 Hadoop 集群，包括支持 HDFS、MapReduceAHive、HCatalog、HBase、ZooKeeperAOozie、Pig 和 Sqoop 。</p><h3 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h3><p>HDFS 是 Hadoop 的一个分布式文件系统，是 Hadoop 应用程序使用的主要分布式存储。HDFS 被设计成适合运行在通用硬件上的分布式文件系统。<br>在 HDFS 体系结构中有两类结点：一类是 NameNode，又叫“名称结点”；另一类是 DataNode，又叫“数据结点”。这两类结点分别承担 Master 和 Worker 具体任务的执行。<br>HDFS 总的设计思想是分而治之，即将大文件和大批量文件分布式存放在大量独立的服务器上，以便采取分而治之的方式对海量数据进行运算分析。<br>HDFS 是一个主/从体系结构，从最终用户的角度来看，它就像传统的文件系统一样，可以通过目录路径对文件执行 CRUD（Create、Read、Update 和 Delete）操作。但由于分布式存储的性质，HDFS 集群拥有一个 NameNode 和一些 DataNode。NameNode 管理文件系统的元数据，DataNode 存储实际的数据。<br>客户端通过同 NameNode 和 DataNode 的交互来访问文件系统。客户端通过联系 NameNode 来获取文件的元数据，而真正的文件 I/O 操作是直接和 DataNode 交互进行的。<br>HDFS 主要针对“一次写入，多次读取”的应用场景，不适合实时交互性很强的应用场景，也不适合存储大量小文件。</p><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>NoSQL 是一种不同于关系型数据库的数据库管理系统设计方式，是对非关系型数据库的统称。它所采用的数据模型并非关系型数据库的关系模型，而是类似键值、列族、文档等的非今系模型。它打破了长久以来关系型数据库与 ACID（原子性（Atomicity）、一致性（Consistency）隔离性（Isolation）和持久性（Durability））理论大一统的局面。<br>NoSQL 数据存储不需要固定的表结构，每一个元组可以有不一样的字段，每个元组可以根据需要增加一些自己的键值对，这样就不会局限于固定的结构，可以减少一些时间和空间的开销。</p><h3 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h3><p>HBase 是基于 Apache Hadoop 的面向列的 NoSQL 数据库，是 Google 的 BigTable 的开源实现。HBase 是一个针对半结构化数据的开源的、多版本的、可伸缩的、高可靠的、高性能的、分布式的和面向列的动态模式数据库。<br>HBase 和传统关系数据库不同，它采用了 BigTable 的数据模型增强的稀疏排序映射表（Key/Value），其中，键由行关键字、列关键字和时间戳构成。<br>HBase 提供了对大规模数据的随机、实时读写访问。HBase 的目标是存储并处理大型的数据，也就是仅用普通的硬件配置，就能够处理上千亿的行和几百万的列所组成的超大型数据库。</p><h2 id="9、了解大数据处理环节的主要思想：大数据采集、大数据预处理、大数据存储及管理、大数据分析及挖掘、大数据展现和应用（包括大数据检索、大数据可视化、大数据应用、大数据安全等）。"><a href="#9、了解大数据处理环节的主要思想：大数据采集、大数据预处理、大数据存储及管理、大数据分析及挖掘、大数据展现和应用（包括大数据检索、大数据可视化、大数据应用、大数据安全等）。" class="headerlink" title="9、了解大数据处理环节的主要思想：大数据采集、大数据预处理、大数据存储及管理、大数据分析及挖掘、大数据展现和应用（包括大数据检索、大数据可视化、大数据应用、大数据安全等）。"></a>9、了解大数据处理环节的主要思想：大数据采集、大数据预处理、大数据存储及管理、大数据分析及挖掘、大数据展现和应用（包括大数据检索、大数据可视化、大数据应用、大数据安全等）。</h2><h2 id="10、了解大数据处理与分析的代表性流行产品。"><a href="#10、了解大数据处理与分析的代表性流行产品。" class="headerlink" title="10、了解大数据处理与分析的代表性流行产品。"></a>10、了解大数据处理与分析的代表性流行产品。</h2><p>1、大数据平台，华为和星环。<br>华为- Fusioninsight，基于 Apache 进行功能增强的企业级大数据存储、查询和分析的统一平台。<br>星环，基于 Hadoop 生态系列的大数据平台公司。</p><p>2、云端大数据，阿里云和华为云。<br>阿里云实力不差，与亚马逊 AWS 抗衡，做公有云、私有云、混，面向中小型企业。<br>华为云，定位运营商和大中型企业，依傍数据安全</p><p>3、数据应用方面，围绕大数据和报表的帆软，特定业务应用的云 CRM 的纷享销客和等等。数据应用现在主要分为两种模式，一种是纯正 IT 类，围绕企业部暑应用的，如帆软。还有一类是互联网 2B 形式，主要是 SAAS 产品，如销售易。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-数据库系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统(SQL + NoSQL)</title>
      <link href="/2021/10/15/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%BA%94%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F(SQL%20+%20NoSQL)/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F(SQL%20+%20NoSQL)/"/>
      <url>/2021/10/15/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%BA%94%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F(SQL%20+%20NoSQL)/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F(SQL%20+%20NoSQL)/</url>
      
        <content type="html"><![CDATA[<h1 id="1、掌握关系模型概念和-SQL-语言。"><a href="#1、掌握关系模型概念和-SQL-语言。" class="headerlink" title="1、掌握关系模型概念和 SQL 语言。"></a>1、掌握关系模型概念和 SQL 语言。</h1><p>数据模型主要有两大类，分别是概念数据模型（实体一联系模型）和基本数据模型（结构数据模型）。<br>概念数据模型是按照用户的观点来对数据和信息建模，主要用于数据库设计。概念模型主要用实体一联系方法（Entity- Relationship Approach）表示，所以也称 E-R 模型。<br>基本数据模型是按照计算机系统的观点来对数据和信息建模，主要用于 DBMS 的实现。基本数据模型是数据库系统的核心和基础。基本数据模型通常由数据结构、数据操作和完整性约束三部分组成。其中数据结构是对系统静态特性的描述，数据操作是对系统动态特性的描述，完整性约是一组完整性规则的集合。<br>常用的基本数据模型有层次模型、网状模型、关系模型和面向对象模型。<br>层次模型用树形结构表示实体类型及实体间的联系。层次模型的优点是记录之间的联系通过指针来实现，査询效率较高。层次模型的缺点是只能表示 1:n 联系，虽然有多种辅助手段实现 m:n 联系，但比较复杂，用户不易掌握。由于层次顺序的严格和复杂，导致数据的査询和更新操作很复杂，应用程序的编写也比较复杂。<br>网状模型用有向图表示实体类型及实体间的联系。网状模型的优点是记录之间的联系通过指针实现，m:n 联系也容易实现，査询效率高。其缺点是编写应用程序的过程比较复杂程序员必须熟悉数据库的逻辑结构。<br>关系模型用表格结构表达实体集，用外键表示实体间的联系。其优点有：<br>(1)建立在严格的数学概念基础上<br>(2)概念（关系）单一，结构简单、清晰，用户易懂易用<br>(3)存取路径对用户透明，从而数据独立性、安全性好，简化数据库开发工作</p><table><thead><tr><th>分类</th><th>含义</th></tr></thead><tbody><tr><td>①DDL数据定义语言</td><td>负责数据库定义、数据库对象定义。由create，alter，drop</td></tr><tr><td>②DML数据操作语言</td><td>负责绝对数据库对象的操作，CRUD增删改查</td></tr><tr><td>③DCL数据控制语言</td><td>负责数据库权限访问控制，grant和revoke两个指令组成</td></tr><tr><td>④TCL事务控制语言</td><td>负责处理acid事物，支持commit、rollback指令</td></tr></tbody></table><h1 id="2、掌握关系数据库设计方法。"><a href="#2、掌握关系数据库设计方法。" class="headerlink" title="2、掌握关系数据库设计方法。"></a>2、掌握关系数据库设计方法。</h1><p>目前已有的数据库设计方法可分为四类，即直观设计法、规范设计法、计算机辅助设计法和自动化设计法。直观设计法又称单步逻辑设计法，它依赖于设计者的知识、经验和技巧，缺乏工程规范的支持和科学根据，设计质量也不稳定，因此越来越不适应信息管理系统发展的需要。为了改变这种状况，1978 年 10 月来自 30 多个欧美国家的主要数据库专家在美国新奥尔良市专门讨论了数据库设计问题，提出了数据库设计规范，把数据库设计分为需求分析、概念结构设计、逻辑结构设计和物理结构设计 4 个阶段。目前，常用的规范设计方法大多起源于新奥尔良方法，如基于 3NF 的设计方法、LRA 方法、面向对象的数据库设计方法及基于视图概念的数据库设计方法等。</p><p><img src="/images/bigdata/2-14.png"></p><h1 id="3、掌握关系数据库索引的概念和使用方法。"><a href="#3、掌握关系数据库索引的概念和使用方法。" class="headerlink" title="3、掌握关系数据库索引的概念和使用方法。"></a>3、掌握关系数据库索引的概念和使用方法。</h1><p>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。如果想按特定职员的姓来查找他或她，则与在表中搜索所有的行相比，索引有助于更快地获取信息。<br>索引的一个主要目的就是加快检索表中数据，亦即能协助信息搜索者尽快的找到符合限制条件的记录ID的辅助数据结构。</p><p>搜索码。它表示的是记录各种字符段的一个集合，它可以是一个或者是多个字符段的任意序列组合，并不是惟一的一个标识记录。<br>数据目录项。即为索引的相关元素，在建立索引的过程中，数据目录项一般具有各种不同的选择方式。<br>记录ID。每一个/段索引在存储内容中惟一的一个标识符。</p><p>唯一索引<br>唯一索引是不允许其中任何两行具有相同索引值的索引。当现有数据中存在重复的键值时，大多数数据库不允许将新创建的唯一索引与表一起保存。数据库还可能防止添加将在表中创建重复键值的新数据。例如，如果在employee表中职员的姓(lname)上创建了唯一索引，则任何两个员工都不能同姓。</p><p>主键索引<br>数据库表经常有一列或多列组合，其值唯一标识表中的每一行。该列称为表的主键。在数据库关系图中为表定义主键将自动创建主键索引，主键索引是唯一索引的特定类型。该索引要求主键中的每个值都唯一。当在查询中使用主键索引时，它还允许对数据的快速访问。</p><p>聚集索引<br>在聚集索引中，表中行的物理顺序与键值的逻辑（索引）顺序相同。一个表只能包含一个聚集索引。如果某索引不是聚集索引，则表中行的物理顺序与键值的逻辑顺序不匹配。与非聚集索引相比，聚集索引通常提供更快的数据访问速度。聚集索引和非聚集索引的区别，如字典默认按字母顺序排序，读者如知道某个字的读音可根据字母顺序快速定位。因此聚集索引和表的内容是在一起的。如读者需查询某个生僻字，则需按字典前面的索引，举例按偏旁进行定位，找到该字对应的页数，再打开对应页数找到该字。这种通过两个地方而查询到某个字的方式就如非聚集索引。</p><p>索引列<br>可以基于数据库表中的单列或多列创建索引。多列索引可以区分其中一列可能有相同值的行。如果经常同时搜索两列或多列或按两列或多列排序时，索引也很有帮助。例如，如果经常在同一查询中为姓和名两列设置判据，那么在这两列上创建多列索引将很有意义。</p><h1 id="4、掌握关系数据库查询处理与查询优化方法。"><a href="#4、掌握关系数据库查询处理与查询优化方法。" class="headerlink" title="4、掌握关系数据库查询处理与查询优化方法。"></a>4、掌握关系数据库查询处理与查询优化方法。</h1><p>1、创建索引<br>对于查询占主要的应用来说，索引显得尤为重要。很多时候性能问题很简单的就是因为我们忘了添加索引而造成的，或者说没有添加更为有效的索引导致。如果不加索引的话，那么查找任何哪怕只是一条特定的数据都会进行一次全表扫描，如果一张表的数据量很大而符合条件的结果又很少，那么不加索引会引起致命的性能下降。但是也不是什么情况都非得建索引不可，比如性别可能就只有两个值，建索引不仅没什么优势，还会影响到更新速度，这被称为过度索引。<br>2、复合索引<br>比如有一条语句是这样的：select * from users where area=’beijing’ and age=22;<br>如果我们是在area和age上分别创建单个索引的话，由于mysql查询每次只能使用一个索引，所以虽然这样已经相对不做索引时全表扫描提高了很多效率，但是如果在area、age两列上创建复合索引的话将带来更高的效率。如果我们创建了(area, age, salary)的复合索引，那么其实相当于创建了(area,age,salary)、(area,age)、(area)三个索引，这被称为最佳左前缀特性。因此我们在创建复合索引时应该将最常用作限制条件的列放在最左边，依次递减。<br>3、索引不会包含有NULL值的列<br>只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。<br>4、使用短索引<br>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的 列，如果在前10 个或20 个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。<br>5、排序的索引问题<br>mysql查询只使用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。<br>6、like语句操作<br>一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。<br>7、不要在列上进行运算<br>select * from users where YEAR(adddate)&lt;2007;<br>将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成<br>select * from users where adddate&lt;‘2007-01-01’;<br>8、不使用NOT IN和&lt;&gt;操作<br>NOT IN和&lt;&gt;操作都不会使用索引将进行全表扫描。NOT IN可以NOT EXISTS代替，id&lt;&gt;3则可使用id&gt;3 or id&lt;3来代替。</p><h1 id="5、掌握关系数据库事务概念和事务调度方法。"><a href="#5、掌握关系数据库事务概念和事务调度方法。" class="headerlink" title="5、掌握关系数据库事务概念和事务调度方法。"></a>5、掌握关系数据库事务概念和事务调度方法。</h1><p>事务是将一组读写操作组合在一起形成一个逻辑单元。这些操作要么全部执行成功提交(commit)，要么全部中止失败(abort,rollback），不会留下一个中间状态的烂摊子。所以，失败后程序可以安全的重试，分析原因等。 相反，如果没有对事务的支持，数据库可能持久化很多中间状态，留下无法解释的业务，开发人员处理起来也很麻烦。所以，事务是为了简化编程，提供数据安全/正确性/一致性。当然，任何便利都是有代价的，事务也有一些问题，所以NoSQL数据库，分布式数据库在某种程度上会弱化事务。有些甚至完全放弃事务。</p><h2 id="ACID特性"><a href="#ACID特性" class="headerlink" title="ACID特性"></a>ACID特性</h2><p>谈到事务，都想到ACID。每个字母分别代表原子性(Atomicity)，一致性(Consistency)，隔离性(Isolation)，持久性 (Durability)。搞清楚了ACID,就相当于搞清楚了事务的精髓。</p><h2 id="事物的调度分类"><a href="#事物的调度分类" class="headerlink" title="事物的调度分类"></a>事物的调度分类</h2><p>并行执行：多个事物是可以同时执行的<br>串行执行：一个事物在执行的时候另外的事物必须等到当前事物执行完才能执行<br>串行执行会让运行效率低下，而并行执行会破坏数据库的一致性</p><h2 id="交叉事物的控制（并行执行事物的控制）"><a href="#交叉事物的控制（并行执行事物的控制）" class="headerlink" title="交叉事物的控制（并行执行事物的控制）"></a>交叉事物的控制（并行执行事物的控制）</h2><p>乐观控制（乐观锁）<br>1.每次访问数据的时候，不加锁，都看做是在做读操作，其他事物也能访问当前事物访问的数据。这样就会造成数据不一致性，所以数据库为了使得数据一致性得到保证，在并发的修改了数据之后，数据库会对相关的数据进行回滚。<br>2.特点<br>采用的是事后做回滚操作解决冲突问题<br>事物的数据回滚可能造成级联回滚<br>在读操作占大多数的情况下，采用乐观控制效率会高</p><p>悲观控制（悲观锁）<br>1.事物访问数据之前先对数据进行加锁，防止其他事物也访问当前的数据<br>2.特点<br>采用的是预防冲突发生的思想<br>采用悲观控制，除非死锁，否则事物肯定会成功<br>其他事物，在某些情况下也可以是读操作<br>悲观控制，就是严格的控制了其他事物对当前事物的访问，有效的避免了大量事物的回滚</p><h2 id="锁（锁的实质：数据库对元素进行存取的许可证）"><a href="#锁（锁的实质：数据库对元素进行存取的许可证）" class="headerlink" title="锁（锁的实质：数据库对元素进行存取的许可证）"></a>锁（锁的实质：数据库对元素进行存取的许可证）</h2><h3 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h3><p>1.粒度：库锁，表锁，页锁，行锁  （粒度越大，并发性越差，开销越少；粒度越小，开销越大，并发越好）<br>2.强度<br>1.排他锁（独占锁，写锁）<br>某个事物T占有了元素A的排他锁，其他事物对元素A的任何锁请求都不会被允许，直到事物T释放了锁<br>事物T可以对A元素做写操作，也可以做读操作<br>2.共享锁（读锁）<br>某个事物T占有了元素A的共享锁，那么其他事物对元素A的共享锁请求可以成功，排他锁的请求会失败<br>事物T只能对元素A做读操作，不能做写操作<br>3.更新锁<br>是解决了锁升级带来的死锁问题<br>一个事物在查询数据的时候对这个元素加“更新锁”，当真正到了修改的时候将“更新锁”升级为“排他锁”，如果查询完成之后，觉得对元素不进行修改，会将锁降级了“共享锁”。<br>4.意向锁（能够解决加锁冲突）<br>T1事物对A表某一行加了共享锁，T2事物对A表加了排他锁，T2事物其实也隐含了对每一行的排他锁，这样就会造成加锁冲突<br>解决加锁层级上问题<br>分类：意向排他锁；意向共享锁<br>意向锁，在给表，页加锁的时候并不表明是排他， 还是共享，只有到了真正要执行的行数据的时候才会真正表明是“意向共享锁”或者是“意向排他锁”</p><h3 id="锁的相兼容性"><a href="#锁的相兼容性" class="headerlink" title="锁的相兼容性"></a>锁的相兼容性</h3><p>1.一个元素可以加多个共享锁<br>2.一个元素只能加一个排他锁<br>3.一个元素不能同时加共享锁和排他锁</p><h2 id="锁升级-降级"><a href="#锁升级-降级" class="headerlink" title="锁升级/降级"></a>锁升级/降级</h2><p>共享锁转成排他锁，锁升级<br>排他锁转成共享锁，锁降级</p><h2 id="两段锁协议"><a href="#两段锁协议" class="headerlink" title="两段锁协议"></a>两段锁协议</h2><p>主要解决了：冲突事物的可串行话，简化加锁算法<br>定义：增长阶段，事物只能加锁，不能释放锁；收缩阶段，事物只能解锁，不能获得锁</p><h2 id="加锁导致问题"><a href="#加锁导致问题" class="headerlink" title="加锁导致问题"></a>加锁导致问题</h2><p>问题：1.事物阻塞，等待；2.死锁<br>事物各自持有对方想要的锁，并且都在相互等待对方释放锁</p><p>解决方式：<br>1.一次封锁发，事物一次就占据所有字资源，要么全部封锁，要么全不封锁<br>2.顺序加锁，定义锁的加锁顺序，只能这么来<br>3.时间戳</p><h1 id="6、掌握数据库并发控制技术。"><a href="#6、掌握数据库并发控制技术。" class="headerlink" title="6、掌握数据库并发控制技术。"></a>6、掌握数据库并发控制技术。</h1><p><a href="https://baijiahao.baidu.com/s?id=1663478291935672795&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1663478291935672795&amp;wfr=spider&amp;for=pc</a></p><h1 id="7、了解非关系数据库背景、特点和分类。"><a href="#7、了解非关系数据库背景、特点和分类。" class="headerlink" title="7、了解非关系数据库背景、特点和分类。"></a>7、了解非关系数据库背景、特点和分类。</h1><p>NOSQL 即 Not Only SQL，可直译“不仅仅是 SQL”，这项技术正在掀起一场全新的数据库革命性运动。</p><p>数据的模式包括多种类型，如层次模型、网状模型、关系模型等，而在实际应用过程中，几乎都是在用关系模型，主流的数据库系统都是关系型的。但随着互联网 web2.0 网站的兴起，传统的关系数据库在应付 web2.0 网站，特别是超大规模和高并发的 SNS 类型的 web2.0 纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。这也就使得 NOSQL 技术进入了人们的视野。</p><p>NOSQL 的出现打破了长久以来关系型数据库与 ACID 理论大一统的局面。NOSQL 数据存储不需要固定的表结构，通常也不存在连接操作。在大数据存取上具备关系型数据库无法比拟的性能优势。</p><p>关系型数据库中的表都是存储一些格式化的数据结构，每个元组字段的组成都一样，即使不是每个元组都需要所有的字段，但数据库会为每个元组分配所有的字段，这样的结构可以便于表与表之间进行连接等操作，但从另一个角度来说它也是关系型数据库性能瓶颈的个因素。而非关系型数据库以键值对存储，它的结构不固定，每一个元组可以有不一样的字段，每个元组可以根据需要增加一些自己的键值对，这样就不会局限于固定的结构，可以减少一些时间和空间的开销。</p><p>与关系型数据库相比，NOSQL 数据库具有以下几个优点：<br>1.易扩展<br>NOSQL 数据库种类繁多，但是一个共同的特点都是去掉关系数据库的关系型特性。数据之间无关系，这样就非常容易扩展。无形之间，在架构的层面上带来了可扩展的能力<br>2.大数据量，高性能<br>NOSQL 数据库都具有非常高的读写性能，尤其在大数据量下，同样表现优秀。这得益于它的无关系性，数据库的结构简单。一般 MYSQL 使用 Query Cache，每次表一更新 Cache 就失效，它是一种大粒度的 Cache，在针对 web2.0 的交互频繁的应用，Cache 性能不高。而 NOSQL 的 Cache 是记录级的，是一种细粒度的 Cache，所以 NOSQL 在这个层面上来说性能就高很多了。<br>3.灵活的数据模型<br>NOSQL 无须事先为要存储的数据建立字段，随时可以存储自定义的数据格式。而在关系数据库里，增字段是一件非常麻烦的事情。如果是非常大数据量的表，增加字段简直就是一个梦。这点在大数据量的 web2.0 时代尤其明显。<br>4.高可用<br>NOSQL 在不太影响性能的情况，就可以方便地实现高可用的架构。比如 Cassandra  Hbase 模型，通过复制模型也能实现高可用。</p><p>当然，NOSQL 也存在很多缺点，例如，并未形成一定标准，各种产品层出不穷，内部混乱，各种项目还需时间来检验，缺乏相关专家技术的支持等。</p><p>对于非关系型数据库主要有四种数据存储类型：键值对存储（key-value），文档存储（document store），基于列的数据库（column-oriented），还有就是图形数据库（graph database）。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-数据库系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据仓库</title>
      <link href="/2021/10/15/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E5%85%AD%E3%80%81%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
      <url>/2021/10/15/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E5%85%AD%E3%80%81%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="1、了解数据挖掘的定义、功能、常用方法。"><a href="#1、了解数据挖掘的定义、功能、常用方法。" class="headerlink" title="1、了解数据挖掘的定义、功能、常用方法。"></a>1、了解数据挖掘的定义、功能、常用方法。</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>数据挖掘（Data Mining）技术是人们长期对数据库技术进行研究和开发的结果。起初各种商业数据是存储在计算机的数据库中的，然后发展到可对数据库进行査询和访问，进而发展到对数据库的即时遍历。数据挖掘使数据库技术进入了一个更高级的阶段，它不仅能对过去的数据进行查询和遍历，并且能够找出过去数据之间的潜在联系，从而促进信息的传递。现在数据挖掘技术在商业应用中已经可以马上投入使用，因为对这种技术进行支持的三种基础技术已经发展成熟，它们是海量数据搜集、强大的多处理器计算机和数据挖掘算法。</p><p>从技术角度来看，数据挖掘就是从大量的、不完全的、有噪声的、模糊的、随机的实际应用数据中，提取隐含在其中的、人们事先不知道的、但又是潜在有用的信息和知识的过程。这个定义包括好几层含义：数据源必须是真实的、大量的、含噪声的；发现的是用户感兴趣的知识；发现的知识要可接受、可理解、可运用；并不要求发现放之四海而皆准的知识，仅支持特定的发现问题。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>数据挖掘通过预测未来趋势及行为，做出前摄的、基于知识的决策。数据挖掘的目标是从数据库中发现隐含的、有意义的知识，主要有以下五类功能。</p><p>1.自动预测趋势和行为<br>数据挖掘自动在大型数据库中寻找预测性信息，以往需要进行大量手工分析的问题如今可以迅速直接由数据本身得出结论。一个典型的例子是市场预测问题，数据挖掘使用过去有关促销的数据来寻找未来投资中回报最大的用户，其他可预测的问题包括预报破产及认定对指定事件最可能做出反应的群体。</p><p>2.关联分析<br>数据关联是数据库中存在的一类重要的可被发现的知识。若两个或多个变量的取值之间存在某种规律性，就称为关联。关联可分为简单关联、时序关联、因果关联。关联分析的目的是找出数据库中隐藏的关联网。有时并不知道数据库中数据的关联函数，即使知道也是不确定的，因此关联分析生成的规则带有可信度。</p><p>3.聚类<br>数据库中的记录可被划分为一系列有意义的子集，即聚类。聚类增强了人们对客观现实的认识，是概念描述和偏差分析的先决条件。聚类技术主要包括传统的模式识别方法和数学分类学。20 世纪 80 年代初，Michalski 提出了概念聚类技术及其要点，即在划分对象时不仅要考虑对象之间的距离，还要求划分出的类具有某种内涵描述，从而避免了传统技术的某些片面性。</p><p>4.概念描述<br>概念描述就是对某类对象的内涵进行描述，并概括这类对象的有关特征。概念描述分为特征性描述和区别性描述，前者描述某类对象的共同特征，后者描述不同类对象之间的区别。生成一个类的特征性描述只涉及该类对象中所有对象的共性。生成区别性描述的方法很多，如决策树方法、遗传算法等。</p><p>5.偏差检测<br>数据库中的数据常有一些异常记录，从数据库中检测这些偏差很有意义。偏差包括很多潜在的知识，如分类中的反常实例、不满足规则的特例、观测结果与模型预测值的偏差、量值随时间的变化等。偏差检测的基本方法是，寻找观测结果与参照值之间有意义的差别。</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>常用的数据挖掘技术包括关联分析、序列分析、分类、预测、聚类分析及时间序列分析等</p><p>1.关联分析</p><p>关联分析主要用于发现不同事件之间的关联性，即一个事件发生的同时，另一个事件也经常发生。关联分析的重点在于快速发现那些有实用价值的关联发生的事件。其主要依据是事件发生的概率和条件概率应该符合一定的统计意义。</p><p>对于结构化的数据，以客户的购买习惯数据为例，利用关联分析，可以发现客户的关联购买需要。例如，一个开设储蓄账户的客户很可能同时进行债券交易和股票交易，购买纸尿裤的男顾客经常同时购买啤酒等。利用这种知识可以采取积极的营销策略，扩展客户购买的产品范围，吸引更多的客户。通过调整商品的布局便于顾客买到经常同时购买的商品，或者通过降低一种商品的价格来促进另一种商品的销售等。</p><p>对于非结构化的数据，以空间数据为例，利用关联分析，可以发现地理位置的关联性。例如，85%的靠近高速公路的大城镇与水相邻，或者发现通常与高尔夫球场相邻的对象等。</p><p>2.序列分析</p><p>序列分析技术主要用于发现一定时间间隔内接连发生的事件。这些事件构成一个序列，发现的序列应该具有普遍意义，其依据除了统计上的概率之外，还要加上时间的约束。</p><p>3.分类分析</p><p>分类分析通过分析具有类别的样本的特点，得到决定样本属于各种类别的规则或方法利用这些规则和方法对未知类别的样本分类时应该具有一定的准确度。其主要方法有基于统计学的贝叶斯方法、神经网络方法、决策树方法及支持向量机（support vector machines）等。</p><p>利用分类技术，可以根据顾客的消费水平和基本特征对顾客进行分类，找出对商家有较大利益贡献的重要客户的特征，通过对其进行个性化服务，提高他们的忠诚度。</p><p>利用分类技术，可以将大量的半结构化的文本数据，如 WEB 页面、电子邮件等进行分类。可以将图片进行分类，例如，根据已有图片的特点和类别，可以判定一幅图片属于何种类型的规则。对于空间数据，也可以进行分类分析，例如，可以根据房屋的地理位置决定房屋的档次。</p><p>4.聚类分析</p><p>聚类分析是根据物以类聚的原理，将本身没有类别的样本聚集成不同的组，并且对每个这样的组进行描述的过程。其主要依据是聚到同一个组中的样本应该彼此相似，而属于不同组的样本应该足够不相似。</p><p>仍以客户关系管理为例，利用聚类技术，根据客户的个人特征及消费数据，可以将客户群体进行细分。例如，可以得到这样的一个消费群体：女性占 91%，全部无子女、年龄在 31 岁到 40 岁占 70%，高消费级别的占 64%，买过针织品的占 91%，买过厨房用品的占 89%，买过园艺用品的占 79%。针对不同的客户群，可以实施不同的营销和服务方式，从而提高客户的满意度。</p><p>对于空间数据，根据地理位置及障碍物的存在情况可以自动进行区域划分。例如，根据分布在不同地理位置的 ATM 机的情况将居民进行区域划分，根据这一信息，可以有效地进行 ATM 机的设置规划，避免浪费，同时也避免失掉每一个商机。</p><p>对于文本数据，利用聚类技术可以根据文档的内容自动划分类别，从而便于文本的检索。</p><p>5.预测</p><p>预测与分类类似，但预测是根据样本的知特征估算某个连续类型的变量的取值的过程，而分类则只是用于判别样本所属的离散类别而已。预测常用的技术是回归分析。</p><p>6.时间序列</p><p>分析时间序列分析的是随时间而变化的事件序列，目的是预测未来发展趋势，或者寻找相似发展模式或者是发现周期性发展规律。</p><h1 id="2、了解数据仓库的产生与发展，掌握数据仓库的定义。"><a href="#2、了解数据仓库的产生与发展，掌握数据仓库的定义。" class="headerlink" title="2、了解数据仓库的产生与发展，掌握数据仓库的定义。"></a>2、了解数据仓库的产生与发展，掌握数据仓库的定义。</h1><p>传统的操作型数据库主要是面向业务的，所执行的操作基本上也是联机事务处理但随着企业规模的增长，历史积累的数据越来越多，如何利用历史数据来为未来决策服务，就显得越来越重要了，而数据仓库就是其中的一种技术。</p><p>著名的数据仓库专家 W. H. Inmon 在《Building the Data Warehouse》一书中将数据仓库定义为：数据仓库（Data Warehouse）是一个面向主题的、集成的、相对稳定的、且随时间变化的数据集合，用于支持管理决策。</p><p>1.面向主题的操作型数据库的数据组织面向事务处理任务（面向应用），各个业务系统之间各自分离，而数据仓库中的数据是按照一定的主题域进行组织的。主题是一个抽象的概念，是指用户使用数据仓库进行决策时所关心的重点方面，一个主题通常与多个操作型信息系统相关。例如，一个保险公司所进行的事务处理（应用问题）可能包括汽车保险、人寿保险、健康保险和意外保险等，而公司的主要主题范围可能是顾客、保险单、保险费和索赔等。</p><p>2.集成的在数据仓库的所有特性中，这是最重要的。面向事务处理的操作型数据库通常与某些特定的应用相关，数据库之间相互独立，并且往往是异构的。而数据仓库中的数据是在对原有分散的数据库数据抽取、清理的基础上经过系统加工、汇总和整理得到的，必须消除源数据中的不一致性，以保证数据仓库内的信息是关于整个企业的一致的全局信息。</p><p>3.相对稳定的操作型数据库中的数据通常实时更新，数据根据需要及时发生变化。数据仓库的数据主要供企业决策分析之用，所涉及的数据操作主要是数据査询，一旦某个数据进入数据仓库以后，一般情况下将被长期保留，也就是数据仓库中一般有大量的询操作但修改和删除操作很少，通常只需要定期地加载、刷新。</p><p>4.随时间变化的操作型数据库主要关心当前某一个时间段内的数据，而数据仓库中的数据通常包含历史信息，系统记录了企业从过去某一时点（如开始应用数据仓库的时点）到目前的各个阶段的信息，通过这些信息，可以对企业的发展历程和未来趋势做出定量分析和预测。数据仓库反映历史变化的属性主要表现在</p><p> (1) 数据仓库中的数据时间期限要远远长于传统操作型数据系统中的数据时间期限，传统操作型数据系统中的数据时间期限可能为数十天或数个月，数据仓库中的数据时间期限往往为数年甚至几十年；</p><p> (2) 传统操作型数据系统中的数据含有“当前值”的数据，这些数据在访问时是有效的，当然数据的当前值也能被更新，但数据仓库中的数据仅仅是一系列某一时刻（可能是传统操作型数据系统）生成的复杂的快照；</p><p> (3) 传统操作型数据系统中可能包含也可能不包含时间元素，如年、月、日、时、分、秒等，而数据仓库中一定会包含时间元素。</p><p>数据仓库虽然是从传统数据库系统发展而来，但是两者还是存在着诸多差异，如：从数据存储的内容看，数据库只存放当前值，而数据仓库则存放历史值；数据库数据的目标是面向业务操作人员的，为业务处理人员提供数据处理的支持，而数据仓库则是面向中高层管理人员的，为其提供决策支持等。</p><p><img src="/images/bigdata/3-1.png"> </p><h1 id="3、了解数据仓库与数据挖掘的联系与区别。"><a href="#3、了解数据仓库与数据挖掘的联系与区别。" class="headerlink" title="3、了解数据仓库与数据挖掘的联系与区别。"></a>3、了解数据仓库与数据挖掘的联系与区别。</h1><p>数据挖掘（Data Mining）技术是人们长期对数据库技术进行研究和开发的结果。起初各种商业数据是存储在计算机的数据库中的，然后发展到可对数据库进行查询和访问，进而发展到对数据库的即时遍历。数据挖掘使数据库技术进入了一个更高级的阶段，它不仅能对过去的数据进行查询和遍历，并且能够找出过去数据之间的潜在联系，从而促进信息的传递。现在数据挖掘技术在商业应用中已经可以马上投入使用，因为对这种技术进行支持的三种基础技术已经发展成熟，它们是海量数据搜集、强大的多处理器计算机和数据挖掘算法。</p><p>从技术角度来看，数据挖掘就是从大量的、不完全的、有噪声的、模糊的、随机的实际应用数据中，提取隐含在其中的、人们事先不知道的、但又是潜在有用的信息和知识的过程。这个定义包括好几层含义：数据源必须是真实的、大量的、含噪声的；发现的是用户感兴趣的知识；发现的知识要可接受、可理解、可运用；并不要求发现放之四海而皆准的知识，仅支持特定的发现问题。</p><h1 id="4、了解常用数据挖掘工具。"><a href="#4、了解常用数据挖掘工具。" class="headerlink" title="4、了解常用数据挖掘工具。"></a>4、了解常用数据挖掘工具。</h1><p>1.R<br>2.Oracle Data Mining<br>3.Tableau<br>4.Scrapy<br>5.Weka<br>6.八爪鱼采集器<br>7.RapidMiner<br>8.KNIME<br>9.Orange<br>10.IBM SPSS Modeler<br>11.Pentaho<br>12.NLTK</p><h1 id="5、了解数据仓库的体系结构，掌握元数据、粒度、分割的概念，了解数据仓库中的数据组织形式。"><a href="#5、了解数据仓库的体系结构，掌握元数据、粒度、分割的概念，了解数据仓库中的数据组织形式。" class="headerlink" title="5、了解数据仓库的体系结构，掌握元数据、粒度、分割的概念，了解数据仓库中的数据组织形式。"></a>5、了解数据仓库的体系结构，掌握元数据、粒度、分割的概念，了解数据仓库中的数据组织形式。</h1><p>从数据仓库的概念结构看，一般来说，数据仓库系统要包含数据源、数据准备区、数据仓库数据库、数据集市/知识挖掘库及各种管理工具和应用工具。数据仓库建立之后，首先要从数据源中抽取相关的数据到数据准备区，在数据准备区中经过净化处理后再加载到数据仓库数据库，最后根据用户的需求将数据导入数据集市和知识挖掘库中当用户使用数据仓库时，可以利用包括 OLAP (On-line Analysis Processing，联机分析处理） 在内的多种数据仓库应用工具向数据集市/知识挖掘库或数据仓库进行决策査询分析或知识挖掘。数据仓库的创建、应用可以利用各种数据仓库管理工具辅助完成。</p><h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><p>元数据（Metadata），又称中介数据、中继数据，为描述数据的数据（data about data），主要是描述数据属性（property）的信息，用来支持如指示存储位置、历史数据、资源查找、文件记录等功能。元数据算是一种电子式目录，为了达到编制目录的目的，必须在描述并收藏数据的内容或特色，进而达成协助数据检索的目的。</p><h2 id="粒度"><a href="#粒度" class="headerlink" title="粒度"></a>粒度</h2><p>粒度是数据仓库的重要概念。粒度可以分为两种形式。<br>第一种粒度是对数据仓库中的数据的综合程度高低的一个度量，它既影响数据仓库中的数据量的多少，也影响数据仓库所能回答询问的种类。在数据仓库中，多维粒度是必不可少的。由于数据仓库的主要作用是DSS分析，因而绝大多数查询都基于一定程度的综合数据之上，只有极少数查询涉及细节。所以应该将大粒度数据存储在快速设备如磁盘上，小粒度数据存储在低速设备如磁带上。<br>第二种粒度是样本数据库.它根据给定的采样率从细节数据库中抽取出一个子集，这样样本数据库中的粒度就不是根据综合程度的不同来划分，而是由采样率的高低来划分，采样粒度不同的样本数据库可以具有相同的数据综合程度。</p><h2 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h2><p>分割是数据仓库中的另一个重要概念，它的目的同样在于提高效率。它是将数据分散到各自的物理单元中去，以便能分别独立处理。有许多数据分割的标准可供参考，如日期、地域、业务领域等，也可以是其组合。一般而言，分割标准总应包括日期项，因为它十分自然而且分割均匀。</p><h2 id="数据仓库中的数据组织形式"><a href="#数据仓库中的数据组织形式" class="headerlink" title="数据仓库中的数据组织形式"></a>数据仓库中的数据组织形式</h2><p>1.简单堆积：以逐个记录为基础堆积的数据。<br>2.轮转综合数据存储：比如每天的数据综合放到一个日槽中，七天后将七个日槽加到一起，放入周槽，月底将周槽相加放入月槽等。<br>3.简单直接文件：一般以较长的时间生成，是操作型数据间隔一定时间的快照。<br>4.连续文件：将一个或者多个简单直接文件生成一种连续文件。</p><h1 id="6、了解数据仓库的数据模型，包括概念数据模型、逻辑数据模型、物理数据模型。"><a href="#6、了解数据仓库的数据模型，包括概念数据模型、逻辑数据模型、物理数据模型。" class="headerlink" title="6、了解数据仓库的数据模型，包括概念数据模型、逻辑数据模型、物理数据模型。"></a>6、了解数据仓库的数据模型，包括概念数据模型、逻辑数据模型、物理数据模型。</h1><p><img src="/images/bigdata/3-2.png"></p><p>1．数据仓库的参考框架<br>数据仓库的参考框架由数据仓库基本功能层、数据仓库管理层和数据仓库环境支持层组成。</p><p><img src="/images/bigdata/3-3.png"></p><p>(1) 数据仓库基本功能层。数据仓库的基本功能层部分包含数据源、数据准备区、数据仓库结构、数据集市或知识挖掘库，以及存取和使用部分。本层的功能是从数据源抽取数据，对所抽取的数据进行筛选、清理，将处理过的数据导入或者说加载到数据仓库中，根据用户的需求设立数据集市，完成数据仓库的复杂査询、决策分析和知识的挖掘等。<br>(2) 数据仓库管理层。数据仓库的正常运行除了需要数据仓库功能层提供的基本功能外，还需要对这些基本功能进行管理与支持的结构框架。数据仓库管理层由数据仓库的数据管理和数据仓库的元数据管理组成。<br>数据仓库的数据管理层包含数据抽取、新数据需求与查询管理，数据加载、存储、刷新和更新系统，安全性与用户授权管理系统及数据归档、恢复及净化系统等四部分。<br>(3) 数据仓库的环境支持层。数据仓库的环境支持层由数据仓库数据传输层和数据仓库基础层组成。数据仓库中不同结构之间的数据传输需要数据仓库的传输层来完成。<br>数据仓库的传输层包含数据传输和传送网络、客户/服务器代理和中间件、复制系统及数据传输层的安全保障系统。</p><p>2．数据仓库的架构大众观点的数据仓库的架构如图所示。<br><img src="/images/bigdata/3-4.png"><br>(1) 数据源。是数据仓库系统的基础，是整个系统的数据源泉。通常包括企业内部信息和外部信息。内部信息包括存放于 RDBMS（关系型 DBMS）中的各种业务处理数据和各类文档数据。外部信息包括各类法律法规、市场信息和竞争对手的信息等。<br>(2) 数据的存储与管理。是整个数据仓库系统的核心。数据仓库的真正关键是数据的存储和管理。数据仓库的组织管理方式决定了它有别于传统数据库，同时也决定了其对外部数据的表现形式。要决定采用什么产品和技术来建立数据仓库的核心，则需要从数据仓库的技术特点着手分析。针对现有各业务系统的数据，进行抽取、清理，并有效集成，按照主题进行组织。数据仓库按照数据的覆盖范围可以分为企业级数据仓库和部门级数据仓库（通常称为数据集市）。<br>(3) OLAP 服务器。对分析需要的数据进行有效集成，按多维模型予以组织，以便进行多角度、多层次的分析，并发现趋势。其具体实现可以分为：基于关系数据库的OLAP实现（ROLAP）、基于多维数据组织的OLAP实现（MOLAP） 和 基于混合数据组织的OLAP实现（HOLAP）。 ROLAP 基本数据和聚合数据均存放在 RDBMS 之中；MOLAP 基本数据和聚合数据均存放于多维数据库中；HOLAP 基本数据存放于 RDBMS 之中，聚合数据存放于多维数据库中。<br>(4) 前端工具。主要包括各种报表工具、査询工具、数据分析工具、数据挖掘工具及各种基于数据仓库或数据集市的应用开发工具。其中数据分析工具主要针对 OLAP 服务器，报表工具、数据挖掘工具主要针对数据仓库。</p><h2 id="1-概念数据模型（CDM）（定义实体的概念以及实体之间的联系）"><a href="#1-概念数据模型（CDM）（定义实体的概念以及实体之间的联系）" class="headerlink" title="1.概念数据模型（CDM）（定义实体的概念以及实体之间的联系）"></a>1.概念数据模型（CDM）（定义实体的概念以及实体之间的联系）</h2><p>概念数据模型是现实世界到信息世界的第一层抽象，主要是在高水平和面向业务的角度对信息的一种描述，通常作为业务人员和技术人员之间沟通的桥梁。作为现实世界的概念化结构，这种数据模型使得数据库的设计人员在最初的数据库设计阶段将精力集中在数据之间的联系上，而不用同时关注数据的底层细节（如所用的计算机系统的特性以及数据库管理系统—DBMS的特性）。<br>概念数据模型主要的贡献在于分析数据之间的联系，它是用户对数据存储的一种高度抽象，反应的是用户的一种业务层面的综合信息需求。<br>在这个阶段一般会形成整个数据模型或者是软件系统中的实体的概念以及实体之间的联系，为构建逻辑数据模型奠定基础。下图中描述了现实世界和信息世界以及最终转换成计算机世界信息的转换流程。<br><img src="/images/bigdata/3-5.png"><br>设计概念数据模型的主要工具是E-R图，扩展的E-R图。</p><h2 id="2-逻辑数据模型（LDM）（定义实体的属性）"><a href="#2-逻辑数据模型（LDM）（定义实体的属性）" class="headerlink" title="2.逻辑数据模型（LDM）（定义实体的属性）"></a>2.逻辑数据模型（LDM）（定义实体的属性）</h2><p>逻辑数据模型是对概念数据模型进一步具体化，在概念数据模型定义实体的基础上定义了各个实体的属性，是用户从数据库的角度能够看到的数据的模型，是所使用的数据库管理系统（Database Management System，DBMS）所支持的数据类型（网状数据模型、层次数据模型、关系数据模型）。这种数据模型架起了用户和系统之间的桥梁，既要面向用户，同时也考虑到了所用的DBMS所支持的特性。<br>逻辑数据模型反映了系统分析设计人员针对数据在特定的存储系统（如MySQL）的观点，是对概念数据模型的进一步细化和划分。逻辑数据模型是根据业务之间的规则产生的，是关于业务对象、业务对象数据以及业务对象彼此之间关系的蓝图。<br>逻辑数据模型的内容包括所有的实体、实体的属性、实体之间的关系以及每个实体的主键、实体的外键（用于维护数据完整性）。其主要目标是尽可能详细的描述数据，但是并不涉及这些数据的具体物理实现。逻辑数据模型不仅会最终影响数据库的设计方向，并最终会影响到数据库的性能（如主键设计、外键等都会最终影响数据库的查询性能）。<br>逻辑数据模型是开发物理数据库的完整文档，逻辑数据模型主要采用的是层次模型、网状模型、关系模型，其中最常用的是关系模型，对应的数据库称之为关系型数据库，如MySQL。</p><h2 id="3-物理数据模型（PDM）（数据库设计）"><a href="#3-物理数据模型（PDM）（数据库设计）" class="headerlink" title="3.物理数据模型（PDM）（数据库设计）"></a>3.物理数据模型（PDM）（数据库设计）</h2><p>物理数据模型，又称为物理模型，是概念数据模型和逻辑数据模型在计算机中的具体表示。该模型描述了数据在物理存储介质上的具体组织结构，不但与具体的数据库管理系统相关，同时还与具体的操作系统以及硬件有关，但是很多工作都是由DBMS自动完成的，用户所要做的工作其实就是添加自己的索引等结构即可。<br>物理数据模型是在逻辑数据模型的基础上，综合考虑各种存储条件的限制，进行数据库的设计，从而真正实现数据在数据库中的存放。其主要的工作是根据逻辑数据模型中的实体、属性、联系转换成对应的物理模型中的元素，包括定义所有的表和列，定义外键以维持表之间的联系等，具体例子如下：<br><img src="/images/bigdata/3-6.png"></p><h1 id="7、掌握联机分析处理（OLAP）技术的概念、特征。"><a href="#7、掌握联机分析处理（OLAP）技术的概念、特征。" class="headerlink" title="7、掌握联机分析处理（OLAP）技术的概念、特征。"></a>7、掌握联机分析处理（OLAP）技术的概念、特征。</h1><p>联机分析处理OLAP是一种软件技术，它使分析人员能够迅速、一致、交互地从各个方面观察信息，以达到深入理解数据的目的。</p><p>它具有FASMI(Fast Analysis of Shared Multidimensional Information)，即共享多维信息的快速分析的特征。<br>F是快速性(Fast)，指系统能在数秒内对用户的多数分析要求做出反应；<br>A是可分析性(Analysis)，指用户无需编程就可以定义新的专门计算，将其作为分析的一部分，并以用户所希望的方式给出报告；<br>M是多维性(Multi—dimensional)，指提供对数据分析的多维视图和分析；<br>I是信息性(Information)，指能及时获得信息，并且管理大容量信息。</p><h1 id="8、掌握-OLAP-中的多维分析操作，包括钻取、切片和切块、旋转。"><a href="#8、掌握-OLAP-中的多维分析操作，包括钻取、切片和切块、旋转。" class="headerlink" title="8、掌握 OLAP 中的多维分析操作，包括钻取、切片和切块、旋转。"></a>8、掌握 OLAP 中的多维分析操作，包括钻取、切片和切块、旋转。</h1><p>(1)切片和切块(Slice and Dice)<br>切片和切块是在维上做投影操作。<br>切片就是在多维数据上选定一个二维子集的操作，即在某两个维上取一定区间的维成员或全部维成员，而在其余的维上选定一个维成员的操作。<br>维是观察数据的角度，那么切片的作用或结果就是舍弃一些观察角度，使人们能在两个维上集中观察数据。因为人的空间想象能力毕竟有限，一般很难想象四维以上的空间结构，所以对于维数较多的多维数据空间，数据切片是十分有意义的．<br>(2)钻取(Drill)<br>钻取有向下钻取(Drill Down)和向上钻取(Drill up)操作。向下钻取是使用户在多层数据中展现渐增的细节层次，获得更多的细节性数据。向上钻取以渐增概括方式汇总数据(例如，从周到季度，再到年度)。<br>(3)旋转(Pivoting)<br>通过旋转可以得到不同视角的数据。旋转操作相当于在平面内将坐标轴旋转。例如，旋转可能包含了交换行和列，或是把某一个行维移到列维中去，或是把页面显示中的一个维和页面外的维进行交换(令其成为新的行或列中的一个)。</p><h1 id="9、了解多维联机分析处理、关系联机分析处理、MOLAP-和-ROLAP-的差异、混合型联机分析处理；OLAP-的衡量标准。"><a href="#9、了解多维联机分析处理、关系联机分析处理、MOLAP-和-ROLAP-的差异、混合型联机分析处理；OLAP-的衡量标准。" class="headerlink" title="9、了解多维联机分析处理、关系联机分析处理、MOLAP 和 ROLAP 的差异、混合型联机分析处理；OLAP 的衡量标准。"></a>9、了解多维联机分析处理、关系联机分析处理、MOLAP 和 ROLAP 的差异、混合型联机分析处理；OLAP 的衡量标准。</h1><p>数据仓库与OLAP的关系是互补的，现代OLAP系统一般以数据仓库作为基础，即从数据仓库中抽取详细数据的一个子集并经过必要的聚集存储到OLAP存储器中供前端分析工具读取。<br>OLAP系统按照其存储器的数据存储格式可以分为关系OLAP（RelationalOLAP，简称ROLAP）、多维OLAP（MultidimensionalOLAP，简称MOLAP）和混合型OLAP（HybridOLAP，简称HOLAP）三种类型。</p><h2 id="ROLAP"><a href="#ROLAP" class="headerlink" title="ROLAP"></a>ROLAP</h2><p>ROLAP将分析用的多维数据存储在关系数据库中并根据应用的需要有选择的定义一批实视图作为表也存储在关系数据库中。不必要将每一个SQL查询都作为实视图保存，只定义那些应用频率比较高、计算工作量比较大的查询作为实视图。对每个针对OLAP服务器的查询，优先利用已经计算好的实视图来生成查询结果以提高查询效率。同时用作ROLAP存储器的RDBMS也针对OLAP作相应的优化，比如并行存储、并行查询、并行数据管理、基于成本的查询优化、位图索引、SQL的OLAP扩展(cube,rollup)等等。</p><h2 id="MOLAP"><a href="#MOLAP" class="headerlink" title="MOLAP"></a>MOLAP</h2><p>MOLAP将OLAP分析所用到的多维数据物理上存储为多维数组的形式，形成“立方体”的结构。维的属性值被映射成多维数组的下标值或下标的范围，而总结数据作为多维数组的值存储在数组的单元中。由于MOLAP采用了新的存储结构，从物理层实现起，因此又称为物理OLAP（PhysicalOLAP）；而ROLAP主要通过一些软件工具或中间软件实现，物理层仍采用关系数据库的存储结构，因此称为虚拟OLAP（VirtualOLAP）。</p><h2 id="HOLAP"><a href="#HOLAP" class="headerlink" title="HOLAP"></a>HOLAP</h2><p>由于MOLAP和ROLAP有着各自的优点和缺点,且它们的结构迥然不同，这给分析人员设计OLAP结构提出了难题。为此一个新的OLAP结构——混合型OLAP（HOLAP）被提出，它能把MOLAP和ROLAP两种结构的优点结合起来。迄今为止，对HOLAP还没有一个正式的定义。但很明显，HOLAP结构不应该是MOLAP与ROLAP结构的简单组合，而是这两种结构技术优点的有机结合，能满足用户各种复杂的分析请求。</p><h1 id="10、了解数据预处理的原因、数据预处理的方法。"><a href="#10、了解数据预处理的原因、数据预处理的方法。" class="headerlink" title="10、了解数据预处理的原因、数据预处理的方法。"></a>10、了解数据预处理的原因、数据预处理的方法。</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>（1）现实世界的数据是肮脏的（不完整，含噪声，不一致）<br>（2）没有高质量的数据，就没有高质量的挖掘结果（高质量的决策必须依赖于高质量的数据；数据仓库需要对高质量的数据进行一致地集成）<br>（3）原始数据中存在的问题：<br>不一致 —— 数据内含出现不一致情况<br>重复<br>不完整 —— 感兴趣的属性没有<br>含噪声 —— 数据中存在着错误、或异常（偏离期望值）的数据<br>高维度</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>（1）数据清洗 —— 去噪声和无关数据<br>（2）数据集成 —— 将多个数据源中的数据结合起来存放在一个一致的数据存储中<br>（3）数据变换 —— 把原始数据转换成为适合数据挖掘的形式<br>（4）数据归约 —— 主要方法包括：数据立方体聚集，维度归约，数据压缩，数值归约，离散化和概念分层等。</p><h1 id="11、掌握数据清洗、数据集成和变换、数据归约的概念与方法，具有应用上述方法进行数据清洗的能力。"><a href="#11、掌握数据清洗、数据集成和变换、数据归约的概念与方法，具有应用上述方法进行数据清洗的能力。" class="headerlink" title="11、掌握数据清洗、数据集成和变换、数据归约的概念与方法，具有应用上述方法进行数据清洗的能力。"></a>11、掌握数据清洗、数据集成和变换、数据归约的概念与方法，具有应用上述方法进行数据清洗的能力。</h1><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><p>1）处理缺失值方法：<br>a.忽略元祖，挖掘任务涉及分类任务中如果缺少类标号时通常这样做<br>b.人工填写缺失值，量大时行不通<br>c.使用一个全局常量填充缺失值，简单但不可靠<br>d.使用属性的均值填充缺失值<br>e.使用与给定元组属同一类的所有样本的属性均值<br>f.使用最有可能的值填充缺失值，可以用回归，使用贝叶斯形式化的基于推理的工具或决策树归纳确定，是流行的做法。<br>2）数据光滑技术：噪声是被测量的变量的随机误差或方差<br>a.分箱，分箱方法通过考察数据的“近邻”（即周围的值）来光滑有序数据的值，有序值分布到一些“桶”或箱中。由于分箱方法考察近邻的值，因此进行局部光滑。几种分箱技术：用箱均值光滑、用箱边界光滑、用箱中位数光滑。<br>b.回归：可以用一个函数（如回归函数）拟合数据来光滑数据。线性回归涉及找出拟合两个属性（或变量）的“最佳”线，是的一个属性可以用来预测另一个。多元线性回归是线性回归的扩展，其中涉及的属性多于两个，并且数据拟合到一个多维曲面。<br>c.聚类：通过聚类检测离群点<br>3）数据清理作为一个过程的方法：过程的第一步是偏差检测，有大量商业工具帮助我们进行偏差检测，数据清洗工具、数据审计工具、数据迁移工具、ETL工具。新的数据清理方法强调加强交互性，如Potter’s Wheel，集成了偏差检测和数据变换。</p><h2 id="数据集成和变换"><a href="#数据集成和变换" class="headerlink" title="数据集成和变换"></a>数据集成和变换</h2><p>1）数据集成：数据分析任务多半涉及数据集成。数据集成合并多个数据源中的数据，存放在一个一致的数据存储（如数据仓库）中。这些数据源可能包括多个数据库、数据立方体或一般文件。<br>数据集成有三个主要问题：<br>a.模式集成和对象匹配，实体识别问题：来自多个信息源的现实世界的等价实体如何才能匹配？元数据可以帮助避免模式集成的错误。<br>b.冗余：有些冗余可以被相关分析检测到。通过计算属性A,B的相关系数（皮尔逊积矩系数）来判断是否冗余；对于离散数据，可通过卡方检验来判断两个属性A和B之间的相关联系。<br>c.数据值冲突的检测与处理<br>2）数据变换：将数据转换或统一成适合于挖掘的形式。涉及如下内容：<br>a.光滑：去掉数据的噪声，包括分箱，回归和聚类<br>b.聚集：对数据进行汇总或聚集。这一步通常用来为多粒度数据分析构造数据立方体<br>c.数据泛化：使用概念分层，用高层概念替换底层或“原始”数据。<br>d.规范化：又称为归一化，feature scaling特征缩放。将属性数据按比例缩放，使之落入一个小的特定区间。规范化方法：<br>    1.最小-最大规范化：v’=[(v-min)/(max-min)]*(new_max-new_min)+new_min<br>    2.z-score规范化（或零均值规范化）：v’=(v-属性A的均值E)/属性A的标准差∽<br>    3.小数定标规范化：v’=v/10的j次方，j是使Max(|v’|)&lt;1的最小整数<br>e.属性构造（或特征构造）：可以构造新的属性并添加到属性集中，以帮助挖掘过程。</p><h2 id="数据归约"><a href="#数据归约" class="headerlink" title="数据归约"></a>数据归约</h2><p>数据集可能非常大！面对海量数据进行复杂的数据分析和挖掘将需要很长的时间。数据归约技术可以用来得到数据集的归约表示，它小很多，但仍接近保持原数据的完整性。数据归约策略如下：<br>1）数据立方体聚集：聚集操作用于数据立方体结构中的数据。数据立方体存储多维聚集信息。<br>2）属性子集选择，参见文本分类概述中特征选择算法<br>3）维度归约：使用数据编码或变换，以便得到原数据的归约或“压缩”表示。归约分为无损的和有损的。有效的有损维归约方法为：小波变换和主成分分析<br>4）数值归约：通过选择替代的、‘较小的’数据表示形式来减少数据量<br>5）离散化和概念分层产生</p><h1 id="12、了解关联规则的概念和分类。"><a href="#12、了解关联规则的概念和分类。" class="headerlink" title="12、了解关联规则的概念和分类。"></a>12、了解关联规则的概念和分类。</h1><p>关联规则是形如X→Y的蕴涵式，其中， X和Y分别称为关联规则的先导(antecedent或left-hand-side, LHS)和后继(consequent或right-hand-side, RHS) 。其中，关联规则XY，存在支持度和信任度。</p><h2 id="基于规则中处理的变量的类别"><a href="#基于规则中处理的变量的类别" class="headerlink" title="基于规则中处理的变量的类别"></a>基于规则中处理的变量的类别</h2><p>关联规则处理的变量可以分为布尔型和数值型。布尔型关联规则处理的值都是离散的、种类化的，它显示了这些变量之间的关系；而数值型关联规则可以和多维关联或多层关联规则结合起来，对数值型字段进行处理，将其进行动态的分割，或者直接对原始的数据进行处理，当然数值型关联规则中也可以包含种类变量。例如：性别=“女”=&gt;职业=“秘书” ，是布尔型关联规则；性别=“女”=&gt;avg（收入）=2300，涉及的收入是数值类型，所以是一个数值型关联规则。</p><h2 id="基于规则中数据的抽象层次"><a href="#基于规则中数据的抽象层次" class="headerlink" title="基于规则中数据的抽象层次"></a>基于规则中数据的抽象层次</h2><p>基于规则中数据的抽象层次，可以分为单层关联规则和多层关联规则。在单层的关联规则中，所有的变量都没有考虑到现实的数据是具有多个不同的层次的；而在多层的关联规则中，对数据的多层性已经进行了充分的考虑。例如：IBM台式机=&gt;Sony打印机，是一个细节数据上的单层关联规则；台式机=&gt;Sony打印机，是一个较高层次和细节层次之间的多层关联规则。</p><h2 id="基于规则中涉及到的数据的维数"><a href="#基于规则中涉及到的数据的维数" class="headerlink" title="基于规则中涉及到的数据的维数"></a>基于规则中涉及到的数据的维数</h2><p>关联规则中的数据，可以分为单维的和多维的。在单维的关联规则中，我们只涉及到数据的一个维，如用户购买的物品；而在多维的关联规则中，要处理的数据将会涉及多个维。换成另一句话，单维关联规则是处理单个属性中的一些关系；多维关联规则是处理各个属性之间的某些关系。例如：啤酒=&gt;尿布，这条规则只涉及到用户的购买的物品；性别=“女”=&gt;职业=“秘书”，这条规则就涉及到两个字段的信息，是两个维上的一条关联规则。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-数据库系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息化基础知识（一）电子政务</title>
      <link href="/2021/10/14/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%89%E3%80%81%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89%E7%94%B5%E5%AD%90%E6%94%BF%E5%8A%A1/"/>
      <url>/2021/10/14/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%89%E3%80%81%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89%E7%94%B5%E5%AD%90%E6%94%BF%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="1、电子政务的概念、内容和技术形式"><a href="#1、电子政务的概念、内容和技术形式" class="headerlink" title="1、电子政务的概念、内容和技术形式"></a>1、电子政务的概念、内容和技术形式</h1><h2 id="（1）掌握电子政务的概念"><a href="#（1）掌握电子政务的概念" class="headerlink" title="（1）掌握电子政务的概念"></a>（1）掌握电子政务的概念</h2><p>电子政务实质上是对现有的、工业时代形成的政府形态的一种改造，即利用信息技术和 其他相关技术，来构造更适合信息时代的政府组织结构和运行方式。因此，电子政务在概念、 内容和技术形式上都区别于现有政务。</p><p>电子政务实质上是对现有的、工业时代形成的政府形态的一种改造，即利用信息技术和 其他相关技术，来构造更适合信息时代的政府组织结构和运行方式。现有的政府组织形态是 工业革命的产物，与工业化的行政管理的需求和技术经济环境相适应，已经存在了两百年以 上。随着网络时代和网络经济的来临，管理正由传统的金字塔模式走向网络模式。政府的组 织形态也必然由金字塔式的垂直结构向网状结构转变，从而减少管理的层次，以各种形式通 过网络与企业和公民建立直接的联系。因此，电子政务的发展过程实质上是对原有的政府形 态进行信息化改造的过程，通过不断的摸索和实践，最终构造出一个与信息时代相适应的政 府形态。</p><h2 id="（2）熟悉电子政务的内容"><a href="#（2）熟悉电子政务的内容" class="headerlink" title="（2）熟悉电子政务的内容"></a>（2）熟悉电子政务的内容</h2><p>在社会中，与电子政务相关的行为主体主要有三个，即：政府、企（事）业单位及公民。 因此，政府的业务活动也主要围绕着这三个行为主体展开，即包括政府与政府之间的互动； 政府与企（事）业单位，尤其是与企业的互动；政府与公民的互动。在信息化的社会中，这 三个行为主体在数字世界的映射，构成了电子政务、电子商务和电子社区三个信息化的主要 领域。电子商务在经历了一个发展热潮之后，目前正在向一个新的、更扎实的阶段发展；电 子政务则是当前全球关注的热点，正在形成一个发展的热潮。</p><h2 id="（3）熟悉电子政务的技术形式"><a href="#（3）熟悉电子政务的技术形式" class="headerlink" title="（3）熟悉电子政务的技术形式"></a>（3）熟悉电子政务的技术形式</h2><p>电子政务的技术模式由网络管理模式、信息资源管理模式和应用开发模式，以及网络安全、 标准化等构成。电子政务通过一定的技术模式将现有的和即将建设的各个政府网络和应用系 统联结起来，统一标准和规范，做到互联互通，成为一个统一的政府信息化平台。</p><p>网络管理模式<br>电子政务在网络管理上分为政府专网和通用网络两部分，包括专用网络、内部网络和外部网络。</p><p>信息资源管理模式<br>信息资源是电子政务的处理对象，也是电子政务的基础。采用何种模式进行信息资源管理，关系到电子政务的成败。政府部门的信息从内容上大致可以分成两类：一类是来自公文系统的文档型信息，另一类是来自数据处理系统的结构化信息。电子政务可以选用的信息资源管理模式有多种，目前主要有两种，即元数据管理模式和XML数据管理模式。</p><p>应用开发模式<br>应用开发是电子政务最关键的一环，也是体现电子政务价值的所在。电子政务的应用开发模式主要有：G2E/G2B/G2G/G2C。</p><p>电子政务的安全体系<br>电子政务系统中的重要组成部分就是安全体系。电子政务的安全体系包括物理安全、网络安全、信息安全及安全管理等方面。</p><p>电子政务的标准化<br>电子政务是一项系统工程，是国家信息化建设的重要领域，而标准化是电子政务重要的支撑手段。国家信息化领导小组发布的《关于我国电子政务建设指导意见》规定了电子政务建设的指导思想和原则：统一规划，加强领导；需求主导，突出重点；整合资源，拉动产业；统一标准，保障安全。在阐释“统一标准，保障安全”原则时指出，“加快制定统一的电子政务标准规范，大力推进统一标准的贯彻落实。要正确处理发展与安全的关系，综合平衡成本和效益，一手抓电子政务建设，一手抓网络与信息安全，制定并完善电子政务网络与信息安全保障体系”。</p><h1 id="2、中国政府信息化的策略和历程"><a href="#2、中国政府信息化的策略和历程" class="headerlink" title="2、中国政府信息化的策略和历程"></a>2、中国政府信息化的策略和历程</h1><p>1.我国政府信息化最早起始于 20 世纪 80 年代末期“中国国家经济信息系统”的建设和 运行。<br>2.到了 20 世纪 90 年代，随着信息技术的飞速发展和广泛应用，我国政府信息化也得到 了长足的发展，其中最主要的成果有：<br>一是以“金”字头为代表的多项信息工程项目取得了突破性进展。<br>二是政府上网工程初具规模。在“金”字系统工程取得重大进展的同时，从 1999 年起， 又及时地推出包含“三金”在内的“十二金”工程。<br>三是在“十二金”工程的带动下，各级政府都加强了电子政务的软件和硬件两方面的基 础建设，建成了覆盖广泛的“两网、一站、四库”：“两网”是指政务内网和政务外网；“一站”，是政府门户网站；“四库”，即建立人口、法人单位、空间地理和自然资源、宏观经济 4 个基础数据库。<br>四是在中央的大力倡导下，各地在推动政府信息化方面健康发展，并在全国普遍实行了 政府上网工程。到目前为止，全国绝大多数县级以上的政府都实现了电子政务。一些地区、 部门在政府信息化方面已取得了显著成效。</p><h1 id="3、电子政务应用模式"><a href="#3、电子政务应用模式" class="headerlink" title="3、电子政务应用模式"></a>3、电子政务应用模式</h1><h2 id="（1）熟悉政府对政府（G2G）模式"><a href="#（1）熟悉政府对政府（G2G）模式" class="headerlink" title="（1）熟悉政府对政府（G2G）模式"></a>（1）熟悉政府对政府（G2G）模式</h2><p>政府间的信息交换有助于不同部 门间的协同办公，可以解决信息孤岛的问题，使目前很难实现的信息共享、交换、协同工作 等问题得以较好的解决。</p><h2 id="（2）熟悉政府对企业（G2B）模式"><a href="#（2）熟悉政府对企业（G2B）模式" class="headerlink" title="（2）熟悉政府对企业（G2B）模式"></a>（2）熟悉政府对企业（G2B）模式</h2><p>利用互联网等网络手段为经济活动提供信 息化支持，包括：电子商务、电子税务、电子金融、电子海关等基础设施服务。</p><h2 id="（3）熟悉政府对公众（G2C）模式"><a href="#（3）熟悉政府对公众（G2C）模式" class="headerlink" title="（3）熟悉政府对公众（G2C）模式"></a>（3）熟悉政府对公众（G2C）模式</h2><p>利用公共网络为公众提供广泛的信息服务， 包括卫生、教育、法律、税务、金融等一系列的信息服务。</p><h2 id="（4）熟悉政府对公务员（G2E）模式"><a href="#（4）熟悉政府对公务员（G2E）模式" class="headerlink" title="（4）熟悉政府对公务员（G2E）模式"></a>（4）熟悉政府对公务员（G2E）模式</h2><p>利用 Intranet 建立有效的行政办公体系， 为提高政府工作效率服务。内容包括：电子公文、电子邮寄、电子规划管理、电子人事管理 等。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-信息化基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息化基础知识（二）电子商务</title>
      <link href="/2021/10/14/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%89%E3%80%81%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1/"/>
      <url>/2021/10/14/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%89%E3%80%81%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="1、电子商务的概念及基本特征"><a href="#1、电子商务的概念及基本特征" class="headerlink" title="1、电子商务的概念及基本特征"></a>1、电子商务的概念及基本特征</h1><h2 id="（1）熟悉电子商务的概念"><a href="#（1）熟悉电子商务的概念" class="headerlink" title="（1）熟悉电子商务的概念"></a>（1）熟悉电子商务的概念</h2><p>电子商务（Electronic Commerce，EC）是指买卖双方利用现代开放的 Internet，按照一 定的标准所进行的各类商业活动。主要包括网上购物、企业之间的网上交易和在线电子支付 等新型的商业运营模式。产品可以是实体化的，如计算机、汽车、电视，也可以是数字化的， 如新闻、影像、软件；也可以直接提供服务，如安排旅游、远程教育等。</p><h2 id="（2）熟悉电子商务的基本特征"><a href="#（2）熟悉电子商务的基本特征" class="headerlink" title="（2）熟悉电子商务的基本特征"></a>（2）熟悉电子商务的基本特征</h2><p>电子商务分三个方面：即电子商情广告、电子选购和交易及电子交易凭证的交换、电子支付与结算以及网上售后服务等。<br>参与电子商务的实体有四类：顾客（个人消费者或集团购买）、商户（包括销售商、制造商、储运商）、银行（包括发卡行、收单行）及认证中心。</p><h1 id="2、电子商务的类型"><a href="#2、电子商务的类型" class="headerlink" title="2、电子商务的类型"></a>2、电子商务的类型</h1><h2 id="（1）熟悉企业与企业之间的电子商务（B2B）模式"><a href="#（1）熟悉企业与企业之间的电子商务（B2B）模式" class="headerlink" title="（1）熟悉企业与企业之间的电子商务（B2B）模式"></a>（1）熟悉企业与企业之间的电子商务（B2B）模式</h2><p>两个或若干个有业务联 系的公司通过 B2B 模式彼此连接起来，形成网上的虚拟企业圈。例如，企业利用计算机网 络向它的供应商进行采购，或利用计算机网络进行付款等。B2B 具有很强的实时商务处理 能力，使企业能以一种安全、可靠、简便、快捷的方式进行企业间的商务联系活动。</p><h2 id="（2）熟悉商业企业与消费者之间的电子商务（B2C）模式"><a href="#（2）熟悉商业企业与消费者之间的电子商务（B2C）模式" class="headerlink" title="（2）熟悉商业企业与消费者之间的电子商务（B2C）模式"></a>（2）熟悉商业企业与消费者之间的电子商务（B2C）模式</h2><p>企业与消费者之间的电子商务是人们最熟悉的一种电子商务类型。网上商店利用 Internet 提供的双向交互通信，完成网上购物的过程。这类电子商务主要是借助于 Internet 所开展的在线式销售活动。最近几年随着 Internet 的发展，这类电子商务的发展异军突起。例如，在 Internet 上目前 已出现许多大型超级市场，所出售的产品一应俱全，从食品、饮料到电脑、汽车等，几乎包 括了所有的消费品。由于这种模式节省了客户和企业双方的时间和空间，大大提高了交易效率，节省了各类不必要的开支，因而这类模式得到了人们的认同，获得了迅速的发展。</p><h2 id="（3）熟悉消费者与消费者之间的电子商务（C2C）模式"><a href="#（3）熟悉消费者与消费者之间的电子商务（C2C）模式" class="headerlink" title="（3）熟悉消费者与消费者之间的电子商务（C2C）模式"></a>（3）熟悉消费者与消费者之间的电子商务（C2C）模式</h2><p>C2C 电子商务平 台就是通过为买卖双方提供一个在线交易平台，使卖方可以主动提供商品上网拍卖，而买方 可以自行选择商品进行竞价。</p><h2 id="（4）熟悉电子商务与线下实体店有机结合向消费者提供商品和服务（O2O）-模式"><a href="#（4）熟悉电子商务与线下实体店有机结合向消费者提供商品和服务（O2O）-模式" class="headerlink" title="（4）熟悉电子商务与线下实体店有机结合向消费者提供商品和服务（O2O） 模式"></a>（4）熟悉电子商务与线下实体店有机结合向消费者提供商品和服务（O2O） 模式</h2><p>O2O是指将线下的商务机会与互联 网结合，让互联网成为线下交易的平台，这个概念最早来源于美国。O2O 的概念非常广泛， 既可涉及到线上，又可涉及到线下,可以称为 O2O。如团购就属于一种典型的 O2O。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-信息化基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息化基础知识（四）项目管理</title>
      <link href="/2021/10/14/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%89%E3%80%81%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%9B%9B%EF%BC%89%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
      <url>/2021/10/14/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%89%E3%80%81%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%9B%9B%EF%BC%89%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1、项目管理的理论与体系"><a href="#1、项目管理的理论与体系" class="headerlink" title="1、项目管理的理论与体系"></a>1、项目管理的理论与体系</h1><h2 id="（1）了解项目管理基础知识"><a href="#（1）了解项目管理基础知识" class="headerlink" title="（1）了解项目管理基础知识"></a>（1）了解项目管理基础知识</h2><p>项目管理是项目的管理者，在有限的资源约束下，运用系统的观点、方法和理论，对项目涉及的全部工作进行有效地管理。即从项目的投资决策开始到项目结束的全过程进行计划、组织、指挥、协调、控制和评价，以实现项目的目标。</p><h2 id="（2）掌握项目管理知识体系的构成"><a href="#（2）掌握项目管理知识体系的构成" class="headerlink" title="（2）掌握项目管理知识体系的构成"></a>（2）掌握项目管理知识体系的构成</h2><p>1、项目范围管理<br>是为了实现项目的目标，对项目的工作内容进行控制的管理过程。它包括范围的界定，范围的规划，范围的调整等。</p><p>2、项目时间管理<br>是为了确保项目最终的按时完成的一系列管理过程。它包括具体活动的界定，如：活动排序、时间估计、进度安排及时间控制等项工作。</p><p>3、项目成本管理<br>是为了保证完成项目的实际成本、费用不超过预算成本、费用的管理过程。它包括资源的配置，成本、费用的预算以及费用的控制等项工作。</p><p>4、项目质量管理<br>是为了确保项目达到客户所规定的质量要求所实施的一系列管理过程。它包括质量规划，质量控制和质量保证等。</p><p>5、项目人力资源管理<br>是为了保证所有项目关系人的能力和积极性都得到最有效地发挥和利用所做的一系列管理措施。它包括组织的规划、团队的建设、人员的选聘和项目的班子建设等一系列工作。</p><p>6、项目沟通管理<br>是为了确保项目的信息的合理收集和传输所需要实施的一系列措施，它包括沟通规划，信息传输和进度报告等。</p><p>7、项目风险管理<br>涉及项目可能遇到各种不确定因素。它包括风险识别，风险量化，制订对策和风险控制等。</p><p>8、项目采购管理<br>是为了从项目实施组织之外获得所需资源或服务所采取的一系列管理措施。它包括采购计划，采购与征购，资源的选择以及合同的管理等项目工作。</p><p>9、项目集成管理<br>是指为确保项目各项工作能够有机地协调和配合所展开的综合性和全局性的项目管理工作和过程。它包括项目集成计划的制定，项目集成计划的实施，项目变动的总体控制等。</p><h2 id="（3）了解-IPMP-PMP、PRINCE2-等项目管理认证体系"><a href="#（3）了解-IPMP-PMP、PRINCE2-等项目管理认证体系" class="headerlink" title="（3）了解 IPMP/PMP、PRINCE2 等项目管理认证体系"></a>（3）了解 IPMP/PMP、PRINCE2 等项目管理认证体系</h2><p><img src="/images/bigdata/2-12.jpg"> </p><h2 id="（4）掌握项目管理成熟度模型"><a href="#（4）掌握项目管理成熟度模型" class="headerlink" title="（4）掌握项目管理成熟度模型"></a>（4）掌握项目管理成熟度模型</h2><p>参考<a href="/2021/10/11/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%83%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%94%B9%E8%BF%9B/">[开发管理（七）软件过程改进]</a></p><h2 id="（5）了解项目管理的量化方法"><a href="#（5）了解项目管理的量化方法" class="headerlink" title="（5）了解项目管理的量化方法"></a>（5）了解项目管理的量化方法</h2><p>???</p><h1 id="2、组织结构对项目的影响"><a href="#2、组织结构对项目的影响" class="headerlink" title="2、组织结构对项目的影响"></a>2、组织结构对项目的影响</h1><h2 id="（1）了解组织结构对项目的影响。"><a href="#（1）了解组织结构对项目的影响。" class="headerlink" title="（1）了解组织结构对项目的影响。"></a>（1）了解组织结构对项目的影响。</h2><h3 id="01、职能式组织结构"><a href="#01、职能式组织结构" class="headerlink" title="01、职能式组织结构"></a>01、职能式组织结构</h3><p>职能式组织结构就是在组织目前的职能型等级结构下加以管理，一旦项目开始运行，项目的各个组成部分就由各职能单位承担，各单位负责完成其分管的项目内容。如果项目的性质既定，某一职能领域对项目的完成发挥着主导性的作用，职能领域的高级经理将负责项目的协调工作。</p><p>职能式组织结构的优点：</p><p>1、人员的使用上有较大的灵活性，只要选择了一个合适的职能部门作为项目的上级，该部门就能为项目提供它所需要的专业技术人员，而且技术专家可以同时被不同的项目所使用，并在工作完成后又可以回去做他原来的工作;</p><p>2、在人员离开项目组甚至离开公司时，职能部门可作为保持项目连续性的基础;</p><p>3、职能部门可以为本部门的专业人员提供一条正常的晋升途径。　</p><p>职能式组织结构的缺点：</p><p>1、项目经常缺少重点，每个职能单位都有自己的核心常规业务，有时为了满足自己的基本需要，对项目的责任就被忽视，尤其是项目给单位带来的利益不同时;</p><p>2、这种组织结构在跨部门之间的合作与交流方面存在一定困难;</p><p>3、项目参与者的动机不够强，他们认为项目是一项额外的负担，与他们的职业发展和提升无直接关系;</p><h3 id="02、项目式组织结构"><a href="#02、项目式组织结构" class="headerlink" title="02、项目式组织结构"></a>02、项目式组织结构</h3><p>项目式组织结构就是指创建独立项目团队，这些团队的经营与母体组织的其他单位分离，有自己的技术人员与管理人员，企业分配给项目团队一定的资源，然后授予项目经理执行项目的最大自由。</p><p>项目式组织结构的优点：</p><p>1、这种项目团队重点集中，项目经理对项目全权负责，项目团队工作者的唯一任务就是完成项目，并只对项目经理负责，避免了多重领导;</p><p>2、项目团队的决策是在项目内制定，反应时间比较短;</p><p>3、在这种项目团队中，成员动力强、凝聚力高，参与者分享项目及小组的共同目标与个人责任比较明确。</p><p>项目式组织结构的缺点：</p><p>1、当一个公司有多个项目时，每个项目有自己一套独立的班子，这将导致不同项目的重复努力和规模经济的丧失;</p><p>2、项目团队自身是一个独立的实体，容易产生一种被称为“项目炎症”的疾病，即项目团队与母体组织之间出现一条明显的分界线，削弱项目团队与母体组织之间的有效融合;</p><p>3、创建自我控制的项目团队限制了用最好的技术来解决问题;</p><p>4、对项目组成员来说，缺乏一种事业的连续性和保障，项目一旦结束，返回原来的职能部门可能会比较困难。</p><h3 id="03、矩阵式组织结构"><a href="#03、矩阵式组织结构" class="headerlink" title="03、矩阵式组织结构"></a>03、矩阵式组织结构</h3><p>矩阵式组织结构是一种混合形式，它在常规的职能层级结构之上“加载”了一种水平的项目管理结构。根据项目与职能经理相对权力的不同，实践中存在不同种类的矩阵体系，分别有权力明显倾向于职能经理的职能矩阵，权力明显倾向于项目经理的项目矩阵和传统矩阵安排的平衡矩阵。</p><p>矩阵式组织结构的优点：</p><p>1、和职能式组织结构一样，资源可以在多个项目中共享，可大大减少项目式组织中人员冗余的问题;</p><p>2、项目是工作的焦点，具有一个正式指定的项目经理会使他对项目给予更强的关注，负责协调和整合不同单位的工作;</p><p>3、当有多个项目同时进行时，公司可以平衡资源以保证各个项目都能完成其各自的进度、费用及质量要求;</p><p>4、项目组成员对项目结束后的忧虑减少，他们一方面与项目有很强的联系，另一方面他们对职能部门也有一种“家”的感觉。</p><p>矩阵式组织结构的缺点：</p><p>1、矩阵结构加剧了职能经理和拥有关键技能与看法的项目经理之间的紧张局面;</p><p>2、任何情况下的跨项目分享设备、资源和人员都会导致冲突和对稀缺资源的竞争;</p><p>3、在项目执行过程中，项目经理必须就各种问题与部门经理进行谈判和协商，从而导致决策的制定被耽误;</p><p>4、矩阵管理与命令统一的管理原则相违背，项目组成员有两个上司，即项目经理和部门经理，当他们的命令有分歧时，会令成员感到左右为难，无所适从。</p><h1 id="3、信息系统项目典型生命周期模型"><a href="#3、信息系统项目典型生命周期模型" class="headerlink" title="3、信息系统项目典型生命周期模型"></a>3、信息系统项目典型生命周期模型</h1><p>（1）掌握瀑布模型及其瀑布模型基础上改进的模型<br>（2）了解原型化模型<br>（3）了解敏捷开发模型<br>（4）了解软件生命周期其它模型</p><p>该章节统一参考<a href="/2021/09/16/%E8%BD%AF%E8%80%83/6%E3%80%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/">[开发方法（二）软件开发模型]</a></p><h1 id="4、单个项目的管理过程"><a href="#4、单个项目的管理过程" class="headerlink" title="4、单个项目的管理过程"></a>4、单个项目的管理过程</h1><p>（1）掌握项目整体管理的含义、作用<br>（2）了解项目整体管理过程<br>（3）掌握项目进度管理<br>（4）了解项目成本管理<br>（5）了解项目质量管理<br>（6）了解项目人力资源管理<br>（7）了解项目沟通管理和干系人管理<br>（8）了解项目风险管理<br>（9）了解项目单个项目管理的其它方法</p><p>该章节统一参考<a href="/tags/%E8%BD%AF%E8%80%83-%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/">[软考-开发管理]</a></p><h1 id="5、信息系统安全管理"><a href="#5、信息系统安全管理" class="headerlink" title="5、信息系统安全管理"></a>5、信息系统安全管理</h1><p>（1）掌握信息系统安全策略<br>（2）了解信息安全系统工程<br>（3）了解 PKI 公开密钥基础设施<br>（4）了解 PMI 权限（授权）管理基础<br>（5）了解信息安全审计<br>（6）了解信息系统安全管理其它方法</p><p>该章节统一参考<a href="/tags/%E8%BD%AF%E8%80%83-%E5%AE%89%E5%85%A8%E6%80%A7%E5%92%8C%E4%BF%9D%E5%AF%86%E6%80%A7%E8%AE%BE%E8%AE%A1/">[软考-安全性和保密性设计]</a></p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-信息化基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据安全（一）网络安全</title>
      <link href="/2021/10/14/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E5%9B%9B%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%EF%BC%88%E4%B8%80%EF%BC%89%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
      <url>/2021/10/14/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E5%9B%9B%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%EF%BC%88%E4%B8%80%EF%BC%89%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1、熟悉网络安全的一些基本概念、基本属性及网络安全模型等；了解网络安全评估；掌握各种类型的网络安全服务。"><a href="#1、熟悉网络安全的一些基本概念、基本属性及网络安全模型等；了解网络安全评估；掌握各种类型的网络安全服务。" class="headerlink" title="1、熟悉网络安全的一些基本概念、基本属性及网络安全模型等；了解网络安全评估；掌握各种类型的网络安全服务。"></a>1、熟悉网络安全的一些基本概念、基本属性及网络安全模型等；了解网络安全评估；掌握各种类型的网络安全服务。</h1><h1 id="2、了解网络安全体系的安全服务、安全机制、安全服务配置和安全管理等；掌握-TCP-IP-协议安全体系。"><a href="#2、了解网络安全体系的安全服务、安全机制、安全服务配置和安全管理等；掌握-TCP-IP-协议安全体系。" class="headerlink" title="2、了解网络安全体系的安全服务、安全机制、安全服务配置和安全管理等；掌握 TCP/IP 协议安全体系。"></a>2、了解网络安全体系的安全服务、安全机制、安全服务配置和安全管理等；掌握 TCP/IP 协议安全体系。</h1><h1 id="3、熟悉各种网络安全技术的概念，了解物理安全、网络安全设备、系统安全、应用安全的技术知识。"><a href="#3、熟悉各种网络安全技术的概念，了解物理安全、网络安全设备、系统安全、应用安全的技术知识。" class="headerlink" title="3、熟悉各种网络安全技术的概念，了解物理安全、网络安全设备、系统安全、应用安全的技术知识。"></a>3、熟悉各种网络安全技术的概念，了解物理安全、网络安全设备、系统安全、应用安全的技术知识。</h1><h1 id="4、了解网络安全运维与保障的框架、基本原理等知识，掌握安全管理的技术、设施、工具和方法。"><a href="#4、了解网络安全运维与保障的框架、基本原理等知识，掌握安全管理的技术、设施、工具和方法。" class="headerlink" title="4、了解网络安全运维与保障的框架、基本原理等知识，掌握安全管理的技术、设施、工具和方法。"></a>4、了解网络安全运维与保障的框架、基本原理等知识，掌握安全管理的技术、设施、工具和方法。</h1>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-大数据安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据安全（二）数据安全</title>
      <link href="/2021/10/14/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E5%9B%9B%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/"/>
      <url>/2021/10/14/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E5%9B%9B%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1、了解大数据安全管理及安全需求的原则，掌握数据安全分类、定级的原则和方法。"><a href="#1、了解大数据安全管理及安全需求的原则，掌握数据安全分类、定级的原则和方法。" class="headerlink" title="1、了解大数据安全管理及安全需求的原则，掌握数据安全分类、定级的原则和方法。"></a>1、了解大数据安全管理及安全需求的原则，掌握数据安全分类、定级的原则和方法。</h1><h2 id="大数据安全管理及安全需求的原则"><a href="#大数据安全管理及安全需求的原则" class="headerlink" title="大数据安全管理及安全需求的原则"></a>大数据安全管理及安全需求的原则</h2><p>“谁主管、谁负责”、“管行业必须管安全、管业务必须管安全、管生产经营必须管安全”和“分级负责、属地为主”的原则，履行安全生产工作职责，即“一岗双责”。</p><h2 id="数据分类分级应满足以下原则："><a href="#数据分类分级应满足以下原则：" class="headerlink" title="数据分类分级应满足以下原则："></a>数据分类分级应满足以下原则：</h2><p>a）科学性。按照数据的多维特征及其相互间逻辑关联进行科学和系统地分类，按照大数据安全需求确定数据的安全等级。<br>b）稳定性。应以数据最稳定的特征和属性为依据制定分类和分级方案。<br>c）实用性。数据分类要确保每个类下要有数据，不设没有意义的类目，数据类目划分要符合对数据分类的普遍认识。数据分级要确保分级结果能够为数据保护提供有效信息，应提出分级安全要求。<br>d）扩展性。数据分类和分级方案在总体上应具有概括性和包容性，能够针对组织各种类型数据开展分类和分级，并满足将来可能出现的数据的分类和分级要求。</p><h2 id="数据分类分级流程："><a href="#数据分类分级流程：" class="headerlink" title="数据分类分级流程："></a>数据分类分级流程：</h2><p>组织应结合自身业务特点，针对采集、存储和处理的数据，制定数据分类分级规范，规范应包含但不限于以下内容：<br>a）数据分类方法及指南；<br>b）数据分级详细清单，包含每类数据的初始安全级别；<br>c）数据分级保护的安全要求；</p><p><img src="/images/bigdata/2-13.png"> </p><h1 id="2、了解数据采集、存储、处理、分发、删除等活动的概念，了解相关安全技术与安全要求。"><a href="#2、了解数据采集、存储、处理、分发、删除等活动的概念，了解相关安全技术与安全要求。" class="headerlink" title="2、了解数据采集、存储、处理、分发、删除等活动的概念，了解相关安全技术与安全要求。"></a>2、了解数据采集、存储、处理、分发、删除等活动的概念，了解相关安全技术与安全要求。</h1><p>参考<a href="/2021/10/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%80%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86%EF%BC%88%E4%B8%89%EF%BC%89%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/">[大数据法律法规、政策文件及相关标准（三）相关标准]</a> 《GB/T 37973-2019 信息安全技术 大数据安全管理指南》</p><h1 id="3、熟悉云存储安全体系、数据生命周期中的安全风险、保障云存储安全的原则及云计算边界安全相关的概念及云计算安全架构。"><a href="#3、熟悉云存储安全体系、数据生命周期中的安全风险、保障云存储安全的原则及云计算边界安全相关的概念及云计算安全架构。" class="headerlink" title="3、熟悉云存储安全体系、数据生命周期中的安全风险、保障云存储安全的原则及云计算边界安全相关的概念及云计算安全架构。"></a>3、熟悉云存储安全体系、数据生命周期中的安全风险、保障云存储安全的原则及云计算边界安全相关的概念及云计算安全架构。</h1><h2 id="云存储安全体系"><a href="#云存储安全体系" class="headerlink" title="云存储安全体系"></a>云存储安全体系</h2><p>云计算平台将以分布式云存储为主，同时支持多种存储形态的融合管理，如配合特定场景下的高性能集中式存储，可满足不同业务场景的需求。存储资源池应实现多种异构存储资源的管理，将多种异构设备形成可按需分配的存储资源池；并以块存储、文件存储、分布式存储、对象存储等多种方式提供服务。<br>分布式存储系统将分散在不同物理服务器上的硬盘空间虚拟化成统一的云存储空间，并能对外提供多种形式的存储服务。分布式存储系统的功能要求如下：<br>1.应支持分布式架构，将普通 x86 服务器本地硬盘空间虚拟化成统一的存储资源池；<br>2.应提供在线增量扩容和自动数据平衡能力，允许建设位配置数据分布策略<br>3.应采用多管理节点设计，避免集群单点失效，自动进行故障监测和数据迁移<br>4.应具备高可扩展性，可支持上亿个文件和 PB 以上量级的文件存储；支持不重启系统，增加物理服务器后自动扩容<br>5.应支持数据副本自动冗余，能够提供按需定义的数据副本冗余份数；<br>6.应支持以块存储或对象存储方式接入。</p><h1 id="4、了解大数据安全与防护保障机制、大数据安全审计、大数据安全评估与安全管理系统。"><a href="#4、了解大数据安全与防护保障机制、大数据安全审计、大数据安全评估与安全管理系统。" class="headerlink" title="4、了解大数据安全与防护保障机制、大数据安全审计、大数据安全评估与安全管理系统。"></a>4、了解大数据安全与防护保障机制、大数据安全审计、大数据安全评估与安全管理系统。</h1>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-大数据安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息化基础知识（三）新一代信息技术</title>
      <link href="/2021/10/14/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%89%E3%80%81%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89%E6%96%B0%E4%B8%80%E4%BB%A3%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/"/>
      <url>/2021/10/14/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%89%E3%80%81%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E5%8C%96%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89%E6%96%B0%E4%B8%80%E4%BB%A3%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="1、物联网"><a href="#1、物联网" class="headerlink" title="1、物联网"></a>1、物联网</h1><h2 id="（1）掌握物联网的概念"><a href="#（1）掌握物联网的概念" class="headerlink" title="（1）掌握物联网的概念"></a>（1）掌握物联网的概念</h2><p>物联网（The Internet of Things，IoT）是实现物物相连的互联网络。其内涵包含两个方面：第一，物联网的核心和基础仍然是互联网，是在互联网基础上延伸和扩展的网络；第二，其用户端延伸和扩展到了任何物体与物体之间，使其进行信息交换和通信。<br>物联网是将无处不在的末端设备和设施，包括具备“内在智能”的传感器、移动终端、工业系统、楼控系统、家庭智能设施、视频监控系统等和“外在使能”的，如贴上RFID的各种资产、携带无线终端的个人与车辆等“智能化物件或动物”或“智能尘埃”，通过各种无线、有线的长距离/短距离通信网络实现互联互通、应用大集成，以及基于云计算的SaaS营运等模式。提供安全可控乃至个性化的实时在线监测、定位追溯、报警联动、调度指挥、预案管理、远程控制、安全防范、远程维保、在线升级、统计报表、决策支持等管理和服务功能。实现对“万物”的“高效、节能、安全、环保”的“管、控、营”一体化。</p><h2 id="（2）熟悉物联网架构"><a href="#（2）熟悉物联网架构" class="headerlink" title="（2）熟悉物联网架构"></a>（2）熟悉物联网架构</h2><p>物联网可以分为三个层次，底层是用来感知数据的感知层，即利用传感器、二维码、RFID等设备随时随地获取物体的信息。第二层是数据传输处理的网络层，即通过各种传感网络与互联网的融合，将物体当前的信息实时准确地传递出去。第三层则是与行业需求结合的应用层，即通过智能计算、云计算等对物体进行智能化控制。<br>1．感知层<br>感知层用于识别物体、采集信息。感知层包括二维码标签和识读器、RFID标签和读写器、摄像头、GPS、传感器、M2M终端、传感器网关等，主要功能是识别物体、采集信息，与人体结构中皮肤和五官的作用类似。<br>感知层解决的是人类世界和物理世界的数据获取问题。它首先通过传感器、数码相机等设备，采集外部物理世界的数据，然后通过RFID、条码、工业现场总线、蓝牙、红外等短距离传输技术传递数据。感知层所需要的关键技术包括检测技术、短距离无线通信技术等。<br>对于目前关注和应用较多的RFID网络来说，附着在设备上的RFID标签和用来识别RFID信息的扫描仪、感应器都属于物联网的感知层。在这一类物联网中被检测的信息就是RFID标签的内容，现在的电子不停车收费系统（Electronic Toll Collection，ETC）、超市仓储管理系统、飞机场的行李自动分类系统等都用到了这个层次的设备。<br>2．网络层<br>网络层用于传递信息和处理信息。网络层包括通信网与互联网的融合网络、网络管理中心、信息中心和智能处理中心等。网络层将感知层获取的信息进行传递和处理，类似于人体结构中的神经中枢和大脑。<br>网络层解决的是传输和预处理感知层所获得数据的问题。这些数据可以通过移动通信网、互联网、企业内部网、各类专网、小型局域网等进行传输。特别是在三网融合后，有线电视网也能承担物联网网络层的功能，有利于物联网的加快推进。网络层所需要的关键技术包括长距离有线和无线通信技术、网络技术等。<br>物联网的网络层将建立在现有的移动通信网和互联网基础上。物联网通过各种接入设备与移动通信网和互联网相连，例如，手机付费系统中由刷卡设备将内置手机的RFID信息采集上传到互联网，网络层完成后台鉴权认证，并从银行网络划账。<br>网络层中的感知数据管理与处理技术是实现以数据为中心的物联网的核心技术，包括传感网数据的存储、查询、分析、挖掘和理解，以及基于感知数据决策的理论与技术。云计算平台作为海量感知数据的存储、分析平台，将是物联网网络层的重要组成部分，也是应用层众多应用的基础。在产业链中，通信网络运营商和云计算平台提供商将在物联网网络层占据重要的地位。<br>3．应用层<br>应用层实现广泛智能化。应用层是物联网与行业专业技术的深度融合，结合行业需求实现行业智能化，这类似于人们的社会分工。<br>物联网应用层利用经过分析处理的感知数据，为用户提供丰富的特定服务。物联网的应用可分为监控型（物流监控、污染监控）、查询型（智能检索、远程抄表）、控制型（智能交通、智能家居、路灯控制）和扫描型（手机钱包、高速公路不停车收费）等。<br>应用层解决的是信息处理和人机交互的问题。网络层传输而来的数据在这一层进入各类信息系统进行处理，并通过各种设备与人进行交互。这一层也可按形态直观地划分为两个子层。一个是应用程序层，进行数据处理，它涵盖了国民经济和社会的每一领域，包括电力、医疗、银行、交通、环保、物流、工业、农业、城市管理、家居生活等，其功能可包括支付、监控、安保、定位、盘点、预测等，可用于政府、企业、社会组织、家庭、个人等。这正是物联网作为深度信息化的重要体现。另一个是终端设备层，提供人机接口。物联网虽然是“物物相连的网”，但最终要以人为本，还是需要人的操作与控制，不过这里的人机界面已远远超出现实中人与计算机交互的概念，而是泛指与应用程序相连的各种设备与人的交互。<br>应用层是物联网发展的体现，软件开发、智能控制技术将会为用户提供丰富多彩的物联网应用。各种行业和家庭应用的开发将会推动物联网的普及，也给整个物联网产业链带来丰厚的利润。</p><h2 id="（3）了解物联网技术的应用"><a href="#（3）了解物联网技术的应用" class="headerlink" title="（3）了解物联网技术的应用"></a>（3）了解物联网技术的应用</h2><h3 id="物联网技术"><a href="#物联网技术" class="headerlink" title="物联网技术"></a>物联网技术</h3><p>1．射频识别技术<br>射频识别技术（Radio Frequency Identification，RFID），又称电子标签，是一种通信技术，可通过无线电信号识别特定目标并读写相关数据，而无须识别系统与特定目标之间建立机械或光学接触。该技术是物联网的一项核心技术，很多物联网应用都离不开它。<br>最初在技术领域，应答器是指能够传输信息、回复信息的电子模块，近些年，由于射频技术发展迅猛，应答器有了新的说法和含义，又称为智能标签或标签。RFID电子阅读器（读写器）通过天线与RFID电子标签进行无线通信，可以实现对标签识别码和内存数据的读出或写入操作。典型的阅读器包含有高频模块（发送器和接收器）、控制单元及阅读器天线。RFID采用的是非接触的自动识别技术，它通过射频信号自动识别目标对象并获取相关数据，识别工作无须人工干预，可工作于各种恶劣环境。RFID技术可识别高速运动物并可同时识别多个标签，操作快捷方便。这种系统一般由一个询问器（或阅读器）和很多应答器（或标签）组成。RFID的基本组成部分通常包括标签、阅读器和天线。（1）标签（Tag）：由耦合元件及芯片组成，每个标签具有唯一的电子编码，附着在物体上标识目标对象。（2）阅读器（Reader）：读取（有时还可以写入）标签信息的设备，可设计为手持式或固定式。</p><p>（3）天线（Antenna）：在标签和读取器间传递射频信号。<br>RFID技术的基本工作原理并不复杂：标签进入磁场后，接收解读器发出的射频信号，凭借感应电流所获得的能量发送出存储在芯片中的产品信息（Passive Tag，无源标签或被动标签），或者由标签主动发送某一频率的信号（Active Tag，有源标签或主动标签），解读器读取信息并解码后，送至中央信息系统进行有关数据处理。<br>一套完整的RFID系统，是由阅读器与电子标签（即应答器）及应用软件系统三个部分组成的，其工作原理是Reader发射一特定频率的无线电波能量给Transponder，用以驱动Transponder电路将内部的数据送出，此时Reader便依序接收解读数据，送给应用程序作相应的处理。<br>以RFID卡片阅读器及电子标签之间的通信及能量感应方式来看大致上可以分成：感应耦合（Inductive Coupling）及后向散射耦合（Backscatter Coupling）两种。一般低频的RFID大都采用第一种方式，而较高频大多采用第二种方式。<br>阅读器根据使用的结构和技术不同可以是读或读/写装置，也是RFID系统信息控制和处理中心。阅读器通常由耦合模块、收发模块、控制模块和接口单元组成。阅读器和应答器之间一般采用半双工通信方式进行信息交换，同时阅读器通过耦合给无源应答器提供能量和时序。在实际应用中，可进一步通过Ethernet或WLAN等实现对物体识别信息的采集、处理及远程传送等管理功能。应答器是RFID系统的信息载体，目前应答器大多由耦合原件（线圈、微带天线等）和微芯片组成无源单元。</p><p>2．二维码技术<br>二维码（2-dimensional bar code），如图21-1所示。它是用某种特定的几何图形按一定规律在平面（二维方向上）分布的记录数据符号信息的黑白相间的图形。在代码编制上巧妙地利用构成计算机内部逻辑基础的“0”、“1”比特流的概念，使用若干个与二进制相对应的几何形体来表示文字数值信息，通过图像输入设备或光电扫描设备自动识读以实现信息自动处理。1.png<br>二维码具有条码技术的一些共性：每种码制有其特定的字符集、每个字符占有一定的宽度、具有一定的校验功能等。同时还具有对不同行的信息自动识别功能及处理图形旋转变化等特点。在许多种类的二维条码中，常用的码制有 Data Matrix、Maxi Code、Aztec、 QR Code、 Vericode、PDF417、Ultracode、Code 49、Code 16K 等，QR 码是1994年由日本Denso-Wave公司发明的。QR来自英文 Quick Response 的缩写，即快速反应的意思，源自发明者希望QR码可让其内容快速被解码。QR码最常见于日本、韩国，是目前日本最流行的二维空间条码。<br>二维条码/二维码能够在横向和纵向两个方位同时表达信息，因此能在很小的面积内表达大量的信息。其信息量远远超过原来的条码技术，原来的条码技术仅能存储十多个字符，而二维码存储容量可达数千字符。以PDF417编码格式为例：若采用扩展的字母数字压缩格式，可容纳1850个字符；若采用二进制/ASCII格式，可容纳1108字节；若采用数字压缩格式，可容纳2710个数字。</p><p>3．传感网<br>传感网是由随机分布的，集成有传感器（传感器有很多种类型，包括温度、湿度、速度、气敏等）、数据处理单元和通信单元的微小节点，通过自组织的方式构成的无线网络。<br>传感网借助于节点中内置的传感器测量周边环境中的热、红外、声呐、雷达和地震波信号，从而探测包括温度、湿度、噪声、光强度、压力、土壤成分、移动物体的大小、速度和方向等物质现象。它给我们的生活带来了深刻的变化。然而在目前，网络功能再强大，网络世界再丰富，也终究是虚拟的，它与我们所生活的现实世界还是相隔的，在网络世界中，很难感知现实世界，很多事情还是不可能的，时代呼唤着新的网络技术。传感网络正是在这样的背景下应运而生的全新网络技术，它综合了传感器、低功耗、通信及微机电等技术，将现实的世界与虚拟的网络世界联系起来，达到很多意想不到的效果。目前传感网技术已广泛应用于石油、化工、电力、医药、生物、航空、航天、国防、能源、冶金、电子等众多行业。可以预见，在不久的将来，传感网络将给我们的生活方式带来革命性的变化。</p><p>4．M2M<br>简单地说，M2M是将数据从一台终端传送到另一台终端，也就是机器与机器（Machine to Machine）的对话。但从广义上讲 M2M 可代表机器对机器（Machine to Machine）、人对机器（Man to Machine）、机器对人（Machine to Man）、移动网络对机器（Mobile to Machine） 之间的连接与通信，它涵盖了所有实现在人、机器、系统之间建立通信连接的技术和手段。<br>M2M强调的是在商业活动中通过移动通信技术和设备的应用变革既有商务模式或创造出新商务模式，是机器设备间的自动通信。现在，M2M应用遍及电力、交通、工业控制、零售、公共事业管理、医疗、水利、石油等多个行业，对于车辆防盗、安全监测、自动售货、机械维修、公共交通管理等，M2M可以说是无所不能。<br>M2M不是简单的数据在机器和机器之间的传输，更重要的是，它是机器和机器之间的一种智能化、交互式的通信。也就是说，即使人们没有实时发出信号，机器也会根据既定程序主动进行通信，并根据所得到的数据智能化地作出选择，对相关设备发出正确的指令。可以说，智能化、交互式成为了M2M有别于其他应用的典型特征，这一特征下的机器也被赋予了更多的“思想”和“智慧”。<br>M2M的发展前景非常好，因为在当今世界上，机器的数量至少是人的数量的4倍以上，机器将替代人做更多的事情，这意味着巨大的市场潜力。<br>在国内，也有一些企业很早就开始应用M2M技术。三一重工对M2M的应用比较成功，三一重工在其销往全球各地的工程机械（关键部位或关键部件）上加装数据采集终端。机械的运行数据通过电信运营商网络汇总到三一集团企业控制中心（ Enterprise Control Center，ECC），实现对工程设备作业状况的实时监控。这样，企业控制中心可以随时发现设备运行中存在的问题（如工程机械设备上智能设备控制器检测到的油温、转速、工作压力等运行数据信息异常），并就问题立即指导客户排除故障或派出维修人员上门服务。</p><h3 id="物联网的应用"><a href="#物联网的应用" class="headerlink" title="物联网的应用"></a>物联网的应用</h3><p>物联网用途广泛，遍及智能交通、环境保护、政府工作、公共安全、平安家居、智能消防、工业监测、老人护理、个人健康等多个领域。在生产生活中的应用举不胜举，下面简述几个比较典型的应用。</p><p>目前食品安全是一个被大众所关注的主题，即便是超市的食品，人们也很难弄清楚这些食品的来源，以及相关情况。当物联网体系建立好以后，超市里销售的禽、肉、蛋、奶，在包装上可以嵌入微型感应器，顾客只需用手机扫描，就能了解食品的产地和转运、加工的时间地点，甚至还能显示加工环境的照片，是否绿色安全，一目了然。在医疗方面，也可以应用物联网。将传感器嵌入到家人的手表里，即使用户在千里之外，也可以随时掌握家人的体征。用这种方法，医生也可以随时随地了解病人的体征，为病人诊断看病。</p><p>如果在汽车和汽车钥匙上都植入微型感应器，酒后驾车现象就可能被杜绝。当喝了酒的司机掏出汽车钥匙时，钥匙能通过气味感应器察觉到酒气，并通过无线信号通知汽车“不要发动”，汽车会自动罢工，并能够“命令”司机的手机给其亲友发短信，通知他们司机所在的位置，请亲友们来处理。</p><h1 id="2、云计算"><a href="#2、云计算" class="headerlink" title="2、云计算"></a>2、云计算</h1><h2 id="（1）掌握云计算的概念"><a href="#（1）掌握云计算的概念" class="headerlink" title="（1）掌握云计算的概念"></a>（1）掌握云计算的概念</h2><p>云计算是一种基于互联网的计算方式，通过这种方式，共享的软硬件资源和信息可以按需提供给计算机和其他设备。云其实是网络、互联网的一种比喻说法。云计算的核心思想，是将大量用网络连接的计算资源统一管理和调度，构成一个计算资源池向用户按需服务。提供资源的网络称为云。狭义云计算指IT基础设施的交付和使用模式，指通过网络以按需、易扩展的方式获得所需资源；广义云计算指服务的交付和使用模式，指通过网络以按需、易扩展的方式获得所需服务。这种服务可以是IT和软件、互联网相关，也可是其他服务。</p><p>通俗一点来说，提供资源的网络称为云。云中的资源在使用者看来是可以无限扩展的，并且可以随时获取，按需使用，随时扩展，按使用付费。这种特性经常被称为像水电一样使用IT基础设施。这就好比是从古老的单台发电机模式转向了电厂集中供电的模式。它意味着计算能力也可以作为一种商品进行流通，就像煤气、水电一样，取用方便，费用低廉。最大的不同在于，它是通过互联网进行传输的。</p><h2 id="（2）熟悉云计算的架构及关键技术"><a href="#（2）熟悉云计算的架构及关键技术" class="headerlink" title="（2）熟悉云计算的架构及关键技术"></a>（2）熟悉云计算的架构及关键技术</h2><p>云计算是一项交叉学科技术，所以它有许多的特点：<br>（1）计算资源集成提高设备计算能力。云计算把大量计算资源集中到一个公共资源池中，通过租用的方式共享计算资源。虽然单个用户在云计算平台获得服务水平受到网络带宽等各因素影响，未必获得优于本地主机所提供的服务，但是从整个社会资源的角度而言，整体的资源调控降低了部分地区峰值荷载，提高了部分荒废的主机的运行率，从而提高了资源利用率。</p><p>（2）分布式数据中心保证系统容灾能力。分布式数据中心可将云端的用户信息备份到地理上相互隔离的数据库主机中，甚至用户自己也无法判断信息的确切备份地点。该特点不仅仅提供了数据恢复的依据，也使得网络病毒和网络黑客的攻击失去目的性而变成徒劳，大大提高系统的安全性和容灾能力。</p><p>（3）软硬件相互隔离减少设备依赖性。虚拟化层将云平台上方的应用软件和下方的基础设备隔离开来。技术设备的维护者无法看到设备中运行的具体应用。同时对软件层的用户而言基础设备层是透明的，用户只能看到虚拟化层中虚拟出来的各类设备。这种架构减少了设备依赖性，也为动态的资源配置提供可能。</p><p>（4）平台模块化设计体现高可扩展性。目前主流的云计算平台均根据SPI架构在各层集成功能各异的软硬件设备和中间件软件。大量中间件软件和设备提供针对该平台的通用接口，允许用户添加本层的扩展设备。部分云与云之间提供对应接口，允许用户在不同云之间进行数据迁移。类似功能更大程度上满足了用户需求，集成了计算资源，是未来云计算的发展方向之一。</p><p>（5）虚拟资源池为用户提供弹性服务。云平台管理软件将整合的计算资源根据应用访问的具体情况进行动态调整，包括增大或减少资源的要求。因此云计算对于在非恒定需求的应用，如对需求波动很大、阶段性需求等，具有非常好的应用效果。在云计算环境中，既可以对规律性需求通过事先预测事先分配，也可根据事先设定的规则进行实时公台调整。弹性的云服务可帮助用户在任意时间得到满足需求的计算资源。</p><p>（6）按需付费降低使用成本。作为云计算的代表按需提供服务、按需付费是目前各类云计算服务中不可或缺的一部分。对用户而言，云计算不但省去了基础设备的购置运维费用，而且能根据企业成长的需要不断扩展订购的服务，不断更换更加适合的服务，提高了资金的利用率。</p><h2 id="（3）了解云计算服务的类型"><a href="#（3）了解云计算服务的类型" class="headerlink" title="（3）了解云计算服务的类型"></a>（3）了解云计算服务的类型</h2><p>1．软件即服务<br>软件即服务（Software-as-a-Service，SaaS）是基于互联网提供软件服务的软件应用模式。作为一种在21世纪开始兴起的创新的软件应用模式，SaaS是软件科技发展的最新趋势。SaaS提供商为企业搭建信息化所需要的所有网络基础设施及软件、硬件运作平台，并负责所有前期的实施、后期的维护等一系列服务，企业无须购买软硬件、建设机房、招聘IT人员，即可通过互联网使用信息系统。就像打开自来水龙头就能用水一样，企业根据实际需要，从SaaS提供商租赁软件服务。</p><p>2．平台即服务<br>平台即服务（Platform-as-a-Service，PaaS）是把服务器平台或者开发环境作为一种服务提供的商业模式，如将软件研发的平台作为一种服务，以SaaS的模式提交给用户。因此，PaaS也是SaaS模式的一种应用。但是，PaaS的出现可以加快SaaS的发展，尤其是加快SaaS应用的开发速度。早在2007年，国内外SaaS厂商就先后推出了自己的PaaS平台。<br>PaaS之所以能够推进SaaS的发展，主要在于它能够提供企业进行定制化研发的中间件平台，同时涵盖数据库和应用服务器等。PaaS可以提高在Web平台上利用的资源数量。</p><p>3．基础设施即服务<br>基础设施即服务（Infrastructure as a Service，IaaS）是指消费者通过Internet可以从完善的计算机基础设施获得服务，如《纽约时报》就使用成百上千台Amazon EC2实例在36小时内处理TB级的文档数据。如果没有EC2，《纽约时报》处理这些数据将要花费数天或者数月的时间。</p><h2 id="（4）了解发展云计算的主要任务"><a href="#（4）了解发展云计算的主要任务" class="headerlink" title="（4）了解发展云计算的主要任务"></a>（4）了解发展云计算的主要任务</h2><p>1．云安全<br>云安全（Cloud Security）是一个从“云计算”演变而来的新名词。云安全的策略构想是：使用者越多，每个使用者就越安全，因为如此庞大的用户群，足以覆盖互联网的每个角落，只要某个新木马病毒出现，就会立刻被截获。<br>“云安全”通过网状的大量客户端对网络中软件行为的异常监测，获取互联网中木马、恶意程序的最新信息，推送到Server端进行自动分析和处理，再把病毒和木马的解决方案分发到每一个客户端。</p><p>2．云存储<br>应用云存储是在云计算概念上延伸和发展出来的一个新的概念，是指通过集群应用、网格技术或分布式文件系统等功能，将网络中大量各种不同类型的存储设备通过应用软件集合起来协同工作，共同对外提供数据存储和业务访问功能的一个系统。当云计算系统运算和处理的核心是大量数据的存储和管理时，云计算系统中就需要配置大量的存储设备，那么云计算系统就转变成为一个云存储系统，所以云存储是一个以数据存储和管理为核心的云计算系统。</p><p>3．云呼叫<br>应用云呼叫中心是基于云计算技术而搭建的呼叫中心系统，企业无须购买任何软、硬件系统，只需具备人员、场地等基本条件，就可以快速拥有属于自己的呼叫中心，软硬件平台、通信资源、日常维护与服务由服务器商提供。具有建设周期短、投入少、风险低、部署灵活、系统容量伸缩性强、运营维护成本低等众多特点；无论是电话营销中心还是客户服务中心，企业只需按需租用服务，便可建立一套功能全面、稳定、可靠、座席可分布全国各地，全国呼叫接入的呼叫中心系统。</p><p>4．云会议<br>应用云会议是基于云计算技术的一种高效、便捷、低成本的会议形式。它是视频会议与云计算的完美结合，带来了最便捷的远程会议体验。使用者只需通过互联网界面，进行简单易用的操作，便可快速高效地与全球各地团队及客户同步分享语音、数据文件及视频，而会议中数据的传输、处理等复杂技术由云会议服务商帮助使用者进行操作。目前国内云会议大多以SaaS模式为主体，其服务内容包括电话、网络、视频等形式。</p><h1 id="3、移动互联网"><a href="#3、移动互联网" class="headerlink" title="3、移动互联网"></a>3、移动互联网</h1><h2 id="（1）掌握移动互联网的概念"><a href="#（1）掌握移动互联网的概念" class="headerlink" title="（1）掌握移动互联网的概念"></a>（1）掌握移动互联网的概念</h2><p>移动互联网是PC互联网发展的必然产物，将移动通信和互联网二者结合起来，成为一体。它是互联网的技术、平台、商业模式和应用与移动通信技术结合并实践的活动的总称。<br>移动互联网是移动和互联网融合的产物，继承了移动随时、随地、随身和互联网开放、分享、互动的优势，是一个全国性的、以宽带IP为技术核心的，可同时提供话音、传真、数据、图像、多媒体等高品质电信服务的新一代开放的电信基础网络，由运营商提供无线接入，互联网企业提供各种成熟的应用。</p><h2 id="（2）熟悉移动互联网的特点"><a href="#（2）熟悉移动互联网的特点" class="headerlink" title="（2）熟悉移动互联网的特点"></a>（2）熟悉移动互联网的特点</h2><p>移动互联网是在传统互联网基础上发展起来的，因此二者具有很多共性，但由于移动通信技术和移动终端发展不同，它又具备许多传统互联网没有的新特性。</p><p>交互性<br>用户可以随身携带和随时使用移动终端，在移动状态下接人和使用移动互联网应用服务。<br>便携性<br>相对于PC，由于移动终端小巧轻便、可随身携带两个特点，人们可以装入随身携带的书包和手袋中，并使得用户可以在任意场合接人网络。<br>隐私性<br>移动终端设备的隐私性远高于PC的要求。由于移动性和便携性的特点，移动互联网的信息保护程度较高。<br>定位性<br>移动互联网有别于传统互联网的典型应用是位置服务应用。它具有以下几个服务：位置签到、位置分享及基于位置的社交应用；基于位置围栏的用户监控及消息通知服务；生活导航及优惠券集成服务；基于位置的娱乐和电子商务应用；基于位置的用户换机上下文感知及信息服务。<br>娱乐性<br>移动互联网上的丰富应用，如图片分享、视频播放、音乐欣赏、电子邮件等，为用户的工作、生活带来更多的便利和乐趣。<br>局限性<br>移动互联网应用服务在便捷的同时，也受到了来自网络能力和终端硬件能力的限制。在网络能力方面，受到无线网络传输环境、技术能力等因素限制；在终端硬件能力方面，受到终端大小、处理能力、电池容量等的限制。移动互联网各个部分相互联系，相互作用并制约发展，任何一部分的滞后都会延缓移动互联网发展的步伐。<br>强关联性<br>由于移动互联网业务受到了网络及终端能力的限制，因此，其业务内容和形式也需要匹配特定的网络技术规格和终端类型，具有强关联性。移动互联网通信技术与移动应用平台的发展有着紧密联系，没有足够的带宽就会影响在线视频，视频电话，移动网游等应用的扩展。同时，根据移动终端设备的特点，也有其与之对应的移动互联网应用服务，这是区别于传统互联网而存在的。<br>身份统一性<br>这种身份统一是指移动互联用户自然身份、社会身份、交易身份、支付身份通过移动互联网平台得以统一。信息本来是分散到各处的，互联网逐渐发展、基础平台逐渐完善之后，各处的身份信息将得到统一。例如，在网银里绑定手机号和银行卡，支付的时候验证了手机号就直接从银行卡扣钱。</p><h2 id="（3）了解移动互联网技术的应用"><a href="#（3）了解移动互联网技术的应用" class="headerlink" title="（3）了解移动互联网技术的应用"></a>（3）了解移动互联网技术的应用</h2><p>通信业<br>通信行业为移动互联网的繁荣提供了必要的硬件支撑，传统的通信业，”开路收费”模式，如寄信、通话等都是为你“开路”然后收钱。移动互联网的出现却完全无视这些规则，要求人与人更紧密地连接，都可以以最低成本随时随地联系得到。<br>医疗行业<br>受移动互联网的影响，目前的医疗行业已经开始做出改变，比如在线就医、在线预约、远程医疗合作在线支付等方面。<br>移动电子商务<br>移动电子商务可以为用户随时随地提供所需的服务、应用、信息和娱乐，利用手机终端方便便捷地选择及购买商品和服务。多种支付方式，使用方便。移动支付平台不仅支持各种银行卡通过网上进行支付，还支持手机、电话等多种终端操作，符合网上消费者追求个性化、多样化的需求。<br>AR<br>增强现实(AR)，也被称之为混合现实。它通过电脑技术，将虚拟的信息应用到真实世界，真实的环境和虚拟的物体实时地叠加到了同一个画面或空间同时存在。增强现实提供了在一般情况下，不同于人类可以感知的信息。它不但展现了真实世界的信息，而且将虚拟的信息同时显示出来，两种信息相互补充叠加。<br>移动电子政务<br>在信息技术快速变革的情况下，国家的政府单位也紧跟时代发展步伐，开始广泛的使用移动电子政务。</p><h1 id="4、人工智能"><a href="#4、人工智能" class="headerlink" title="4、人工智能"></a>4、人工智能</h1><h2 id="（1）掌握人工智能的概念"><a href="#（1）掌握人工智能的概念" class="headerlink" title="（1）掌握人工智能的概念"></a>（1）掌握人工智能的概念</h2><p>人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。<br>人工智能是计算机科学的一个分支，它企图了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器，该领域的研究包括机器人、语言识别、图像识别、自然语言处理和专家系统等。人工智能从诞生以来，理论和技术日益成熟，应用领域也不断扩大，可以设想，未来人工智能带来的科技产品，将会是人类智慧的“容器”。人工智能可以对人的意识、思维的信息过程的模拟。人工智能不是人的智能，但能像人那样思考、也可能超过人的智能。</p><h2 id="（2）熟悉人工智能研究范畴"><a href="#（2）熟悉人工智能研究范畴" class="headerlink" title="（2）熟悉人工智能研究范畴"></a>（2）熟悉人工智能研究范畴</h2><p>人工智能是一门极富挑战性的科学，从事这项工作的人必须懂得计算机知识，心理学和哲学。人工智能是包括十分广泛的科学，它由不同的领域组成，如机器学习，计算机视觉等等，总的说来，人工智能研究的一个主要目标是使机器能够胜任一些通常需要人类智能才能完成的复杂工作。但不同的时代、不同的人对这种“复杂工作”的理解是不同的。</p><p>具体包括：自然语言处理，知识表现，智能搜索，推理，规划，机器学习，知识获取，组合调度问题，感知问题，模式识别，逻辑程序设计软计算，不精确和不确定的管理，人工生命，神经网络，复杂系统，遗传算法</p><h2 id="（3）了解人工智能实际应用"><a href="#（3）了解人工智能实际应用" class="headerlink" title="（3）了解人工智能实际应用"></a>（3）了解人工智能实际应用</h2><p>机器视觉，指纹识别，人脸识别，视网膜识别，虹膜识别，掌纹识别，专家系统，自动规划，智能搜索，定理证明，博弈，自动程序设计，智能控制，机器人学，语言和图像理解，遗传编程等。</p><h1 id="5、区块链"><a href="#5、区块链" class="headerlink" title="5、区块链"></a>5、区块链</h1><h2 id="（1）掌握区块链的概念"><a href="#（1）掌握区块链的概念" class="headerlink" title="（1）掌握区块链的概念"></a>（1）掌握区块链的概念</h2><p>区块链是一个信息技术领域的术语。从本质上讲，它是一个共享数据库，存储于其中的数据或信息，具有“不可伪造”“全程留痕”“可以追溯”“公开透明”“集体维护”等特征。基于这些特征，区块链技术奠定了坚实的“信任”基础，创造了可靠的“合作”机制，具有广阔的运用前景。</p><h2 id="（2）熟悉区块链的系统架构"><a href="#（2）熟悉区块链的系统架构" class="headerlink" title="（2）熟悉区块链的系统架构"></a>（2）熟悉区块链的系统架构</h2><p><img src="/images/bigdata/2-11.jpeg"><br>一般说来，区块链系统由数据层、网络层、共识层、激励层、合约层和应用层组成。<br>其中，数据层封装了底层数据区块以及相关的数据加密和时间戳等基础数据和基本算法；<br>网络层则包括分布式组网机制、数据传播机制和数据验证机制等；<br>共识层主要封装网络节点的各类共识算法；<br>激励层将经济因素集成到区块链技术体系中来，主要包括经济激励的发行机制和分配机制等；<br>合约层主要封装各类脚本、算法和智能合约，是区块链可编程特性的基础；<br>应用层则封装了区块链的各种应用场景和案例。<br>该模型中，基于时间戳的链式区块结构、分布式节点的共识机制、基于共识算力的经济激励和灵活可编程的智能合约是区块链技术最具代表性的创新点。</p><h2 id="（3）了解区块链的分类"><a href="#（3）了解区块链的分类" class="headerlink" title="（3）了解区块链的分类"></a>（3）了解区块链的分类</h2><p>公有区块链<br>公有区块链（Public Block Chains)是指：世界上任何个体或者团体都可以发送交易，且交易能够获得该区块链的有效确认，任何人都可以参与其共识过程。公有区块链是最早的区块链，也是应用最广泛的区块链，各大bitcoins系列的虚拟数字货币均基于公有区块链，世界上有且仅有一条该币种对应的区块链。<br>联合（行业）区块链<br>行业区块链（Consortium Block Chains)：由某个群体内部指定多个预选的节点为记账人，每个块的生成由所有的预选节点共同决定（预选节点参与共识过程），其他接入节点可以参与交易，但不过问记账过程(本质上还是托管记账，只是变成分布式记账，预选节点的多少，如何决定每个块的记账者成为该区块链的主要风险点），其他任何人可以通过该区块链开放的API进行限定查询。<br>私有区块链<br>私有区块链（Private Block Chains)：仅仅使用区块链的总账技术进行记账，可以是一个公司，也可以是个人，独享该区块链的写入权限，本链与其他的分布式存储方案没有太大区别。传统金融都是想实验尝试私有区块链，而公链的应用例如bitcoin已经工业化，私链的应用产品还在摸索当中。</p><h2 id="（补充）核心技术"><a href="#（补充）核心技术" class="headerlink" title="（补充）核心技术"></a>（补充）核心技术</h2><p>分布式账本<br>分布式账本指的是交易记账由分布在不同地方的多个节点共同完成，而且每一个节点记录的是完整的账目，因此它们都可以参与监督交易合法性，同时也可以共同为其作证。<br>非对称加密<br>存储在区块链上的交易信息是公开的，但是账户身份信息是高度加密的，只有在数据拥有者授权的情况下才能访问到，从而保证了数据的安全和个人的隐私。<br>共识机制<br>共识机制就是所有记账节点之间怎么达成共识，去认定一个记录的有效性，这既是认定的手段，也是防止篡改的手段。区块链提出了四种不同的共识机制，适用于不同的应用场景，在效率和安全性之间取得平衡。<br>智能合约<br>智能合约是基于这些可信的不可篡改的数据，可以自动化的执行一些预先定义好的规则和条款。</p><h2 id="（4）了解区块链的应用"><a href="#（4）了解区块链的应用" class="headerlink" title="（4）了解区块链的应用"></a>（4）了解区块链的应用</h2><p>金融领域<br>区块链在国际汇兑、信用证、股权登记和证券交易所等金融领域有着潜在的巨大应用价值。将区块链技术应用在金融行业中，能够省去第三方中介环节，实现点对点的直接对接，从而在大大降低成本的同时，快速完成交易支付。<br>物联网和物流领域<br>区块链在物联网和物流领域也可以天然结合。通过区块链可以降低物流成本，追溯物品的生产和运送过程，并且提高供应链管理的效率。该领域被认为是区块链一个很有前景的应用方向。<br>公共服务领域<br>区块链在公共管理、能源、交通等领域都与民众的生产生活息息相关，但是这些领域的中心化特质也带来了一些问题，可以用区块链来改造。区块链提供的去中心化的完全分布式DNS服务通过网络中各个节点之间的点对点数据传输服务就能实现域名的查询和解析，可用于确保某个重要的基础设施的操作系统和固件没有被篡改，可以监控软件的状态和完整性，发现不良的篡改，并确保使用了物联网技术的系统所传输的数据没用经过篡改。<br>数字版权领域<br>通过区块链技术，可以对作品进行鉴权，证明文字、视频、音频等作品的存在，保证权属的真实、唯一性。作品在区块链上被确权后，后续交易都会进行实时记录，实现数字版权全生命周期管理，也可作为司法取证中的技术性保障。例如，美国纽约一家创业公司Mine Labs开发了一个基于区块链的元数据协议，这个名为Mediachain的系统利用IPFS文件系统，实现数字作品版权保护，主要是面向数字图片的版权保护应用。<br>保险领域<br>在保险理赔方面，保险机构负责资金归集、投资、理赔，往往管理和运营成本较高。通过智能合约的应用，既无需投保人申请，也无需保险公司批准，只要触发理赔条件，实现保单自动理赔。一个典型的应用案例就是LenderBot, 是 2016 年由区块链企业 Stratumn、德勤与支付服务商 Lemonway 合作推出，它允许人们通过 Facebook Messenger 的聊天功能，注册定制化的微保险产品， 为个人之间交换的高价值物品进行投保，而区块链在贷款合同中代替了第三方角色。<br>公益领域<br>区块链上存储的数据，高可靠且不可篡改，天然适合用在社会公益场景。公益流程中的相关信息，如捐赠项目、募集明细、资金流向、受助人反馈等，均可以存放于区块链上，并且有条件地进行透明公开公示，方便社会监督。</p><h1 id="6、量子技术"><a href="#6、量子技术" class="headerlink" title="6、量子技术"></a>6、量子技术</h1><h2 id="（1）掌握量子技术的概念"><a href="#（1）掌握量子技术的概念" class="headerlink" title="（1）掌握量子技术的概念"></a>（1）掌握量子技术的概念</h2><p>量子信息是量子物理与信息技术相结合发展起来的新学科,主要包括量子通信和量子计算2个领域。量子通信主要研究量子密码、量子隐形传态、远距离量子通信的技术等等;量子计算主要研究量子计算机和适合于量子计算机的量子算法。</p><h2 id="（2）熟悉量子技术的特点"><a href="#（2）熟悉量子技术的特点" class="headerlink" title="（2）熟悉量子技术的特点"></a>（2）熟悉量子技术的特点</h2><p>作为一种微观粒子，量子具有许多特别的基本特性，如量子力学三大基本原理：<br>量子测不准<br>也称为不确定性原理，即观察者不可能同时知道一个粒子的位置和它的速度，粒子位置的总是以一定的概率存在某一个不同的地方，而对未知状态系统的每一次测量都必将改变系统原来的状态。也就是说，测量后的微粒相比于测量之前，必然会产生变化。<br>量子不可克隆<br>量子不可克隆原理，即一个未知的量子态不能被完全地克隆。在量子力学中，不存在这样一个物理过程：实现对一个未知量子态的精确复制，使得每个复制态与初始量子态完全相同。<br>量子不可区分<br>量子不可区分原理，即不可能同时精确测量两个非正交量子态。事实上，由于非正交量子态具有不可区分性，无论采用任何测量方法，测量结果的都会有错误。</p><p>除此之外，还包括以下基本特性：<br>量子态叠加性(superposition)<br>量子状态可以叠加，因此量子信息也是可以叠加的。这是量子计算中的可以实现并行性的重要基础，即可以同时输入和操作个量子比特的叠加态。<br>量子态纠缠性(entanglement)<br>两个及以上的量子在特定的(温度、磁场)环境下可以处于较稳定的量子纠缠状态，基于这种纠缠，某个粒子的作用将会瞬时地影响另一个粒子。爱因斯坦称其为: “幽灵般的超距作用”。<br>量子态相干性(interference)<br>量子力学中微观粒子间的相互叠加作用能产生类似经典力学中光的干涉现象。</p><h2 id="（3）了解量子技术的应用"><a href="#（3）了解量子技术的应用" class="headerlink" title="（3）了解量子技术的应用"></a>（3）了解量子技术的应用</h2><p>量子技术应用包括量子传感与计量、量子通信、量子模拟及量子计算等方面，它将在传感与测量、通信、仿真、高性能计算等领域拥有广阔的应用前景。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-信息化基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础知识（一）面向对象技术</title>
      <link href="/2021/10/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%BA%8C%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%8A%80%E6%9C%AF/"/>
      <url>/2021/10/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%BA%8C%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="1、了解面向对象的发展历史，为什么引入面向对象。"><a href="#1、了解面向对象的发展历史，为什么引入面向对象。" class="headerlink" title="1、了解面向对象的发展历史，为什么引入面向对象。"></a>1、了解面向对象的发展历史，为什么引入面向对象。</h1><h2 id="面向对象的发展历史"><a href="#面向对象的发展历史" class="headerlink" title="面向对象的发展历史"></a>面向对象的发展历史</h2><p>1.雏形阶段<br>20世纪60年代挪威计算中心发布的simula语言，首次引入了类的概念和继承机制，该语言的诞生是面向对象发展历史上的第一个里程碑。<br>70年代CLU、并发Pascal、Ada和Modula-2等语言对抽象数据类型理论的发展起到重要作用（支持数据和操作封装）。<br>1972年Palo Alno研究中心（PARC）发布了Smalltalk 72,其中正式使用了面向对象这个术语。Smalltalk的问世标志着面向对象程序设计方法的正式形成，但是这个时期的Smalltalk语言还不够完善。</p><p>2.完善阶段<br>PARC先后发布了Smalltalk 72，76和78等版本，直至1981年推出该语言完善的版本Smalltalk 80。Small talk 80的问世被认为是面向对象语言发展史上最重要的里程碑。迄今绝大多数面向的基本概念及其支持机制在Small talk 80中都已具备。他是第一个完善的、能够实际应用的面向对象语言。Small talk 80的问世被认为是面向对象语言发展史上最重要的里程碑。迄今绝大多数面向的基本概念及其支持机制在Small talk 80中都已具备。他是第一个完善的、能够实际应用的面向对象语言。</p><p>3.繁荣阶段<br>从20世纪80年代中期到90年代，是面向对象语言走向繁荣的阶段。其主要表现是大批比较实用的面向对象编程语言的涌现，例如 C++、Objective C 、Object Pascal、CLOS（Common Lisp Object System）、Eiffel和Actor等。这些面向对象的编程语言分为纯OO型语言和混合型OO语言。混合型语言是在传统的过程式语言基础上增加了OO语言成分形成的，在实用性方面具有更大的优势。此时的纯OO型语言也比较重视实用性。现在，在面向对象编程方面，普遍采用语言、类库和可视化编程环境相结合的方式，如Visual C++、JBuilder和Delphi等。面向对象方法也从编程发展到设计、分析，进而发展到整个软件生命周期。</p><p>4.面向对象的当前状况<br>当前，面向对象方法几乎覆盖了计算机软件领域的所有分支。例如，已经出现了面向对象的编程语言、面向对象的分析、面向对象的设计、面向对象的测试、面向对象的维护、面向对象的图形用户界面、面向对象的数据库、面向对象的数据结构、面向对象的智能程序设计、面向对象的软件开发环境和面向对象的体系结构等。此外，许多新领域都以面向对象理论为基础或作为主要技术，如面向对象的软件体系结构、领域工程、智能代理（Agent）、基于构件的软件工程和面向服务的软件开发等。</p><h2 id="为什么引入面向对象"><a href="#为什么引入面向对象" class="headerlink" title="为什么引入面向对象"></a>为什么引入面向对象</h2><p>1、面向对象符合人类看待事物的一般规律。</p><p>2、对象的方法的实现细节是屏蔽的，只有对象方法的实现者了解细节。</p><h1 id="2、掌握面向对象编程与非面向对象编程的优缺点。"><a href="#2、掌握面向对象编程与非面向对象编程的优缺点。" class="headerlink" title="2、掌握面向对象编程与非面向对象编程的优缺点。"></a>2、掌握面向对象编程与非面向对象编程的优缺点。</h1><p>面向过程是一种以过程为中心的编程思想，它首先分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，在使用时依次调用，是一种基础的顺序的思维方式。面向过程开发方式是对计算机底层结构的一层抽象，它将程序分为数据和操纵数据的操作两部分，其核心问题是数据结构和算法的开发和优化。常见的支持面向过程的编程语言有 C语言、COBOL 语言等。</p><p>面向对象是按人们认识客观世界的系统思维方式，采用基于对象（实体）的概念建立模型，模拟客观世界分析、设计、实现软件的编程思想，通过面向对象的理念使计算机软件系统能与现实世界中的系统一一对应。</p><p>面向对象方法直接把所有事物都当作独立的对象，处理问题过程中所思考的不再主要是怎样用数据结构来描述问题，而是直接考虑重现问题中各个对象之间的关系。面向对象方法的基础实现中也包含面向过程的思想。常见的支持面向对象的编程语言有 C++ 语言、C＃ 语言、Java 语言等。</p><p>具体来说，面向对象与面向过程有以下四个方面的不同：</p><ol><li>出发点不同</li></ol><p>面向对象使用符合常规思维的方式来处理客观世界的问题，强调把解决问题领域的“动作”直接映射到对象之间的接口上。而面向过程则强调的是过程的抽象化与模块化，是以过程为中心构造或处理客观世界问题。</p><ol start="2"><li>层次逻辑关系不同</li></ol><p>面向对象使用计算机逻辑来模拟客观世界中的物理存在，以对象的集合类作为处理问题的单位，尽可能地使计算机世界向客观世界靠拢，以使处理问题的方式更清晰直接，面向对象使用类的层次结构来体现类之间的继承与发展。面向过程处理问题的基本单位是能清晰准确地表达过程的模块，用模块的层次结构概括模块或模块间的关系与功能，把客观世界的问题抽象成计算机可以处理的过程。</p><ol start="3"><li>数据处理方式与控制程序方式不同</li></ol><p>面向对象将数据与对应的代码封装成一个整体，原则上其他对象不能直接修改其数据，即对象的修改只能由自身的成员函数完成，控制程序方式上是通过“事件驱动”来激活和运行程序的。而面向过程是直接通过程序来处理数据，处理完毕后即可显示处理的结果，在控制方式上是按照设计调用或返回程序，不能自由导航，各模块之间存在着控制与被控制，调动与被调用的关系。</p><ol start="4"><li>分析设计与编码转换方式不同</li></ol><p>面向对象贯穿于软件生命周期的分析、设计及编码中，是一种平滑的过程，从分析到设计再到编码是采用一致性的模型表示，实现的是一种无缝连接。而面向过程强调分析、设计及编码之间按规则进行转换贯穿于软件生命周期的分析、设计及编码中，实现的是一种有缝的连接。</p><table><thead><tr><th></th><th>面向对象</th><th>面向过程</th></tr></thead><tbody><tr><td>特性</td><td>抽象、继承、封装、多态</td><td>功能模块化，代码流程化</td></tr><tr><td>优点</td><td>易维护、易复用、易扩展、低耦合</td><td>性能高，适合资源紧张、实时性强的场合</td></tr><tr><td>缺点</td><td>性能比面向过程低</td><td>没有面向对象易维护、易复用、易扩展</td></tr></tbody></table><h1 id="3、掌握抽象的5个层次，抽象形式。"><a href="#3、掌握抽象的5个层次，抽象形式。" class="headerlink" title="3、掌握抽象的5个层次，抽象形式。"></a>3、掌握抽象的5个层次，抽象形式。</h1><h2 id="抽象的5个层次"><a href="#抽象的5个层次" class="headerlink" title="抽象的5个层次"></a>抽象的5个层次</h2><p>1.变量和函数<br>2.接口<br>3.消息传递<br>4.对象集单元<br>5.设计模式</p><h2 id="抽象形式"><a href="#抽象形式" class="headerlink" title="抽象形式"></a>抽象形式</h2><p>1.概念<br>2.推理<br>3.判断</p><h1 id="4、掌握类和方法。"><a href="#4、掌握类和方法。" class="headerlink" title="4、掌握类和方法。"></a>4、掌握类和方法。</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>1.概念<br>java中没有结构体类型,类就是高度封装的结构体类型。还有c是面向过程的编程语言,而java是面向对象的,所以对数据的处理方式会有些不同,java中的类更适用于对数据的高度封装,适合调用。</p><p>类是具有相同特性（数据元素）和行为（功能）的对象的抽象。因此，对象的抽象是类，类的具体化就是对象，也可以说类的实例是对象，类实际上就是一种数据类型。</p><p>类具有属性，它是对象的状态的抽象，用数据结构来描述类的属性。<br>类具有操作，它是对象的行为的抽象，用操作名和实现该操作的方法来描述。</p><p>2.类与类之间最常见的关系主要有以下3种。<br>依赖（或uses–a）。<br>聚合（或has–a）。<br>继承（或is–a）。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>1.概念<br>方法是指对象能够进行的操作，方法同时还有另外一个名称，叫做函数。方法是类中的定义函数，其具体的作用就是对对象进行描述操作。</p><p>方法用于定义该类或该类实例的行为特征和功能实现。方法是类和对象行为特征的抽象。方法很类似于面向过程中的函数。</p><p>面向过程中，函数是最基本单位，整个程序由一个个 函数调用组成。面向对象中，整个程序的基本单位是类，方法是从属于类和对象的。</p><h1 id="5、掌握消息、实例和初始化。"><a href="#5、掌握消息、实例和初始化。" class="headerlink" title="5、掌握消息、实例和初始化。"></a>5、掌握消息、实例和初始化。</h1><h1 id="6、了解继承和替换。"><a href="#6、了解继承和替换。" class="headerlink" title="6、了解继承和替换。"></a>6、了解继承和替换。</h1><h2 id="一、继承"><a href="#一、继承" class="headerlink" title="一、继承"></a>一、继承</h2><p>父类：基类<br>子类：派生类</p><p>继承的概念：<br>1.传递性：子类能继承父类的所有方法、属性<br>2.单根性：类只能继承一个父类</p><p>继承的注意的问题：<br>1.创建子类对象的时候，会为子类与父类的对象的字段提供空间<br>2.父类不能继承子类<br>3.构造方法不能被继承，但是可以在子类用添加 base(指定引用)<br>4.子类能继承父类的属性与方法、但是私有的方法只能被继承，不能被使用<br>5.基本格式：<br>子类：父类 base(“构造方法”)<br>6.基本的访问修饰符<br>public 公开的类 任何都能访问<br>prive 私有的类 只能在类中进行访问<br>protected 受保护的类 只能在本类或者子类进行访问<br>7.过程：创建子类的时候先条用子类的构造函数，然后再调用父类的构造函数<br>执行父类的构造函数后，再执行子类的构造函数。</p><h2 id="二、里氏替换"><a href="#二、里氏替换" class="headerlink" title="二、里氏替换"></a>二、里氏替换</h2><p>概念：父类引用可以指向一个子类，看到的也只是父类的引用<br>1.父类引用能引用到子类的父类引用，可以看到，但是无法使用。<br>例：a（父类引用）se(子类对象)=new se();<br>子类可以访问包括父类的引用以及自己的属性<br>se（子类） ss=new se();<br>2.里氏替换的原则：<br>父类不能替换成子类<br>子类能替换成父类<br>Parent p=new Son()<br>Son s=(Son)p; –正确<br>Parent p=new Parent()<br>Son s=(Son)p; –错误<br>注：因为继承的概念就是子孙类会越来越比祖先类详细，所以可以将子孙类强制转换成祖先类，因为祖先有的行为子孙类示例都有了（重新定义的或者是默认的）；但是当将祖先类示例强制转换成子孙类示例的时候，一些子孙类有的行为祖先是没有的（即使的是默认的实现也没有）。<br>3.如果需要父类访问到子类的字段，必须要转换<br>4.转换的方式有两种：<br>（1）（子类类型） 父类引用 //会报错<br>（2）父类引用 as 子类类型 //不会报错、但是会返回一个null值<br>5.判断父类的对象引用类型，父类引用 is 子类类型 并且返回一个布尔值<br>例：if(数组[i] is pe)<br>{<br>    ((pe)数组(I).方法/属性)<br>}</p><h1 id="7、了解静态行为和动态行为。"><a href="#7、了解静态行为和动态行为。" class="headerlink" title="7、了解静态行为和动态行为。"></a>7、了解静态行为和动态行为。</h1><p>动态行为是指代码具有一定的响应能力的行为，比如，一个对于线程进行封装的类，其行为应当就是动态的。另一个例子，就是Socket通讯问题，我们需要对连接进行测试，此时其所表现出来的也是动态行为。对于动态行为的代码，其在不同的操作系统中表现有可能是不同的。</p><p>与动态行为不同的是，静态行为只是被动的计算或是组织数据结构。比如，一个MD5的计算函数，其行为就是静态的，这种行为不论你是在任何操作系统或是处理器上运行，其结果都是一样的。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-计算机基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础知识（二）数据结构与算法</title>
      <link href="/2021/10/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%BA%8C%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2021/10/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%BA%8C%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1、掌握程序性能分析的概念和方法，包括时间复杂性与空间复杂性分析。"><a href="#1、掌握程序性能分析的概念和方法，包括时间复杂性与空间复杂性分析。" class="headerlink" title="1、掌握程序性能分析的概念和方法，包括时间复杂性与空间复杂性分析。"></a>1、掌握程序性能分析的概念和方法，包括时间复杂性与空间复杂性分析。</h1><h2 id="一-定义"><a href="#一-定义" class="headerlink" title="一 定义"></a>一 定义</h2><p>衡量一个算法的性能，除了能实现需求之外。进阶就是考虑在算法运行过程中时间和资源的消耗。<br>时间复杂度：执行当前算法所消耗的时间;　<br>空间复杂度：执行当前算法所需要占用的内存空间；</p><p>时间复杂度与空间复杂度是紧密相连的。对于我们程序开发来说：时间复杂度与空间复杂度是可以相互转化的。<br>1.以空间换时间：对于执行慢的程序，消耗内存来减少时间，提高效率。<br>2.以时间换空间：对于程序来说，增加时间，减少效率，节省内存空间。</p><h2 id="二-计算"><a href="#二-计算" class="headerlink" title="二 计算"></a>二 计算</h2><p>1 时间复杂度（使用O符号表示法，表示代码执行时间的增长变化趋势）<br>　　T(n)=O(f(n)) 　　// f(n)表示每行代码执行次数之和，O表示正比例关系<br>2 空间复杂度 S(n)</p><h2 id="三-常用的复杂度量级"><a href="#三-常用的复杂度量级" class="headerlink" title="三 常用的复杂度量级"></a>三 常用的复杂度量级</h2><p>1 时间复杂度（从上往下复杂性增加）<br>常数阶O(1)：消耗的时间并不随某个变量n变化而变化<br>对数阶O(logN)：当数据增大n倍，耗时增大logn倍（以2为底）。如二分查找<br>线性阶O(n)：如n决定的for循环，消耗的时间随着n的变化而变化<br>线性对数阶O(nlogN)：将时间复杂度为O(logN)的代码循环N遍，如归并排序<br>平方阶O(n²)：把 O(n) 的代码再嵌套循环一遍<br>立方阶O(n³)：3层N循环<br>K次方阶O(n^k)：k层N循环<br>指数阶(2^n)</p><p>2 时间复杂度<br>O(1)：所需要的临时空间并不随某个变量n变化而变化<br>O(n)：如new了一个大小为n的数组，int[] m = new int[n];<br>O(n^2)</p><h1 id="2、掌握线性表的概念，掌握堆栈、队列、跳表和散列的描述方法与应用。"><a href="#2、掌握线性表的概念，掌握堆栈、队列、跳表和散列的描述方法与应用。" class="headerlink" title="2、掌握线性表的概念，掌握堆栈、队列、跳表和散列的描述方法与应用。"></a>2、掌握线性表的概念，掌握堆栈、队列、跳表和散列的描述方法与应用。</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表是最基本、最简单、也是最常用的一种数据结构。线性表（linear list）是数据结构的一种，一个线性表是n个具有相同特性的数据元素的有限序列。<br>线性表中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的（注意，这句话只适用大部分线性表，而不是全部。比如，循环链表逻辑层次上也是一种线性表（存储层次上属于链式存储，但是把最后一个数据元素的尾指针指向了首位结点）。</p><h2 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h2><p>堆栈都是一种数据项按序排列的数据结构，只能在一端(称为栈顶(top))对数据项进行插入和删除。在单片机应用中，堆栈是个特殊的存储区，主要功能是暂时存放数据和地址，通常用来保护断点和现场。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p><h2 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h2><p>增加了向前指针的链表叫作跳表。跳表全称叫做跳跃表，简称跳表。跳表是一个随机化的数据结构，实质就是一种可以进行二分查找的有序链表。跳表在原有的有序链表上面增加了多级索引，通过索引来实现快速查找。跳表不仅能提高搜索性能，同时也可以提高插入和删除操作的性能。</p><h2 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h2><p>Hash，一般翻译做散列、杂凑，或音译为哈希，是把任意长度的输入（又叫做预映射pre-image）通过散列算法变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。</p><h1 id="3、了解树的描述方法与应用。"><a href="#3、了解树的描述方法与应用。" class="headerlink" title="3、了解树的描述方法与应用。"></a>3、了解树的描述方法与应用。</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>树是一种数据结构，它是由n(n≥1)个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。</p><p>它具有以下的特点：<br>每个节点有零个或多个子节点；<br>没有父节点的节点称为根节点；<br>每一个非根节点有且只有一个父节点；<br>除了根节点外，每个子节点可以分为多个不相交的子树。</p><h2 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h2><p>无序树：树中任意节点的子结点之间没有顺序关系，这种树称为无序树,也称为自由树；<br>有序树：树中任意节点的子结点之间有顺序关系，这种树称为有序树；<br>二叉树：每个节点最多含有两个子树的树称为二叉树；<br>满二叉树：叶节点除外的所有节点均含有两个子树的树被称为满二叉树；<br>完全二叉树：除最后一层外，所有层都是满节点，且最后一层缺右边连续节点的二叉树称为完全二叉树；<br>哈夫曼树（最优二叉树）：带权路径最短的二叉树称为哈夫曼树或最优二叉树。</p><h1 id="4、了解图的描述方法与应用。"><a href="#4、了解图的描述方法与应用。" class="headerlink" title="4、了解图的描述方法与应用。"></a>4、了解图的描述方法与应用。</h1><p>一个图就是一些顶点的集合，这些顶点通过一系列边结对（连接）。顶点用圆圈表示，边就是这些圆圈之间的连线。顶点之间通过边连接。</p><p>有向图</p><p>加权图</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-计算机基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础知识（三）操作系统</title>
      <link href="/2021/10/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%BA%8C%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/10/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%BA%8C%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="1、掌握操作系统的概念和操作系统结构。"><a href="#1、掌握操作系统的概念和操作系统结构。" class="headerlink" title="1、掌握操作系统的概念和操作系统结构。"></a>1、掌握操作系统的概念和操作系统结构。</h1><p>操作系统（Operating System, OS）是计算机系统中的核心系统软件，负责管理和控制计算机系统中的硬件和软件资源，合理地组织计算机工作流程和有效地利用资源，在计算机与用户之间起接口的作用。操作系统为用户提供的接口表现形式一般为：命令、菜单、窗口之类的,而操作系统为应用程序提供的接口为API。</p><p><img src="/images/bigdata/2-1.png"></p><h1 id="2、掌握操作系统的进程管理，包括进程概念、进程调度、同步及死锁处理。"><a href="#2、掌握操作系统的进程管理，包括进程概念、进程调度、同步及死锁处理。" class="headerlink" title="2、掌握操作系统的进程管理，包括进程概念、进程调度、同步及死锁处理。"></a>2、掌握操作系统的进程管理，包括进程概念、进程调度、同步及死锁处理。</h1><h2 id="进程概念"><a href="#进程概念" class="headerlink" title="进程概念"></a>进程概念</h2><p>处理机是计算机系统的核心资源。操作系统的功能之一就是处理机管理。随着计算机的迅速发展，处理机管理显得更为重要，这主要由于计算机的速度越来越快，处理机的充分利用有利于系统效率的大大提高；处理机管理是整个操作系统的重心所在，其管理的好坏直接影响到整个系统的运行效率；而且操作系统中并发活动的管理和控制是在处理机管理下实现的，处理机管理集中了操作系统中最复杂的部分，它设计的好坏关系到整个系统的成败。</p><p>进程是处理机管理中最基本的、最重要的概念。进程是系统并发执行的体现。由于在多道程序系统中，众多的计算机用户都以各种各样的任务，随时随地争夺使用处理机。为了动态地看待操作系统，则以进程作为独立运行的基本单位，以进程作为分配资源的基本单位，从进程的角度来究操作系统。因此，处理机管理也被称为进程管理。处理机管理的功能就是组织和协调用户对处理机的争夺使用，把处理机分配给进程，对进程进行管理和控制，最大限度也发挥处理机的作用。</p><p>由进程运行的间断性，决定了进程至少具有以下三种状态：<br>(1) 就绪状态。当进程分配了除 CPU 以外的所有必要的资源后，只要能再获得处理机，便能立即执行，把这时的进程状态称为就绪状态。在一个系统中，可以有多个进程同时处于就绪状态，通常把它们排成一个队列，称为就绪队列。<br>(2) 执行状态指进程已获得处理机，其程序正在执行。在单处理机系统中，只能有个进程处于执行状态。<br>(3)阻塞状态指进程因发生某事件(如请求、I/O、申请缓冲空间等）而暂停执行时的状态，亦即进程的执行受到阻塞，故称这种暂停状态为阻塞状态，有时也称为“等待”状态，或“睡眠”状态。通常将处于阻塞状态的进程排成一个队列，称为阻塞队列。</p><p><img src="/images/bigdata/2-2.png"></p><p>具有挂起操作的进程状态的演变情况如下。</p><p><img src="/images/bigdata/2-3.png"></p><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>进程同步定义为：把异步环境下的一组并发进程因直接制约而互相发送消息而进行互相合作、互相等待，使得各进程按一定的速度执行的过程称为进程同步。也就是说进程之间是异步执行的，同步即是使各进程按一定的制约顺序和速度执行。</p><h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h2><p>进程调度即处理器调度（又称上下文转换），它的主要功能是确定在什么时候分配处理器，并确定分给哪一个进程，即让正在执行的进程改变状态并转入就绪队列的队尾，再由调度原语将就绪队列的队首进程取出，投入执行。</p><p>引起进程调度的原因有以下几类：<br> (1) 正在执行的进程执行完毕。<br> (2) 执行中的进程自己调用阻塞原语将自己阻塞起来进入睡眠状态。<br> (3) 执行中的进程调用了 P 原语操作，从而因资源不足而阻塞；或调用 V 原语操作激活了等待资源的进程队列。<br> (4) 在分时系统中，当一进程用完一个时间片。<br> (5) 就绪队列中某进程的优先级变得高于当前执行进程的优先级，也将引起进程调度。</p><p>进程调度的方式有两类：剥夺方式与非剥夺方式。所谓非剥夺方式是指，一旦某个作业或进程占用了处理器，别的进程就不能把处理器从这个进程手中夺走，直到该进程自己因调用原语操作而进入阻塞状态，或时间片用完而让出处理机；剥夺方式是指，当就绪队列中有进程的优先级高于当前执行进程的优先级时，便立即发生进程调度，转让处理机。</p><p>进程调度的算法是服务于系统目标的策略，对于不同的系统与系统目标，常采用不同的调度算法：<br>(1) 先来先服务（First Come and First Serverd, FCFS）调度算法，又称先进先出（First In  and First Out, FIFO）。就绪队列按先来后到原则排队。<br>(2) 优先数调度。优先数反映了进程优先级，就绪队列按优先数排队。有两种确定优先级的方法，即静态优先级和动态优先级。静态优先级是指进程的优先级在进程开始执行前确定，执行过程中不变，而动态优先级则可以在进程执行过程中改变。<br>(3) 轮转法（Round Robin）。就绪队列按 FCFS 方式排队。每个进程执行一次占有处理器时间都不超过规定的时间单位（时间片）若超过，则自行释放自己所占有的 CPU 而排到就绪队列的末尾，等待下一次调度。同时，进程调度程序又去调度当前就绪队列中的第个进程。</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>进程管理是操作系统的核心，在进程管理的实现中，如果设计不当，会出现一种尴尬的局面一一死锁。</p><p>当若干个进程互相竟争对方已占有的资源，无限期地等待，不能向前推进时会造成“死锁”。例如，P1 进程占有资源 R1, P2 进程占有资源 R2, 这时，P1 又需要资源 R2, P2 也需要资源 R1, 它们在等待对方占有的资源时，又不会释放自己占有的资源，因而使双方都进入了无限等待状态。</p><p>死锁是系统的一种出错状态，它不仅会浪费大量的系统资源，甚至还会导致整个系统的崩溃，所以死锁是应该尽量预防和避免的。<br>(1) 死锁条件。产生死锁的主要原因是供共享的系统资源不足，资源分配策略和进程的推进顺序不当。系统资源既可能是可重复使用的永久性资源，也可能是消耗性的临时资源。产生死锁的必要条件是：互斥条件、保持和等待条件、不剥夺条件和环路等待条件。<br>(2) 解决死锁的策略。处于死锁状态的进程不能继续执行但又占用了系统资源，从而阻碍其他作业的执行。</p><p>解决死锁有两种策略：一种是在死锁发生前采用的预防和避免策略；另一种是在死锁发生后采用的检测与恢复策略。<br>死锁的预防主要是通过打破死锁产生的 4 个必要条件之一来保证不会产生死锁。采用的死锁预防策略通常有资源的静态分配法或有序分配法，它们分别打破了资源动态分配条件和循环等待条件，因此不会发生死锁。但这样做会大大降低系统资源的利用率和进程之间的并行程度。<br>死锁避免策略，则是在系统进行资源分配时，先执行一个死锁避免算法（典型的如银行家算法），以保证本次分配不会导致死锁发生。由于资源分配很频繁，因此死锁避免策略要耗费大量的 CPU 和时间。</p><h1 id="3、掌握内存管理，包括内存管理策略和虚拟内存管理。"><a href="#3、掌握内存管理，包括内存管理策略和虚拟内存管理。" class="headerlink" title="3、掌握内存管理，包括内存管理策略和虚拟内存管理。"></a>3、掌握内存管理，包括内存管理策略和虚拟内存管理。</h1><p>存储管理主要是指对内存储器的管理，负责对内存的分配和回收、内存的保护和内存的扩充。存储管理的目的是尽量提高内存的使用效率。存储管理的机制经历了多次变迁，由以前的单一连续区管理到分区存储管理再发展为段页式管理。目前前两种技术已逐步被淘汰，下面我们将详细解读段页式存储管理。</p><h2 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h2><h3 id="1．页式存储管理"><a href="#1．页式存储管理" class="headerlink" title="1．页式存储管理"></a>1．页式存储管理</h3><p>分页的基本思想是把程序的逻辑空间和内存的物理空间按照同样的大小划分成若干页面，并以页面为单位进行分配。在页式存储管理中，系统中虚地址是一个有序对（页号，位移）。系统为每一个进程建立一个页表，其内容包括进程的逻辑页号与物理页号的对应关系、状态等。<br>为此，在装入作业时，就应在该作业的页表中指出哪些页已在内存储器中，哪些页还没有装入内存。可用一个标志位指示对应页是否在内存储器，可假设标志位为 1 表示该页在内存，而标志位为 0 表示该页尚未装入内存。为了能方便地从磁盘上找到作业信息的副本，故在页表中还可指出每一页副本在磁盘上的位置。<br>当要装入一个当前需要的页面时，如果内存储器中无空闲块，则可选择一个已在内存储器中的页面，把它暂时调出内存。若在执行中该页面被修改过，则把该页信息重新写回到磁盘上，否则不必重新写回磁盘。当一页被暂时调出内存后，让出的内存空间用来存放当前需要使用的页面。以后再使用被调出的页面时，可用同样的方法调出另一个页面而将其再装入内存。页面被调出或装入之后都要对页表中的相应表目做修改。<br>当内存中无空闲块时，为了装入一个页面而必须按某种算法从已在内存的页中选择一页，将它暂时调出内存，让出内存空间以存放所需装入的页面，这个工作称为“页面调度”。如何选择调出的页面是很重要的，如果采用了一个不合适的算法，就会出现这样的现象：刚被调出的页面又立即要用，因而又要把它装入，而装入不久又被选中调出，调出不久又被装入，如此反复，使调度非常频繁。这种现象称为“抖动”。一个好的调度算法应减少或避免抖动现象。常用的页面调度算法有：<br>(1) 最优（OPT）算法。选择不再使用或最远的将来才被使用的页，这是理想的算法，但是难以实现，常用于淘汰算法的比较。<br>(2) 随机（RAND）算法。随机地选择被淘的页，开销小，但是可能选中立即就要访问的页。<br>(3) 先进先出算法。选择在内存驻留时间最长的页似乎合理，但可能淘汰掉频繁使用的页。另外，使用 FIFO 算法时，在未给予进程分配足够的页面数时，有时会出现给予进程的页面数增多，缺页次数反而增加的异常现象。FIFO 算法简单，易实现。可以把装入内存储器的那些页的页号按进入的先后顺序排成队列，每次总是调出队首的页，当装入一个新页后，把新页的页号排到队尾。<br>(4) 最近最少使用（Least Recently Used, LRU）算法。选择离当前时间最近的一段时间内使用得最少的页。这个算法的主要出发点是，如果某个页被访问了，则它可能马上就要被访问；反之，如果某个页长时间未被访问，则它在最近一段时间也不会被访问。</p><h3 id="2．段式存储管理"><a href="#2．段式存储管理" class="headerlink" title="2．段式存储管理"></a>2．段式存储管理</h3><p>段式存储管理与页式存储管理相似。分段的基本思想是把用户作业按逻辑意义上有完整意义的段来划分，并以段为单位作为内外存交换的空间尺度。<br>个作业是由若干个具有逻辑意义的段（如主程序、子程序、数据段等）组成。分段系统中，容许程序（作业）占据内存中许多分离的分区。每个分区存储一个程序分段。这样，每个作业需要几对界限地址寄存器，判定访问地址是否越界也就更困难了。在分段存储系统中常常利用存储保护键实现存储保护。分段系统中虚地址是一个有序对（段号，位移）。系统为每个作业建立一个段表，其内容包括段号、段长、内存起始地址和状态等。状态指出这个段是否已调入内存，即内存起始地址指出这个段，状态指出这个段的访问权限。<br>分段系统的动态地址转换是这样进行的：进程执行时，其段表的首地址已在基本地址寄存器中，执行的指令访问虚存（s, d)（取指令或取操作数）时，首先根据段号 s 査段表，若段已经调入内存，则得到该段的内存起始地址，然后与段内相对地址（段内偏移量 d 相加，得到实地址。如果该段尚未调入内存，则产生缺段中断，以装入所需要的段。<br>段式虚拟存储管理仍然以段式存储管理为基础，为用户提供比内存实际容量大的虚拟空间。段式虚拟存储管理把作业中的各个分段信息都保留在磁盘上，当作业可以投入执行时，做如下操作：<br>(1) 首先把当前需要的一段或几段装入内存。<br>(2) 作业执行时，如果要访问的段已经在内存，则按照“段式存储管理”中的方式进行地址转换；如果要访问的段不在内存中，则产生一“缺段中断”，由操作系统把当前需要的段装入内存。<br>因此，在段表中应增设段是否在内存的标志以及各段在磁盘上的位置，已在内存中的段仍要指出该段在内存中的起始地址和占用内存区长度。<br>作业执行要访问的段时，由硬件的地址转换机构査段表。若该段在内存中，则立即把逻辑地址转换成绝对地址；若该段不在内存中，则形成“缺段中断”，由操作系统处理这个中断。<br>处理的办法是，査内存分配表，找出一个足够大的连续区以容纳该分段，如果找不到足够大的连续区则检査空闲区的总和，若空闲区总和能满足该段要求，那么进行适当移动将分散的空闲区集中；若空闲区总和不能满足该段要求，可把内存中的一段或几段调出，然后把当前要访问的段装入内存中。段被移动、调出和装入后都要对段表中的相应表目做修改。新的段被装入后应让作业重新执行被中断的指令，这时就能找到要访问的段，也可以继续执行下去。</p><h3 id="3．段页式存储管理"><a href="#3．段页式存储管理" class="headerlink" title="3．段页式存储管理"></a>3．段页式存储管理</h3><p>段页式管理是段式和页式两种管理方法结合的产物，综合了段式组织与页式组织的特点，根据程序模块分段，段内再分页，内存被分划成定长的页。段页式系统中虚地址形式是（段号、页号、页内偏移）。系统为每个进程建立一个段表，为每个段建立一个页表。段页式管理采用段式分配、页式使用的方法，便于动态连接和存储的动态分配。这种存储管理能提高内存空间的利用率。<br>段式虚拟管理还是以段为单位分配内存空间，整段的调出、装入，有时还要移动，这些都增加了系统的开销。如果按段页式存储管理的方式，把每一段再分成若干页面，那么，每段不必占用连续的存储空间；甚至当内存块不够时，可只将一段中的部分页面装入内存这种管理方式称为“段页式虚拟存储管理”。<br>段页式虚拟存储管理为每一个装入内存的作业建立一张段表，还要为每一段建立页表。段表中指出该段的页表存放位置及长度，页表中应指出该段的各页在磁盘上的位置以及页是否在内存中，若在内存中则填上占用的内存块号。作业执行时按段号查段表，找到相应的页表再根据页号查页表，由标志位判定该页是否已在内存，若是，则进行地址转换；否则进行页面调度。<br>段页式虚拟存储管理结合了段式和页式的优点，但增加了设置表格（段表、页表）和査表等开销，段页式虚拟存储器一般只在大型计算机系统中使用。</p><h1 id="4、了解存储管理，包括文件系统、文件系统实现、大容量存储结构和-I-O-系统。"><a href="#4、了解存储管理，包括文件系统、文件系统实现、大容量存储结构和-I-O-系统。" class="headerlink" title="4、了解存储管理，包括文件系统、文件系统实现、大容量存储结构和 I/O 系统。"></a>4、了解存储管理，包括文件系统、文件系统实现、大容量存储结构和 I/O 系统。</h1><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>文件系统是操作系统用于明确存储设备（常见的是磁盘，也有基于NAND Flash的固态硬盘）或分区上的文件的方法和数据结构；即在存储设备上组织文件的方法。操作系统中负责管理和存储文件信息的软件机构称为文件管理系统，简称文件系统。</p><h2 id="文件系统实现"><a href="#文件系统实现" class="headerlink" title="文件系统实现"></a>文件系统实现</h2><p>文件系统由三部分组成：文件系统的接口，对对象操纵和管理的软件集合，对象及属性。</p><p>从系统角度来看，文件系统是对文件存储设备的空间进行组织和分配，负责文件存储并对存入的文件进行保护和检索的系统。具体地说，它负责为用户建立文件，存入、读出、修改、转储文件，控制文件的存取，当用户不再使用时撤销文件等。</p><h2 id="大容量存储结构"><a href="#大容量存储结构" class="headerlink" title="大容量存储结构"></a>大容量存储结构</h2><p><img src="/images/bigdata/2-4.png"></p><h2 id="I-O-系统"><a href="#I-O-系统" class="headerlink" title="I/O 系统"></a>I/O 系统</h2><p>概念I/O系统,英文全称为“Input output system”，中文全称为“输入输出系统”，由输入输出控制系统和外围设备两部分组成，是计算机系统的重要组成部分。在计算机系统中，通常把处理器和主存储器之外的部分称为输入输出系统。<br>作用：对指定外设进行I/O操作，同时完成许多其他的控制。包括外设编址，数据通路的建立，向主机提供外设的状态信息等。<br>结构输入输出控制系统：在计算机中对外围设备实施控制的系统。主要功能是：向外围设备发送动作命令、控制输入输出数据的传送、检测外围设备的状态。输入输出设备必须通过该系统同中央处理器和主存储器交换数据。<br>输入输出控制系统按控制方式分为中央处理器程序控制、直接存储器存取控制、输入输出处理机控制三种。输入输出处理机控制又由通道控制方式和外围处理机控制方式组成。<br>应用：现代计算机系统中配置了大量的外围设备，即I/O设备。依据它们的工作方式的不同，通常进行如下分类。<br>（1）字符设备（character device），又叫做人机交互设备。用户通过这些设备实现与计算机系统的通信。它们大多是以字符为单位发送和接受数据的，数据通信的速度比较慢。例如，键盘和显示器为一体的字符终端、打印机、扫描仪、包括鼠标等，还有早期的卡片和纸带输入和输出机。含有显卡的图形显示器的速度相对较快，可以用来进行图像处理中的复杂图形的显示。<br>（2）块设备（block device），又叫外部存储器，用户通过这些设备实现程序和数据的长期保存。与字符设备相比，它们是以块为单位进行传输的，如磁盘、磁带和光盘等。块的常见尺寸为512~32768B之间。<br>（3）网络通信设备。这类设备主要有网卡、调制解调器等，主要用于与远程设备的通信。这类设备的传输速度比字符设备高，但比外部存储器低。这种分类的方法并不完备，有些设备并没有包括。例如，时钟既不是按块访问，也不是按字符访问，它所做的是按照预先规定好的时间间隔产生中断。但是这种分类足以使操作系统构造出处理I/O设备的软件，使它们独立于具体的设备。</p><h1 id="5、了解系统保护与安全。"><a href="#5、了解系统保护与安全。" class="headerlink" title="5、了解系统保护与安全。"></a>5、了解系统保护与安全。</h1><p>保护和安全性要求保护计算机资源，例如CPU，软件，内存等。这扩展到操作系统以及系统中的数据。这可以通过确保操作系统中的完整性，机密性和可用性来完成。该系统必须防止未经授权的访问，病毒，蠕虫等。</p><h2 id="保护与安全威胁"><a href="#保护与安全威胁" class="headerlink" title="保护与安全威胁"></a>保护与安全威胁</h2><p>威胁是一种本质上是恶意的程序，会对系统造成有害影响。系统中发生的一些常见威胁是-</p><h2 id="病毒"><a href="#病毒" class="headerlink" title="病毒"></a>病毒</h2><p>病毒通常是嵌入在系统中的一小段代码。它们非常危险，会损坏文件，破坏数据，崩溃系统等。它们还可以通过根据需要进行自我复制而进一步传播。</p><h2 id="特洛伊木马"><a href="#特洛伊木马" class="headerlink" title="特洛伊木马"></a>特洛伊木马</h2><p>特洛伊木马可以秘密访问系统的登录详细信息。然后，恶意用户可以使用它们以无害的方式进入系统并造成严重破坏。</p><h2 id="活板门"><a href="#活板门" class="headerlink" title="活板门"></a>活板门</h2><p>活板门是一种安全漏洞，可能会在用户不知情的情况下出现在系统中。恶意人员可以利用它来损坏系统中的数据或文件。</p><h2 id="虫"><a href="#虫" class="headerlink" title="虫"></a>虫</h2><p>蠕虫可以通过极端利用其资源来破坏系统。它可以生成多个副本，这些副本要求所有资源，并且不允许任何其他进程访问它们。蠕虫可以通过这种方式关闭整个网络。</p><h2 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a>拒绝服务</h2><p>这些类型的攻击不允许合法用户访问系统。它使请求不堪重负，使系统不堪重负，无法为其他用户正常使用。</p><h2 id="保护和安全方法"><a href="#保护和安全方法" class="headerlink" title="保护和安全方法"></a>保护和安全方法</h2><p>可以为不同的计算机系统提供保护和安全性的不同方法是-</p><h2 id="认证方式"><a href="#认证方式" class="headerlink" title="认证方式"></a>认证方式</h2><p>这涉及识别系统中的每个用户并确保他们是他们声称的身份。操作系统确保所有用户在访问系统之前均已通过身份验证。确保用户真实性的不同方法是：</p><ol><li><p>用户名密码<br>每个用户都有不同的用户名和密码组合，他们需要正确输入用户名才能访问系统。</p></li><li><p>用户键/用户卡<br>用户需要将卡打孔到卡槽中，或者使用键盘上的单个键来访问系统。</p></li><li><p>用户属性识别<br>可以使用的不同用户属性标识包括指纹，视网膜眼等。这些属性标识对于每个用户都是唯一的，并与数据库中的现有样本进行比较。如果存在匹配项，则用户只能访问系统。</p></li></ol><h2 id="一次性密码"><a href="#一次性密码" class="headerlink" title="一次性密码"></a>一次性密码</h2><p>这些密码为身份验证提供了很大的安全性。每次用户想要进入系统时，都可以专门为登录生成一次密码。不能多次使用。一次性密码的实现方式有以下几种：</p><ol><li><p>随机数<br>系统可以要求与预先排列的字母相对应的数字。每次需要登录时，都可以更改此组合。</p></li><li><p>键<br>硬件设备可以创建与用于登录的用户ID相关的键。该键可以每次更改。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-计算机基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础知识（四）计算机网络</title>
      <link href="/2021/10/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%BA%8C%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%9B%9B%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2021/10/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%BA%8C%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%9B%9B%EF%BC%89%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="1、了解计算机网络在信息时代的核心作用以及计算机网络的发展历史；理解计算机网络的分类，网络标准化，网络参考模型，网络体系结构。"><a href="#1、了解计算机网络在信息时代的核心作用以及计算机网络的发展历史；理解计算机网络的分类，网络标准化，网络参考模型，网络体系结构。" class="headerlink" title="1、了解计算机网络在信息时代的核心作用以及计算机网络的发展历史；理解计算机网络的分类，网络标准化，网络参考模型，网络体系结构。"></a>1、了解计算机网络在信息时代的核心作用以及计算机网络的发展历史；理解计算机网络的分类，网络标准化，网络参考模型，网络体系结构。</h1><h2 id="计算机网络在信息时代的核心作用"><a href="#计算机网络在信息时代的核心作用" class="headerlink" title="计算机网络在信息时代的核心作用"></a>计算机网络在信息时代的核心作用</h2><ol><li>21 世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。<br>数字化：所有的东西以数字的形式存储在计算机中（二进制）。<br>信息化：用于传递信息<br>网络化：载体</li><li>网络现已成为信息社会的命脉和发展知识经济的重要基础。</li><li>网络是指“三网”，即电信网络、有线电视网络和计算机网络。</li><li>发展最快的并起到核心作用的是计算机网络。</li></ol><h2 id="计算机网络的发展历史"><a href="#计算机网络的发展历史" class="headerlink" title="计算机网络的发展历史"></a>计算机网络的发展历史</h2><p>（1）网络雏形阶段。从20世纪50年代中期开始，以单个计算机为中心的远程联机系统，构成面向终端的计算机网络，称为第一代计算机网络。<br>（2）网络初级阶段。从20世纪60年代中期开始进行主机互联，多个独立的主计算机通过线路互联构成计算机网络，无网络操作系统，只是通信网。60年代后期，ARPANET网出现，称为第二代计算机网络。<br>（3）20世纪70年代至80年代中期，以太网产生，ISO制定了网络互连标准OSI，世界上具有统一的网络体系结构，遵循国际标准化协议的计算机网络迅猛发展，这阶段的计算机网络称为第三代计算机网络。<br>（4）从20世纪90年代中期开始，计算机网络向综合化高速化发展，同时出现了多媒体智能化网络，发展到现在，已经是第四代了。局域网技术发展成熟。第四代计算机网络就是以千兆位传输速率为主的多媒体智能化网络。</p><h2 id="网络的分类"><a href="#网络的分类" class="headerlink" title="网络的分类"></a>网络的分类</h2><p><img src="/images/bigdata/2-5.jpg"></p><h2 id="网络标准化"><a href="#网络标准化" class="headerlink" title="网络标准化"></a>网络标准化</h2><h2 id="网络参考模型"><a href="#网络参考模型" class="headerlink" title="网络参考模型"></a>网络参考模型</h2><p>OSI（Open System Interconnect），即开放式系统互连。 一般都叫OSI参考模型，是ISO组织在1985年研究的网络互连模型。该体系结构标准定义了网络互连的七层框架（物理层、数据链路层、网络层、传输层、会话层、表示层和应用层），即OSI开放系统互连参考模型。</p><h2 id="网络体系结构"><a href="#网络体系结构" class="headerlink" title="网络体系结构"></a>网络体系结构</h2><p>网络体系结构是指通信系统的整体设计，它为网络硬件、软件、协议、存取控制和拓扑提供标准。它广泛采用的是国际标准化组织（ISO）在1979年提出的开放系统互连（OSI-Open System Interconnection)的参考模型。 </p><h1 id="2、掌握物理层的基本概念，理解信道极限容量的概念以及信道最大传输速率的公式，模拟传输和数字化传输的物理层标准。"><a href="#2、掌握物理层的基本概念，理解信道极限容量的概念以及信道最大传输速率的公式，模拟传输和数字化传输的物理层标准。" class="headerlink" title="2、掌握物理层的基本概念，理解信道极限容量的概念以及信道最大传输速率的公式，模拟传输和数字化传输的物理层标准。"></a>2、掌握物理层的基本概念，理解信道极限容量的概念以及信道最大传输速率的公式，模拟传输和数字化传输的物理层标准。</h1><p><img src="/images/bigdata/2-6.png"><br><img src="/images/bigdata/2-7.png"><br><img src="/images/bigdata/2-8.png"></p><h2 id="模拟传输和数字化传输"><a href="#模拟传输和数字化传输" class="headerlink" title="模拟传输和数字化传输"></a>模拟传输和数字化传输</h2><h3 id="1-模拟传输系统"><a href="#1-模拟传输系统" class="headerlink" title="1.模拟传输系统"></a>1.模拟传输系统</h3><p>尽管模拟传输劣于数字传输（传输过程中，模拟传输容易受干扰，信号易衰减，安全性也不高），但由于采用模拟传输技术的电话网在计算机网络出现以前就已运行了近一个世纪，因此世界各地几乎都有这种电话网，虽然数字传输和数字网是今后网络的发展方向，但要完全取代模拟传输还需要相当长一段时间。</p><p>模拟传输方式的传输方式分为：导向型和非导向型。导向型的有双绞线，同轴电缆和光缆。</p><p>几种最基本的调制方法:<br>调幅(AM) 即载波的振幅随基带数字信号而变化。<br>调频(FM) 即载波的频率随基带数字信号而变化<br>调相(PM) 即载波的初始相位随基带数字信号而变化。</p><h3 id="2-数字传输系统"><a href="#2-数字传输系统" class="headerlink" title="2.数字传输系统"></a>2.数字传输系统</h3><p>由于数字传输优于模拟传输，因此可以把模拟信号先变换成数字信号，再在信道上进行数字传输。将模拟信号变换为数字信号的常用方法是脉码调制PCM(Pulse Code Modulation)。<br>优越性：<br>1、数字传输误码率低：数字再生器能准确恢复信号，模拟放大器放大信号同时将畸变信号同时放大；<br>2、差错可控，数字信号在传输过程中出现的差错可通过纠错编码技术来控制；<br>3、数字传输易加密和解密，通信的保密性好；<br>4、易于与现代技术相结合，由于计算机、数字存储、数字交换以及数字处理等现代技术飞速发展，许多设备、终端接口均采用数字信号，因此极易与数字通信系统相连接。</p><h1 id="3、掌握数据链路层的基本概念，理解停等协议和连续ARQ协议，滑动窗口协议，检错和纠错机制。"><a href="#3、掌握数据链路层的基本概念，理解停等协议和连续ARQ协议，滑动窗口协议，检错和纠错机制。" class="headerlink" title="3、掌握数据链路层的基本概念，理解停等协议和连续ARQ协议，滑动窗口协议，检错和纠错机制。"></a>3、掌握数据链路层的基本概念，理解停等协议和连续ARQ协议，滑动窗口协议，检错和纠错机制。</h1><p>数据链路层是OSI参考模型中的第二层，介乎于物理层和网络层之间。数据链路层在物理层提供的服务的基础上向网络层提供服务，其最基本的服务是将源自物理层来的数据可靠地传输到相邻节点的目标机网络层。</p><h2 id="停等协议"><a href="#停等协议" class="headerlink" title="停等协议"></a>停等协议</h2><p>停等协议是发送双方传输数据的一种协议方式。<br>停等协议的接收、发送双方仅需设置一个帧的缓冲存储空间和帧序号只取0或1的两个状态标志位，便可有效地实现数据重发并确保接收方接受的数据不会重复。<br>操作过程：<br>（1）发送方每次仅将当前信息帧作为备份保留在缓冲存储器中；<br>（2）当发送方开始发送信息帧时，赋予该信息帧一个帧序号，随即启动计时器；<br>（3）当接收方收到无差错的信息帧后，即向发送方返回一个与该帧序号相同序号的ACK确认帧；<br>（4）当接收方检测到一个含有差错的信息帧时，便舍弃该帧；<br>（5）若发送方在规定时间内收到ACK确认帧，即将计时器清零，需而开始下一帧的发送；<br>（6）若发送方在规定时间内未收到ACK确认帧，则应重发存于缓冲器中的待确认信息帧。</p><h2 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h2><p>连续ARQ（Automatic Repeat reQuest）协议指发送方维持着一个一定大小的发送窗口，位于发送窗口内的所有分组都可连续发送出去，而中途不需要等待对方的确认。这样信道的利用率就提高了。而发送方每收到一个确认就把发送窗口向前滑动一个分组的位置。<br>接收方一般都是采用积累确认的方式。这就是说，接收方不必对收到的分组逐个发送确认，而是在收到几个分组后，对按序到达的最后一个分组发送确认，这就表示：到这个分组为止的所有分组都已正确收到了。<br>积累确认有优点也有缺点。优点是：容易实现，即使确认丢失也不必重传。但缺点是不能向发送方反映出接收方已经正确收到的所有分组的信息。<br>例如，如果发送方发送了前5个分组，而中间的第3个分组丢失了。这时接收方只是对前两个分组发出确认。发送方无法知道后面三个分组的下落，而只好把后面的三个分组都再重传一次。这就叫做Go-back-N（回退N），表示需要再退回来重传已发送过的N个分组。可见当通信线路质量不好时，连续ARQ协议会带来负面的影响。</p><h2 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a>滑动窗口协议</h2><p>滑动窗口协议（Sliding Window Protocol），属于TCP协议的一种应用，用于网络数据传输时的流量控制，以避免拥塞的发生。该协议允许发送方在停止并等待确认前发送多个数据分组。由于发送方不必每发一个分组就停下来等待确认。因此该协议可以加速数据的传输，提高网络吞吐量。</p><p>滑动窗口的范畴：TCP是双工的协议，会话的双方都可以同时接收和发送数据。TCP会话的双方都各自维护一个发送窗口和一个接收窗口。各自的接收窗口大小取决于应用、系统、硬件的限制（TCP传输速率不能大于应用的数据处理速率）。各自的发送窗口则要求取决于对端通告的接收窗口，要求相同。</p><p>滑动窗口解决的是流量控制的的问题，就是如果接收端和发送端对数据包的处理速度不同，如何让双方达成一致。接收端的缓存传输数据给应用层，但这个过程不一定是即时的，如果发送速度太快，会出现接收端数据overflow，流量控制解决的是这个问题。</p><p>窗口的概念<br>发送方的发送缓存内的数据都可以被分为4类:</p><ol><li>已发送，已收到ACK</li><li>已发送，未收到ACK</li><li>未发送，但允许发送</li><li>未发送，但不允许发送</li></ol><p>其中类型2和3都属于发送窗口。</p><p>接收方的缓存数据分为3类：</p><ol><li>已接收</li><li>未接收但准备接收</li><li>未接收而且不准备接收</li></ol><p>其中类型2属于接收窗口。</p><p>窗口大小代表了设备一次能从对端处理多少数据，之后再传给应用层。缓存传给应用层的数据不能是乱序的，窗口机制保证了这一点。现实中，应用层可能无法立刻从缓存中读取数据。</p><p>滑动机制：</p><ol><li>发送窗口只有收到发送窗口内字节的ACK确认，才会移动发送窗口的左边界。</li><li>接收窗口只有在前面所有的段都确认的情况下才会移动左边界。当在前面还有字节未接收但收到后面字节的情况下，窗口不会移动，并不对后续字节确认。以此确保对端会对这些数据重传。</li><li>遵循快速重传、累计确认、选择确认等规则。</li><li>发送方发的window size = 8192;就是接收端最多发送8192字节，这个8192一般就是发送方接收缓存的大小。</li></ol><h2 id="检错与纠错机制"><a href="#检错与纠错机制" class="headerlink" title="检错与纠错机制"></a>检错与纠错机制</h2><p>差错的类型：<br>单比特差错：给定数据单元中只有一个bit出现差错<br>突发性差错：给定数据单元中有2位或者多位出现错误</p><p>检错：只需要知道有错误<br>纠错：改成错误</p><p>两种纠错方法：<br>1.向前纠错：需要知道错误的bit个数，以及错误的bit的位置，然后还有能更正<br>2.重传纠错：只要查出来有错误，就要求重传，直到没有错误位置</p><p>如何实现？<br>通过各种编码方案来设置冗余位。<br>发送方：将报文经过生成器生成 报文+冗余 然后传输给接受方<br>接受方 通过效验器效验数据，纠正或者丢弃。</p><p>编码方案:<br>1.块编码<br>2.汉明距离</p><h1 id="4、掌握介质访问控制子层的基本概念，理解动态多路访问控制协议，以太网，无线局域网，数据链路层的交换技术。"><a href="#4、掌握介质访问控制子层的基本概念，理解动态多路访问控制协议，以太网，无线局域网，数据链路层的交换技术。" class="headerlink" title="4、掌握介质访问控制子层的基本概念，理解动态多路访问控制协议，以太网，无线局域网，数据链路层的交换技术。"></a>4、掌握介质访问控制子层的基本概念，理解动态多路访问控制协议，以太网，无线局域网，数据链路层的交换技术。</h1><h2 id="介质访问控制子层"><a href="#介质访问控制子层" class="headerlink" title="介质访问控制子层"></a>介质访问控制子层</h2><p>多路访问链路（广播链路）采用共享介质连接所有站点。发送站点通过广播方式发送数据并占用整个共享介质的带宽。由于每个站点只需要一条网线接入网络就可以访问所有站点，这种网络一般安装简单，价格便宜。局域网（Local Area Network，LAN）都是使用这种链路。<br>在多路访问链路中多个站点同时发送数据，则会产生冲突。这种问题是点到点链路没有的，因此，需要重新考虑数据链路层的功能设计。<br>OSI把这种访问共享介质的功能专门划分为数据链路层的一个子层，就是介质访问控制子层（Media Access Control，MAC）。其功能是控制和协调所有站点对共享介质的访问，以避免或减少冲突。<br>因为MAC子层不提供可靠的数据传输，所以在MAC子层之上又定义了一个子层，逻辑链路控制子层（Logic Link Control，LLC），用来为上层协议提供服务。</p><h2 id="多路访问控制协议"><a href="#多路访问控制协议" class="headerlink" title="多路访问控制协议"></a>多路访问控制协议</h2><p>传输数据使用的两种链路：<br>#点对点链路：两个相邻结点通过一个链路相连。<br>  应用：PPP协议，常用于广域网。<br>#广播式链路：所有主机共享通信介质。<br>  应用：早期的总线以太网、802.11无线局域网，常用于局域网。<br>两个或以上结点同时发送数据时就会产生冲突，因此需要制定多路访问控制的规则。</p><p>多路访问控制协议可分为三大类：<br>一、信道划分MAC协议：静态划分（平分带宽，无论哪种都是平分，哪怕听起来多么像独占）<br>二、随机访问MAC协议：动态分配（独占）<br>三、轮转访问MAC协议：动态分配（独占）</p><h3 id="信道划分MAC协议"><a href="#信道划分MAC协议" class="headerlink" title="信道划分MAC协议"></a>信道划分MAC协议</h3><p>静态划分信道即，将使用介质的每个设备与来自同一信道上的其它设备的通信隔离开，把各个资源片合理地分配给各个设备。<br>适用于负载重的网络。</p><h4 id="FDMA（频分复用）"><a href="#FDMA（频分复用）" class="headerlink" title="FDMA（频分复用）"></a>FDMA（频分复用）</h4><p>并行模式，用户在分配到一定的频带后，在通信过程中始终使用这个频带，充分利用各个频带，信道利用率高，实现容易。</p><h4 id="WDMA（波分复用）"><a href="#WDMA（波分复用）" class="headerlink" title="WDMA（波分复用）"></a>WDMA（波分复用）</h4><p>本质上与频分复用相同，在一根光纤中传输多种不同波长的光信号，由于波长不同，所以各种光信号互不干扰。</p><h4 id="TDMA（时分复用）"><a href="#TDMA（时分复用）" class="headerlink" title="TDMA（时分复用）"></a>TDMA（时分复用）</h4><p>并发模式，将时间划分为一段段等长的时分复用帧。每一个时分复用的用户在每一个TDM帧中占用固定序号的时隙。所有用户轮流占用信道。</p><h4 id="STDM（统计时分复用）"><a href="#STDM（统计时分复用）" class="headerlink" title="STDM（统计时分复用）"></a>STDM（统计时分复用）</h4><p>将低速用户集中起来，通过集中器发送到高速信道上。每个STDM帧中的时隙数小于连接在集中器上的用户数，每个用户均可向集中器发送缓存，按需动态分配时隙。</p><h4 id="CDMA（码分复用）"><a href="#CDMA（码分复用）" class="headerlink" title="CDMA（码分复用）"></a>CDMA（码分复用）</h4><p>一个比特分为多个码片，每一个站点被指定一个唯一的m位的芯片序列。发送1时站点发送芯片序列，发送0时发送芯片序列反码。多个站点同时发送数据的时候，要求各个站点芯片序列相互正交。各路数据在信道中被线性相加，再由合并的数据和源站规格化内积分离。</p><h3 id="随机访问MAC协议"><a href="#随机访问MAC协议" class="headerlink" title="随机访问MAC协议"></a>随机访问MAC协议</h3><p>利用信道全部数据速率R发送分组，没有事先的结点间协调。需要定义如何检测冲突以及从冲突中恢复的机制。<br>适用于负载轻的网络。<br>随机访问MAC协议可分为两大类：<br>1、ALOHA：不听就说<br>2、CSMA：先听再说<br>CSMA/CD：先听再说，边听边说<br>CSMA/CA：先听再说，说完继续听</p><h4 id="ALOHA"><a href="#ALOHA" class="headerlink" title="ALOHA"></a>ALOHA</h4><p>当结点有新的帧时，立即发送；如果冲突，以概率p决定是否发送。<br>优点：简单，无需同步。<br>缺点：冲突可能性较大：[t0-1, t0+1]期间其他结点发送的帧冲突。</p><h4 id="时隙ALOHA"><a href="#时隙ALOHA" class="headerlink" title="时隙ALOHA"></a>时隙ALOHA</h4><p>所有帧大小相同，时间被划分为等长的时隙，结点只能在时隙开始时刻，结点间时钟同步。<br>当结点有新的帧时，在下一时隙发送：如果无冲突，直接发送；如果冲突，在下一时隙以概率p决定是否发送。<br>优点：<br>1、单个结点活动时可连续传输。<br>2、高度分散化，只需同步时隙。<br>3、简单。<br>缺点：<br>1、冲突，浪费时隙。<br>2、空闲时隙。</p><h4 id="CSMA"><a href="#CSMA" class="headerlink" title="CSMA"></a>CSMA</h4><p>CSMA（载波监听多路访问协议）即，在发送帧之前，需要监听信道。若信道空闲，发送完整帧；若信道忙，则推迟发送；若有冲突，则等待一个随机长的时间再监听。<br>1-坚持CSMA：空闲马上传输；否则持续监听直到空闲。<br>——提高信道利用率。<br>非坚持CSMA：空闲马上传输；否则不监听，等待一个随机长的时间再监听。<br>——减少冲突的发生。<br>p-坚持CSMA：空闲以p概率直接传输，以1-p概率等待到下一个时间槽再传输；否则等待下一个时隙再监听。（持续监听）<br>（修改：p-坚持CSMA用于时分信道，如果信道忙，那么等待下一个时隙再侦听。）<br>缺点：<br>1、仍然可能造成冲突。<br>2、继续发送导致资源浪费。</p><h4 id="CSMA-CD"><a href="#CSMA-CD" class="headerlink" title="CSMA/CD"></a>CSMA/CD</h4><p>CD即碰撞检测，在发送数据时也要检测总线上是否有其他计算机在发送数据。适用于总线型网络，半双工网络。<br>（1）如果信道空闲，立即发送数据并进行冲突检测；<br>（2）如果信道忙，继续侦听信道，直到信道变为空闲，立即发送数据并进行冲突检测。<br>（3）如果站点在发送数据过程中检测到冲突，立即停止发送数据并等待一随机长的时间，重新侦听信道。</p><p>截断二进制指数规避算法：基本退避时间为争用期2τ。<br>定义参数k为重传次数，k=min{重传次数, 10}。当重传次数不超过10时，k等于实际次数，否则等于10。从离散的整数集合[0， 1,. 2^k-1]中随机取出一个数r，重传所需要退避的时间就是r倍的基本退避时间，即2<em>r</em>τ。<br>当重传次数达16次时，说明网络太拥挤，抛弃此帧并向高层报告出错。<br>为了防止在检测碰撞之前即发送结束，需定义最短帧长，L/V ≥ 2τ。（以太网规定最短帧长为64B）<br>优点：冲突即停发，避免资源浪费。<br>补充：争用期是指信号在最远两个端点之间往返传输的时间。</p><h4 id="CSMA-CA"><a href="#CSMA-CA" class="headerlink" title="CSMA/CA"></a>CSMA/CA</h4><p>CA即碰撞避免，无线局域网无法做到全面检测碰撞，还存在隐蔽站的问题。适用于无线局域网。<br>发送数据前，先检测信道是否空闲。空闲则发出RTS，忙则等待。接收端收到RTS后，将响应CTS。发送端收到CTS时，开始发送数据帧，并预约信道（向所有人通知自己的数据帧长度，使他们不会在接下来的这段时间里尝试发送数据）。接收端收到数据帧后，将用CRC来检验数据是否正确，正确则响应ACK帧。发送方收到ACK就可以进行下一个数据帧的发送。<br>（1）如果信道空闲，继续等待IFS (InterFrame Space)时间，然后再侦听信道。如果仍然空闲，立即发送数据。<br>（2）如果信道忙，该站点继续侦听信道直到当前传输完全结束。<br>（3）一旦当前传输结束，站点继续等待IFS时间，然后再侦听信道，如果信道仍然保持空闲，节点按照指数后退一个随机长的时间后，发送数据。</p><h3 id="轮转访问MAC协议"><a href="#轮转访问MAC协议" class="headerlink" title="轮转访问MAC协议"></a>轮转访问MAC协议</h3><p>在网络负载重或轻时，都不是最差的协议。但适用于较重的网络。</p><h4 id="轮询协议"><a href="#轮询协议" class="headerlink" title="轮询协议"></a>轮询协议</h4><p>主结点轮流邀请从属节点发送数据。<br>缺点：<br>1、轮询开销。<br>2、等待延迟。<br>3、单点故障。</p><h4 id="令牌传递协议"><a href="#令牌传递协议" class="headerlink" title="令牌传递协议"></a>令牌传递协议</h4><p>令牌是一个特殊格式的MAC控制帧，不含任何信息，确保同一时刻只有一个结点独占信道。每个结点都可以在一定的时间内获得发送数据的权利，并不是无限制地持有。一定不会发生冲突。<br>缺点：<br>1、令牌开销。<br>2、等待延迟。<br>3、单点故障。</p><h1 id="5、了解网络层的基本概念，理解路由协议，拥塞控制算法，服务质量，网络互连，IP协议，子网掩码。"><a href="#5、了解网络层的基本概念，理解路由协议，拥塞控制算法，服务质量，网络互连，IP协议，子网掩码。" class="headerlink" title="5、了解网络层的基本概念，理解路由协议，拥塞控制算法，服务质量，网络互连，IP协议，子网掩码。"></a>5、了解网络层的基本概念，理解路由协议，拥塞控制算法，服务质量，网络互连，IP协议，子网掩码。</h1><h2 id="网络层的基本概念"><a href="#网络层的基本概念" class="headerlink" title="网络层的基本概念"></a>网络层的基本概念</h2><p>（一）网络层数据传输的特点<br>无连接：发送数据之前无需事先建立连接<br>不可靠：数据传输可能丢失，重复或失序<br>实现点到点的数据传输<br>（二）网络层实现数据传输遵循的协议<br>ip协议<br>（三）网络层传输的数据单元（PDU）<br>ip分组<br>ip数据包：ip报头+数据<br>（四）网络层地址<br>Ip地址（逻辑地址）<br>在网络中唯一标识一台主机或设备</p><h2 id="网络层的路由协议"><a href="#网络层的路由协议" class="headerlink" title="网络层的路由协议"></a>网络层的路由协议</h2><p>一、自治系统<br>自治系统（Autonomous System）是处于一个管理机构下的网络设备群<br>自治系统内部的网络自行管理，对外提供出口<br>二、DV算法<br>DV算法即距离矢量算法，它是基于图论的算法<br>每一个节点都拥有两个向量：Di（当前节点到别的节点的距离）和Si（当前节点到别的节点的下一节点）<br>每一个节点都会与相邻的节点交换Di和Si的信息，再根据交换的信息更新自己的节点信息<br>三、内部网关路由协议——RIP<br>RIP协议把网络的跳数作为DV算法的距离，每隔30秒交换一次路由信息<br>RIP协议把跳数大于15的路由视为不可达路由<br>缺陷：网络规模小，故障信息传递慢<br>四、Dijkstra算法<br>Dijkastra算法解决有权图从一个节点到其它节点的最短路径问题<br>初始化两个集合：S（只有初始顶点的集合）和U（其它顶点的集合），从U中取出距离A最近的一个顶点插入S，更新该顶点到U中所有点的最小距离，如此重复直至U为空<br>五、LS协议<br>LS协议会向所有路由器发送相邻路由器间的链路状态信息（链路状态包括距离、时延以及带宽等）<br>只有当链路状态发送变化时才发送信息<br>六、内部网关路由协议——OSPF<br>OSPF（Open Shortest Path First）即开放最短路径优先协议，它基于Dijkstra算法实现了LS协议<br>OSPF的五种信息：问候信息、链路状态数据库描述信息、链路状态请求信息、链路状态更新信息、链路状态确认信息<br>OSPF会接受整个网络拓扑，自行计算最短路径，仅当链路状态变化时才进行更新，它解决了RIP协议的缺陷<br>七、外部网关路由协议——BGP<br>BGP（Border Gateway Protocol）即边界网关协议，它运行在自治系统之间，通过BGP发言人（Speaker）交流信息<br>BGP协议能够找到一条到达目的地较好的路由</p><h2 id="拥塞控制算法"><a href="#拥塞控制算法" class="headerlink" title="拥塞控制算法"></a>拥塞控制算法</h2><p><img src="/images/bigdata/2-9.png"></p><p>1 Open状态<br> Open状态是拥塞控制状态机的默认状态。这种状态下，当ACK到达时，发送方根据拥塞窗口cwnd(Congestion Window)是小于还是大于慢启动阈值ssthresh(slow start threshold)，来按照慢启动或者拥塞避免算法来调整拥塞窗口。</p><p>2 Disorder状态<br> 当发送方检测到DACK(重复确认)或者SACK(选择性确认)时，状态机将转变为Disorder状态。在此状态下，发送方遵循飞行(in-flight)包守恒原则，即一个新包只有在一个老包离开网络后才发送，也就是发送方收到老包的ACK后，才会再发送一个新包。</p><p>3 CWR状态<br> 发送方接收到一个拥塞通知时，并不会立刻减少拥塞窗口cwnd，而是每收到两个ACK就减少一个段，直到窗口的大小减半为止。当cwnd正在减小并且网络中有没有重传包时，这个状态就叫CWR(Congestion Window Reduced，拥塞窗口减少)状态。CWR状态可以转变成Recovery或者Loss状态。</p><p>4 Recovery状态<br> 当发送方接收到足够(推荐为三个)的DACK(重复确认)后，进入该状态。在该状态下，拥塞窗口cnwd每收到两个ACK就减少一个段(segment)，直到cwnd等于慢启动阈值ssthresh，也就是刚进入Recover状态时cwnd的一半大小。<br> 发送方保持 Recovery 状态直到所有进入 Recovery状态时正在发送的数据段都成功地被确认，然后发送方恢复成Open状态，重传超时有可能中断 Recovery 状态，进入Loss状态。</p><p>5 Loss状态<br> 当一个RTO(重传超时时间)到期后，发送方进入Loss状态。所有正在发送的数据标记为丢失，拥塞窗口cwnd设置为一个段(segment)，发送方再次以慢启动算法增大拥塞窗口cwnd。<br> Loss 和 Recovery 状态的区别是:Loss状态下，拥塞窗口在发送方设置为一个段后增大，而 Recovery 状态下，拥塞窗口只能被减小。Loss 状态不能被其他的状态中断，因此，发送方只有在所有 Loss 开始时正在传输的数据都得到成功确认后，才能退到 Open 状态。</p><p>四大算法<br>拥塞控制主要是四个算法：1）慢启动，2）拥塞避免，3）拥塞发生，4）快速恢复。</p><h2 id="服务质量"><a href="#服务质量" class="headerlink" title="服务质量"></a>服务质量</h2><p>网络层，从服务质量的角度来看，也有2种泾渭分明的服务，一个是虚电路，一个是数据报。虚电路是非常可靠的服务，尤其是X.25的虚电路，在高服务质量方面，几乎是天衣无缝。采取面向连接，流量控制的机制，保证分组的可靠传输，其底层协议恰好是可靠传输的HDLC。虽然FR和ATM从用户的角度看，属于链路层，但从系统的角度看，也属于网络层，但这2个网络协议是改进型的可靠的传输协议，只采取虚电路，流量控制功能比较弱。</p><p>上述网络协议都是广域网的通信子网协议，基本上都采取虚电路方式。也就是说，广域网基本上不采取数据报方式，这是因为，广域网追求可靠性，广域网是公网，需要对外提供租用服务，因此，对质量的要求比较高。因为，只有虚电路才能提供可靠的服务，提供按需的带宽和时延，提供突发性数据传输的能力。</p><p>数据报是不可靠的服务，无连接，不进行流量控制，可能会乱序，可能会出现传输出错，传输出错的时候丢弃分组。但数据报传输效率非常高，互联网采用数据报方式，实践证明，这种方式是成功的。事实上，互联网采用数据报方式是非常合适的，因为，互联网是不同服务质量的网络互连的结果，整个网络的性能取决于质量最差的网络。另外，不同的网络互连，也不可能采取虚电路的方式（技术上很难实现）。实际上，广域网不采取数据报方式，互联网的网络层是虚拟的，互联网的目标是实现网络互连，数据传输是尽力而为，是不得已采取的方式。</p><table><thead><tr><th>对比的方面</th><th>虚电路网络</th><th>数据报网络</th></tr></thead><tbody><tr><td>思路</td><td>可靠通信应当由网络来保证</td><td>可靠通信应当由用户主机来保证</td></tr><tr><td>连接的建立</td><td>必须有</td><td>不需要</td></tr><tr><td>终点地址</td><td>仅在连接建立阶段使用，每个分组使用短的虚电路号</td><td>每个分组都有终点的完整地址</td></tr><tr><td>分组的转发</td><td>属于同一条虚电路的分组均按照同一路由进行转发</td><td>每个分组独立选择路由进行转发</td></tr><tr><td>当结点出故障时</td><td>所有通过出故障的结点的虚电路均不能工作</td><td>出故障的结点可能会丢失分组，一些路由可能会发生变化</td></tr><tr><td>分组的顺序</td><td>总是按发送顺序到达终点</td><td>到达终点时不一定按发送顺序</td></tr><tr><td>服务质量保证</td><td>可以将通信资源提前分配给每一个虚电路，因此容易实现</td><td>很难实现</td></tr></tbody></table><h2 id="网络互连"><a href="#网络互连" class="headerlink" title="网络互连"></a>网络互连</h2><p>网络互连是指将不同的网络连接起来，以构成更大规模的网络系统，实现网络间的数据通信、资源共享和协同工作。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>将不同的网络或相同的网络用互连设备连接在一起形成一个范围更大的网络<br>为增加网络性能以及安全和管理方面的考虑将原来一个很大的网络划分为几个网段或逻辑上的子网<br>实现异种网之间的服务和资源共享</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>1、网络互连的要求<br>（1）在网络之间提供一条链路，至少需要一条物理和链路控制的链路；<br>（2）提供不同网络节点的路由选择和数据传送；<br>（3）提供网络记账服务，记录网络资源使用情况，提供各用户使用网络的记录及有关状态信息；<br>（4）在提供网络互连时，应尽量避免由于互连而降低网络的通信性能；<br>（5）不修改互连在一起的各网络原有的结构和协议。<br>2、网络互连的层次<br>（1）物理层<br>用于不同地理范围内的网段的互连。<br>工作在物理层的网络设备是中继器、集线器。<br>(2)数据链路层<br>用于互连两个或多个同一类的局域网，传输帧。<br>工作在数据链路层的网间设备是桥接器（或网桥）、交换机。<br>(3)网络层<br>主要用于广域网的互连中，<br>工作在网络层的网间设备是路由器、第三层交换机。<br>(4)高层<br>用于在高层之间进行不同协议的转换<br>工作在第三层的网间设备称为网关</p><h2 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h2><p>IP协议是TCP/IP协议簇中的核心协议，也是TCP/IP的载体。所有的TCP，UDP，ICMP及IGMP数据都以IP数据报格式传输。<br>IP提供不可靠的，无连接的数据传送服务。<br>（1）不可靠指它不能保证IP数据报能成功到达目的地。<br>IP仅提供最好的传输服务。当发生某种错误时，如某个路由器暂时用完了缓冲区，IP有一个简单的错误处理算法：丢弃该数据报，然后发送ICMP消息给信源。任何要求的可靠性必须由上层来提供。<br>（2）无连接指IP并不维护任何关于后续数据报的状态信息。<br>每个数据报的处理是相互独立的。IP数据报可以不按发送顺序接收。如果一信源向相同的信宿发送两个连续的数据报（先是A，然后是B）每个数据报都是独立的进行路由选择，可能选择不同的路线，因此B可能在A到达之前先到达。</p><p>IP地址分为两个部分, 网络号和主机号<br>网络号: 保证相互连接的两个网段具有不同的标识<br>主机号: 同一网段内, 主机之间具有相同的网络号, 但是必须有不同的主机号；<br>不同的子网其实是把网络号相同的主机放到一起.<br>如果在子网中新增一台主机, 则这台主机的网络号和这个子网的网络号一致, 但是主机号必须不能和子网中的其他主机重复。<br>主机号为1的一般都为路由器接口。</p><table><thead><tr><th>分类</th><th>地址范围</th></tr></thead><tbody><tr><td>A类</td><td>0.0.0.0到127.255.255.255</td></tr><tr><td>B类</td><td>128.0.0.0到191.255.255.255</td></tr><tr><td>C类</td><td>192.0.0.0到223.255.255.255</td></tr><tr><td>D类</td><td>224.0.0.0到239.255.255.255</td></tr><tr><td>E类</td><td>240.0.0.0到247.255.255.255</td></tr></tbody></table><h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><p>IP地址是以网络号和主机号标识网络上的主机的，只有在同一网络号下的主机才可以“直接”互通，不同网络号的主机要通过网关互通。</p><p>为了使同一个网络下有多个子网，就产生了子网掩码。</p><p>子网掩码的作用：<br>1.区分网络号和主机号<br>2.是一个32位的正整数. 通常用一串 “0” 来结尾<br>3.将IP地址和子网掩码进行 “按位与” 操作, 得到的结果就是网络号<br>4.网络号和主机号的划分与这个IP地址是A类、B类还是C类无关</p><p>将一个网络划分为多个子网，网络号就要占用原来的主机位。<br>例如：<br>C类地址，21位标识网络号，8位标识主机号，要将其划分为4个子网，则需占用2位原来的主机标识位。<br>此时，网络号由之前的21位变为23位，子网掩码为：255.255.255.224</p><p>IP地址中的前3个字节表示网络号，后一个字节既表明子网号，又说明主机号，还说明两个IP地址是否属于同一个网段。如果属于同一网络区间，这两个地址间的信息交换就不通过路由器。如果不属同一网络区间，也就是子网号不同，两个地址的信息交换就要通过路由器进行。</p><h1 id="6、了解传输层的基本概念，理解传输层路由协议，TCP，UDP，拥塞控制算法。"><a href="#6、了解传输层的基本概念，理解传输层路由协议，TCP，UDP，拥塞控制算法。" class="headerlink" title="6、了解传输层的基本概念，理解传输层路由协议，TCP，UDP，拥塞控制算法。"></a>6、了解传输层的基本概念，理解传输层路由协议，TCP，UDP，拥塞控制算法。</h1><h2 id="传输层路由协议"><a href="#传输层路由协议" class="headerlink" title="传输层路由协议"></a>传输层路由协议</h2><p>路由表<br>路由器中维护的路由条目的集合<br>路由器根据路由表做路径选择</p><p>路由表的形成<br>直连网段 动态学习 ，配置IP地址，端口up状态，形成直连路由。<br>非直连网段 静态添加</p><p>静态路由<br>静态路由：由管理员手工配置的，是单向的，缺乏灵活性，但是准确性高。<br>相当于已经指定好方向，不会走错路。但是是单向的数据有去无回，所以需要在对方的路由器上配置一个静态路由指回来的路径。</p><p>默认路由<br>默认路由：当路由器在路由表中找不到目标网络的路由条目时，路由器把请求转发到默认路由接口。默认路由最好布置在末梢网络。</p><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793 定义。<br>TCP旨在适应支持多网络应用的分层协议层次结构。 连接到不同但互连的计算机通信网络的主计算机中的成对进程之间依靠TCP提供可靠的通信服务。TCP假设它可以从较低级别的协议获得简单的，可能不可靠的数据报服务。 原则上，TCP应该能够在从硬线连接到分组交换或电路交换网络的各种通信系统之上操作。</p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>Internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据包的方法。RFC 768 描述了 UDP。<br>Internet 的传输层有两个主要协议，互为补充。无连接的是 UDP，它除了给应用程序发送数据包功能并允许它们在所需的层次上架构自己的协议之外，几乎没有做什么特别的事情。面向连接的是 TCP，该协议几乎做了所有的事情。<br>UDP是OSI参考模型中一种无连接的传输层协议，它主要用于不要求分组顺序到达的传输中，分组传输顺序的检查与排序由应用层完成，提供面向事务的简单不可靠信息传送服务。UDP 协议基本上是IP协议与上层协议的接口。UDP协议适用端口分别运行在同一台设备上的多个应用程序。</p><h1 id="7、了解应用层的基本概念，理解DNS，邮件系统，www，流音频与视频。"><a href="#7、了解应用层的基本概念，理解DNS，邮件系统，www，流音频与视频。" class="headerlink" title="7、了解应用层的基本概念，理解DNS，邮件系统，www，流音频与视频。"></a>7、了解应用层的基本概念，理解DNS，邮件系统，www，流音频与视频。</h1><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p>域名解析是把域名指向网站空间IP，让人们通过注册的域名可以方便地访问到网站的一种服务。IP地址是网络上标识站点的数字地址，为了方便记忆，采用域名来代替IP地址标识站点地址。域名解析就是域名到IP地址的转换过程。域名的解析工作由DNS服务器完成。<br>域名解析也叫域名指向、服务器设置、域名配置以及反向IP登记等等。说得简单点就是将好记的域名解析成IP，服务由DNS服务器完成，是把域名解析到一个IP地址，然后在此IP地址的主机上将一个子目录与域名绑定。<br>域名解析协议（DNS）用来把便于人们记忆的主机域名和电子邮件地址映射为计算机易于识别的IP地址。DNS是一种c/s的结构，客户机就是用户用于查找一个名字对应的地址，而服务器通常用于为别人提供查询服务。</p><h2 id="邮件系统"><a href="#邮件系统" class="headerlink" title="邮件系统"></a>邮件系统</h2><p>邮件系统是企业信息化过程中不可或缺的通讯软件，一般企业可采取自建、租用、云端部署等多种方案，无论采取哪种方案，使用邮件系统为企业员工以及外部客户提供电子邮件通讯服务是其基本功能。 在基本功能基础上实现在线会议，个人/项目级即时通讯，远程演示，日程共享管理、网络电话等高级企业信息通讯功能，建立企业统一通讯平台，是企业邮件系统的长期目标，最先进的邮件系统软件已实现这一目标，国内产品主要集中在邮件功能部份。<br>在概念上，TCP/IP的电子邮件系统也分为用户界面和文件传输两部分，但文件传输部分并未独立出来，形成一个类似于MOTIS中 MTA的概念。其中的原因在于TCP/IP自始至终坚持点对点的思想，它的电子邮件系统也不例外地采用点对点的传输方式，不存在邮件的存储转发问题，因此也就没有必要引入像MTA一样负责存储转发的机制了。<br>在点对点方式中，虽然初始主机要参与邮件传输的全过程，但由于TCP/IP下层协议的简洁性，其效率反而比存储转发来得高。<br>同MOTIS一样，TCP/IP电子邮件系统要解决的首要问题也是接收方(叫作远程主机)暂时不能访问(比如未开机、出故障、不能建立网络连接等)时，如何发送电子邮件的问题。在TCP/IP的术语中，这叫延迟传递(delayed delivery)。</p><p>文件传输协议（FTP）就象打电话一样，实时地接通对话双方，如果一方暂时没有应答，则通话就会失败。而电子邮件系统则不同，发送方将要发送的内容通过自己的电子邮局将信件发给接收方的电子邮局。如果接收方的电子邮局暂时繁忙，那么发送方的电子邮局就会暂存信件，直到可以发送。而当接收方未上网时，接收方的电子邮局就暂存信件，直到接收方去取。可以这么说，电子邮件系统就象是在Internet上实现了传统邮局的功能，而且是更加快捷方便地实现。<br>作为一个普通的用户想要连接到Internet，那么就必须找一家Internet服务商（ISP）提供连接服务。在中国，最大的ISP就是中国电信。ISP在提供连接的同时，还会提供一个电子邮局，分配一个电子信箱给用户使用。而且在Internet上还有许多免费的电子邮局提供电子邮件服务。<br>值得一提的是，电子邮件总是有一个空间大小的叙述，这是什么意思呢？也就是电子邮局给每个用户所提供的暂存信件的空间。当然，越大越好嘛。</p><h2 id="www"><a href="#www" class="headerlink" title="www"></a>www</h2><p>万维网WWW是World Wide Web的简称，也称为Web、3W等。WWW是基于客户机/服务器方式的信息发现技术和超文本技术的综合。WWW服务器通过超文本标记语言(HTML)把信息组织成为图文并茂的超文本，利用链接从一个站点跳到另个站点。这样一来彻底摆脱了以前查询工具只能按特定路径一步步地查找信息的限制。</p><p>WWW (World Wide Web，万维网)是存储在Internet计算机中、数量巨大的文档的集合。这些文档称为页面，它是一种超文本(Hypertext)信息，可以用于描述超媒体。文本、图形、视频、音频等多媒体，称为超媒体(Hypermedia)。Web上的信息是由彼此关联的文档组成的，而使其连接在一起的是超链接(Hyperlink)。</p><h2 id="流音频与视频"><a href="#流音频与视频" class="headerlink" title="流音频与视频"></a>流音频与视频</h2><p>一种网络音视频服务。用户可以通过互联网实时地听和看服务器播放的音频和视频节目。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-计算机基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>干啊，大数据考试之路</title>
      <link href="/2021/10/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/start/"/>
      <url>/2021/10/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/start/</url>
      
        <content type="html"><![CDATA[<p>干啊，大数据考试~</p><p>大数据分析应用-中级大纲</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据分析应用-中级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据法律法规、政策文件及相关标准（二）政策文件</title>
      <link href="/2021/10/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%80%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86%EF%BC%88%E4%BA%8C%EF%BC%89%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6/"/>
      <url>/2021/10/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%80%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86%EF%BC%88%E4%BA%8C%EF%BC%89%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="1、《促进大数据发展行动纲要》国发〔2015〕50-号"><a href="#1、《促进大数据发展行动纲要》国发〔2015〕50-号" class="headerlink" title="1、《促进大数据发展行动纲要》国发〔2015〕50 号"></a>1、《促进大数据发展行动纲要》国发〔2015〕50 号</h1><h2 id="1-熟悉数据共享的范围边界和使用方式。"><a href="#1-熟悉数据共享的范围边界和使用方式。" class="headerlink" title="(1)熟悉数据共享的范围边界和使用方式。"></a>(1)熟悉数据共享的范围边界和使用方式。</h2><p>三、主要任务</p><p>（一）加快政府数据开放共享，推动资源整合，提升治理能力。</p><p>1.大力推动政府部门数据共享。加强顶层设计和统筹规划，明确各部门数据共享的范围边界和使用方式，厘清各部门数据管理及共享的义务和权利，依托政府数据统一共享交换平台，大力推进国家人口基础信息库、法人单位信息资源库、自然资源和空间地理基础信息库等国家基础数据资源，以及金税、金关、金财、金审、金盾、金宏、金保、金土、金农、金水、金质等信息系统跨部门、跨区域共享。加快各地区、各部门、各有关企事业单位及社会组织信用信息系统的互联互通和信息共享，丰富面向公众的信用信息服务，提高政府服务和监管水平。结合信息惠民工程实施和智慧城市建设，推动中央部门与地方政府条块结合、联合试点，实现公共服务的多方数据共享、制度对接和协同配合。</p><h1 id="2、《山东省“十四五”数字强省建设规划》"><a href="#2、《山东省“十四五”数字强省建设规划》" class="headerlink" title="2、《山东省“十四五”数字强省建设规划》"></a>2、《山东省“十四五”数字强省建设规划》</h1><h2 id="1-了解数字强省“十四五”规划发展目标及主要任务。"><a href="#1-了解数字强省“十四五”规划发展目标及主要任务。" class="headerlink" title="(1)了解数字强省“十四五”规划发展目标及主要任务。"></a>(1)了解数字强省“十四五”规划发展目标及主要任务。</h2><p>(三) 发展目标。</p><p>到2025年,数字强省建设实现重大突破,以数字化转型整体驱动生产方式、生活方式和治理方式变革取得显著成效,数字经济与实体经济深度融合发展,数字基础设施、数字政府、数字社会建设成效大幅提升,整体工作始终处在全国“第一方阵”。</p><p>1、数字基础设施实现走在前列。“双千兆”网络覆盖全省所有城区和乡镇,存算一体、边云协同的算力基础设施体系构建完成,亿级物联感知节点加快部署,交通、水利、能源、市政等融合基础设施建设水平国内领先,构建起泛在连接、高效协同、全域感知、智能融合、安全可信的数字基础设施体系,打造全国信息基础设施先行区和融合基础设施示范区。</p><p>2、数字科技创新实现走在前列。突破一批关键数字技术,数字科技基础研究和前沿研究水平大幅提高,取得一批前瞻性、原创性重大成果。高端服务器、高效网络存储方面技术优势不断巩固,实现引领性数字技术攻关。打造一批数字化领域重点实验室、创新中心、技术转移中心,充分发挥科技创新对经济社会数字化转型发展的支撑带动作用。</p><p>3、数字经济发展实现走在前列。数字产业化竞争力显著提升,形成具有国际竞争力的数字产业集群。实现一、二、三产业重点行业领域数字化改造全覆盖,高水平建成山东半岛工业互联网示范区,规模以上工业企业智能化改造覆盖面达到90%以上,打造具有全球重要影响力的产业数字化创新发展策源地。全省数字经济总量年均增幅达到11%,数字经济核心产业增加值占GDP比重力争超过10%,建成全国数字经济发展示范区。</p><p>4、数字政府建设实现走在前列。全省统一的“云、网、数、用”体系不断完善,全面建成数字机关,企业和群众找政府办事线上只进一网、线下只进一窗,省级及以下政府部门出具的实体证照证明“免提交”,基本建成整体、泛在、高效、透明的数字政府,打造一流数字化营商环境,成为全国公共服务和政府治理示范区。</p><p>5、数字社会构建实现走在前列。城乡数字化均衡发展,所有设区市和60%的县(市、区)建成四星级以上新型智慧城市,力争打造3个以上的五星级标杆城市,数字乡村建设取得重大进展,高质量打造乡村振兴齐鲁样板。建成全生命周期数字化惠民服务体系,数字化高品质生活走进千家万户,全民数字素养大幅提升,群众的获得感幸福感安全感显著增强。</p><p>6、数字生态打造实现走在前列。数字强省建设推进机制不断完善,形成共建共享、科学高效的数字强省建设运营模式。构建起科学完备的数字化发展政策法规体系,推出一批引领全国的标准规范,安全保障和风险防范能力显著增强。数据资源供给水平位居全国前列,数据要素市场化配置改革取得重大进展。开放包容、富有活力的数字化发展环境不断优化,成为大数据赋能创新创业示范省。</p><h1 id="3、《关于促进大数据发展的意见》鲁政发〔2016〕25-号"><a href="#3、《关于促进大数据发展的意见》鲁政发〔2016〕25-号" class="headerlink" title="3、《关于促进大数据发展的意见》鲁政发〔2016〕25 号"></a>3、《关于促进大数据发展的意见》鲁政发〔2016〕25 号</h1><h2 id="1-了解山东省促进大数据发展的总体目标以及大数据应用生态体系。"><a href="#1-了解山东省促进大数据发展的总体目标以及大数据应用生态体系。" class="headerlink" title="(1)了解山东省促进大数据发展的总体目标以及大数据应用生态体系。"></a>(1)了解山东省促进大数据发展的总体目标以及大数据应用生态体系。</h2><p>（三）总体目标。到2020年，初步形成发展氛围浓厚、体制机制较完善、共享开放程度较高、创新应用范围较广的大数据发展格局，大数据成为提升政府治理能力、推动经济转型升级、塑造山东竞争新优势的战略路径。</p><p>支撑体系更为完善。制定出台大数据发展条例，大数据采集、管理、共享、开放、交易等标准规范基本健全。省、市两级大数据基础设施建成并投入使用。济南、青岛成为全国性社会化大数据中心。</p><p>数据共享开放加快。跨部门、跨地区、跨层级的信息资源共享交换机制基本形成。全省统一的政府数据开放平台建成使用，政府数据开放行动计划顺利实施，政府数据的增值性、公益性开发应用有序推进。</p><p>示范应用成效显现。政务服务、经济运行、市政公用、城乡建设、社会治理、创业创新、产业发展等重要领域特色专题数据库搭建完成，面向政务、交通、旅游、警务、民政、规划、城市管理、住区服务等领域需求的大数据示范应用全面推广，在线公共平台服务更加普惠便利。</p><p>产业体系逐步健全。大数据关键技术创新能力显著增强，掌握一批自主关键技术，大数据产业集聚发展、链式发展的格局基本形成，安全保障能力明显提高，培育形成一批大数据龙头企业和知名品牌。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-大数据法律法规、政策文件及相关标准 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据法律法规、政策文件及相关标准（三）相关标准</title>
      <link href="/2021/10/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%80%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86%EF%BC%88%E4%B8%89%EF%BC%89%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/"/>
      <url>/2021/10/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%80%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86%EF%BC%88%E4%B8%89%EF%BC%89%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1、GB-T-35295-2017-信息技术-大数据-术语"><a href="#1、GB-T-35295-2017-信息技术-大数据-术语" class="headerlink" title="1、GB/T 35295-2017 信息技术 大数据 术语"></a>1、GB/T 35295-2017 信息技术 大数据 术语</h1><h2 id="1-了解本标准的范围、术语和定义，以及密切相关的通用术语。"><a href="#1-了解本标准的范围、术语和定义，以及密切相关的通用术语。" class="headerlink" title="(1)了解本标准的范围、术语和定义，以及密切相关的通用术语。"></a>(1)了解本标准的范围、术语和定义，以及密切相关的通用术语。</h2><p><a href="./GB_T_35295_2017_%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF_%E5%A4%A7%E6%95%B0%E6%8D%AE_%E6%9C%AF%E8%AF%AD.pdf">[GB/T 35295-2017 信息技术 大数据 术语]</a></p><div class="pdfobject-container" data-target="GB_T_35295_2017_信息技术_大数据_术语.pdf" data-height="500px"></div><h1 id="2、GB-T-35589-2017-信息技术-大数据-技术参考模型"><a href="#2、GB-T-35589-2017-信息技术-大数据-技术参考模型" class="headerlink" title="2、GB/T 35589-2017 信息技术 大数据 技术参考模型"></a>2、GB/T 35589-2017 信息技术 大数据 技术参考模型</h1><h2 id="1-了解本标准的范围、术语和定义，熟悉大数据参考架构的目的、目标，熟悉大数据参考架构及其各组成部分。"><a href="#1-了解本标准的范围、术语和定义，熟悉大数据参考架构的目的、目标，熟悉大数据参考架构及其各组成部分。" class="headerlink" title="(1)了解本标准的范围、术语和定义，熟悉大数据参考架构的目的、目标，熟悉大数据参考架构及其各组成部分。"></a>(1)了解本标准的范围、术语和定义，熟悉大数据参考架构的目的、目标，熟悉大数据参考架构及其各组成部分。</h2><p><a href="./GB_T_35589_2017_%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF_%E5%A4%A7%E6%95%B0%E6%8D%AE_%E6%8A%80%E6%9C%AF%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B.pdf">[2、GB/T 35589-2017 信息技术 大数据 技术参考模型]</a></p><div class="pdfobject-container" data-target="GB_T_35589_2017_信息技术_大数据_技术参考模型.pdf" data-height="500px"></div><h1 id="3、GB-T-37973-2019-信息安全技术-大数据安全管理指南"><a href="#3、GB-T-37973-2019-信息安全技术-大数据安全管理指南" class="headerlink" title="3、GB/T 37973-2019 信息安全技术 大数据安全管理指南"></a>3、GB/T 37973-2019 信息安全技术 大数据安全管理指南</h1><h2 id="1-了解本标准的范围、术语和定义，了解大数据安全需求、大数据分类分级、大数据活动及安全要求、大数据安全风险评估等方面的内容。"><a href="#1-了解本标准的范围、术语和定义，了解大数据安全需求、大数据分类分级、大数据活动及安全要求、大数据安全风险评估等方面的内容。" class="headerlink" title="(1)了解本标准的范围、术语和定义，了解大数据安全需求、大数据分类分级、大数据活动及安全要求、大数据安全风险评估等方面的内容。"></a>(1)了解本标准的范围、术语和定义，了解大数据安全需求、大数据分类分级、大数据活动及安全要求、大数据安全风险评估等方面的内容。</h2><p><a href="./GB_T_39793_2019_%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF_%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E6%8C%87%E5%8D%97.pdf">[GB/T 39793-2019 信息安全技术 大数据安全管理指南]</a></p><div class="pdfobject-container" data-target="GB_T_39793_2019_信息安全技术_大数据安全管理指南.pdf" data-height="500px"></div><h1 id="4、GB-T-38667-2020-信息技术-大数据-数据分类指南"><a href="#4、GB-T-38667-2020-信息技术-大数据-数据分类指南" class="headerlink" title="4、GB/T 38667-2020 信息技术 大数据 数据分类指南"></a>4、GB/T 38667-2020 信息技术 大数据 数据分类指南</h1><h2 id="1-了解本标准的范围、术语和定义，熟悉数据分类的过程，以及分类视角、分类维度和分类方法。"><a href="#1-了解本标准的范围、术语和定义，熟悉数据分类的过程，以及分类视角、分类维度和分类方法。" class="headerlink" title="(1)了解本标准的范围、术语和定义，熟悉数据分类的过程，以及分类视角、分类维度和分类方法。"></a>(1)了解本标准的范围、术语和定义，熟悉数据分类的过程，以及分类视角、分类维度和分类方法。</h2><p><a href="./GB_T_38667_2020_%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF_%E5%A4%A7%E6%95%B0%E6%8D%AE_%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB%E6%8C%87%E5%8D%97.pdf">[GB/T 38667-2020 信息技术 大数据 数据分类指南]</a></p><div class="pdfobject-container" data-target="GB_T_38667_2020_信息技术_大数据_数据分类指南.pdf" data-height="500px"></div><h1 id="5、GB-T-38673-2020-信息技术-大数据-大数据系统基本要求"><a href="#5、GB-T-38673-2020-信息技术-大数据-大数据系统基本要求" class="headerlink" title="5、GB/T 38673-2020 信息技术 大数据 大数据系统基本要求"></a>5、GB/T 38673-2020 信息技术 大数据 大数据系统基本要求</h1><h2 id="1-了解本标准的范围、术语和定义，熟悉大数据系统框架、功能要求、非功能要求。"><a href="#1-了解本标准的范围、术语和定义，熟悉大数据系统框架、功能要求、非功能要求。" class="headerlink" title="(1)了解本标准的范围、术语和定义，熟悉大数据系统框架、功能要求、非功能要求。"></a>(1)了解本标准的范围、术语和定义，熟悉大数据系统框架、功能要求、非功能要求。</h2><p><a href="./GB_T_38673_2020_%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF_%E5%A4%A7%E6%95%B0%E6%8D%AE_%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B3%BB%E7%BB%9F%E5%9F%BA%E6%9C%AC%E8%A6%81%E6%B1%82.pdf">[GB/T 38673-2020 信息技术 大数据 大数据系统基本要求]</a></p><div class="pdfobject-container" data-target="GB_T_38673_2020_信息技术_大数据_大数据系统基本要求.pdf" data-height="500px"></div>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-大数据法律法规、政策文件及相关标准 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据法律法规、政策文件及相关标准（四）职业道德</title>
      <link href="/2021/10/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%80%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86%EF%BC%88%E5%9B%9B%EF%BC%89%E8%81%8C%E4%B8%9A%E9%81%93%E5%BE%B7/"/>
      <url>/2021/10/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%80%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86%EF%BC%88%E5%9B%9B%EF%BC%89%E8%81%8C%E4%B8%9A%E9%81%93%E5%BE%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="1、掌握专业技术人员职业道德的基本要求"><a href="#1、掌握专业技术人员职业道德的基本要求" class="headerlink" title="1、掌握专业技术人员职业道德的基本要求"></a>1、掌握专业技术人员职业道德的基本要求</h1><p><a href="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%8F%E4%BC%9A%E9%81%93%E5%BE%B7%E4%B8%8E%E8%81%8C%E4%B8%9A%E8%A1%8C%E4%B8%BA%E5%87%86%E5%88%99.pdf">[计算机协会道德与职业行为准则]</a></p><div class="pdfobject-container" data-target="计算机协会道德与职业行为准则.pdf" data-height="500px"></div>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-大数据法律法规、政策文件及相关标准 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发管理（七）软件过程改进</title>
      <link href="/2021/10/11/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%83%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%94%B9%E8%BF%9B/"/>
      <url>/2021/10/11/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%83%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%94%B9%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<p>目前，使用最多的软件过程改进模型包括 CMM、CMMI、ISO9000 和 ITIL 等系列标准。</p><h1 id="1-CMM"><a href="#1-CMM" class="headerlink" title="1.CMM"></a>1.CMM</h1><p>W-CMM(软件能力成熟度模型)为软件企业的过程能力提供了一个阶梯式的进化框架， 阶梯共有五级。</p><p>(1)初始级。初始级的软件过程是未加定义的随意过程，项目的执行是随意甚至是混 乱的。</p><p>(2)可重复级。根据多年的经验和教训，人们总结出软件开发的首要问题不是技术问 题而是管理问题。因此，第二级的焦点集中在软件管理过程上。一个可管理的过程则是一个 可重复的过程，一个可重复的过程则能逐渐进化和成熟。第二级的管理过程包括了需求管理、 项目管理、质量管理、配置管理和子合同管理五个方面。其中项目管理分为计划过程和跟踪 与监控过程两个过程。实施这些过程，从管理角度可以看到一个按计划执行的且阶段可控的 软件开发过程。</p><p>(3)定义级。在第二级仅定义了管理的基本过程，而没有定义执行的步骤标准。在第 三级则要求制定企业范围的工程化标准，而且无论是管理还是工程开发都需要一套文档化的 标准，并将这些标准集成到企业软件开发标准过程中去。所有开发的项目需根据这个标准过 程，剪裁出与项目适宜的过程，并执行这些过程。过程的剪裁不是随意的，在使用前需经过 企业有关人员的批准。</p><p>(4)管理级。第四级的管理是量化的管理。所有过程需建立相应的度量方式，所有产 品的质量(包括工作产品和提交给用户的产品)需有明确的度量指标。这些度量应是详尽的， 且可用于理解和控制软件过程和产品。量化控制将使软件开发真正变成一种标准的工业生产 活动。</p><p>(5)优化级。第五级的目标是达到一个持续改善的境界。所谓持续改善是指可根据过 程执行的反馈信息来改善下一步的执行过程，即优化执行步骤。如果一个企业达到了这一级， 那么表明该企业能够根据实际的项目性质、技术等因素，不断调整软件生产过程以求达到最 佳。</p><h1 id="2-CMMI"><a href="#2-CMMI" class="headerlink" title="2.CMMI"></a>2.CMMI</h1><p>CMMI(Capability MaturityModel Integration)，即能力成熟度模型集成。CMMI 是 CMM 模型的最新版本。CMMI 与 CMM 最大的不同点在于:CMMISM-SE/SW/IPPD/SS 1.1 版本有 四个集成成分，即:系统工程(SE)和软件工程(SW)是基本的科目，对于有些组织还可 以应用集成产品和过程开发方面(IPPD)的内容，如果涉及供应商外包管理可以相应地应用<br>SS(Supplier Sourcing)部分。</p><p>CMMI 有两种表示方法，一种是和软件 CMM 一样的阶段式表现方法，另一种是连续式<br>的表现方法。这两种表现方法的区别是:阶段式表现方法仍然把 CMMI 中的若干个过程区 域分成了 5 个成熟度级别，帮助实施 CMMI 的组织建议一条比较容易实现的过程改进发 展道路。而连续式表现方法则通过将 CMMI 中过程区域分为四大类:过程管理、项目管理、 工程及支持。对于每个大类中的过程区域，又进一步分为基本的和高级的。这样，在按照连 续式表示方法实施 CMMI 的时候，一个组织可以把项目管理或者其他某类的实践一直做到 最好，而其他方面的过程区域可以完全不必考虑。</p><h1 id="3-ISO-9000"><a href="#3-ISO-9000" class="headerlink" title="3.ISO 9000"></a>3.ISO 9000</h1><p>ISO 9001 和 CMM 非常相似的是，两者都共同着眼于质量和过程管理，而且它 们都是基于戴明博士的全面质量管理 TQM 产生的，因此不存在任何矛盾的地方。但是，它 们的基础是不同的:ISO9001(ISO9000 标准系列中关于软件开发和维护的部分)确定一个 质量体系的最少需求，而 CMM 强调持续过程改进。</p><h1 id="4-ITIL"><a href="#4-ITIL" class="headerlink" title="4.ITIL"></a>4.ITIL</h1><p>ITIL(信息技术基础设施库)是英国政府中央计算机与电信管理中心(CCTA)在 20 世 纪 90 年代初期发布的一套 IT 服务管理最佳实践指南。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-开发管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发管理（五）人力资源管理</title>
      <link href="/2021/10/11/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%94%EF%BC%89%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/"/>
      <url>/2021/10/11/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%94%EF%BC%89%E4%BA%BA%E5%8A%9B%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>包括组织规划、人员招募和团队建设三个主要过程。</p><h1 id="1-组织规划"><a href="#1-组织规划" class="headerlink" title="1.组织规划"></a>1.组织规划</h1><p>组织规划用于确定、记录并分派项目角色、职责和请示汇报关系。</p><h2 id="1-垂直团队组织。"><a href="#1-垂直团队组织。" class="headerlink" title="(1)垂直团队组织。"></a>(1)垂直团队组织。</h2><p>垂直团队由多面手组成。</p><h2 id="2-水平团队组织。"><a href="#2-水平团队组织。" class="headerlink" title="(2)水平团队组织。"></a>(2)水平团队组织。</h2><p>水平团队由专家组成。</p><h2 id="3-混合团队组织。"><a href="#3-混合团队组织。" class="headerlink" title="(3)混合团队组织。"></a>(3)混合团队组织。</h2><p>混合团队由专家和多面手共同组成。</p><h1 id="2-人员招募"><a href="#2-人员招募" class="headerlink" title="2.人员招募"></a>2.人员招募</h1><p>人员招募指获取分派到项目上、并在那里工作所需的人力资源(个人或集体)。在多数环境中，很可能无法到“最佳”资源，因此项目管理团队必须注意保证所物色 到的人力资源符合项目要求。</p><p>以往经验：这些个人或集体以前是否从事过类似或者相关的工作?工作表现如何?</p><p>个人兴趣：这些个人或集体对本项目的工作感兴趣吗?</p><p>能否得到：最理想的个人或集体人选能在规定期限内招募到手吗?</p><p>胜任与熟练程度：需要何种能力及何种水平?</p><h2 id="一般要求项目经理具备如下能力"><a href="#一般要求项目经理具备如下能力" class="headerlink" title="一般要求项目经理具备如下能力:"></a>一般要求项目经理具备如下能力:</h2><h3 id="1-领导能力。"><a href="#1-领导能力。" class="headerlink" title="(1)领导能力。"></a>(1)领导能力。</h3><p>首先，项目经理应懂得如何授权和分配职责，采取参与和顾问式的领导方式，发挥导向 和教练作用，让成员在职责范围内充分发挥能动性，自主地完成项目工作;<br>其次，项目经理应善于激励。<br>第三，项目经理应该为成员树立榜样，表现出积极的心态，成为团队的典范和信心的源 泉。<br>第四，项目经理应该能够果断抉择，负责人的重要任务是决策，特别是有多种选择的情 况下，一个正确的选择往往事半功倍。</p><h3 id="2-沟通技巧。"><a href="#2-沟通技巧。" class="headerlink" title="(2)沟通技巧。"></a>(2)沟通技巧。</h3><h3 id="3-人际交往能力。"><a href="#3-人际交往能力。" class="headerlink" title="(3)人际交往能力。"></a>(3)人际交往能力。</h3><h3 id="4-应付压力的能力。"><a href="#4-应付压力的能力。" class="headerlink" title="(4)应付压力的能力。"></a>(4)应付压力的能力。</h3><h3 id="5-培养员工的能力。"><a href="#5-培养员工的能力。" class="headerlink" title="(5)培养员工的能力。"></a>(5)培养员工的能力。</h3><h3 id="6-时间管理技能。"><a href="#6-时间管理技能。" class="headerlink" title="(6)时间管理技能。"></a>(6)时间管理技能。</h3><h2 id="3-团队建设项目"><a href="#3-团队建设项目" class="headerlink" title="3.团队建设项目"></a>3.团队建设项目</h2><p>团队的建设既包括提高项目干系人作为个人做出贡献的能力，也包括提高项目团队作为集体发挥作用的能力。个人的培养(管理能力与技术水平)是团队建设的 基础，而团队建设则是项目实现其目标的关键。</p><h3 id="1-形成阶段。"><a href="#1-形成阶段。" class="headerlink" title="(1)形成阶段。"></a>(1)形成阶段。</h3><p>形成阶段促使个体成员转变为团队成员。</p><h3 id="2-震荡阶段。"><a href="#2-震荡阶段。" class="headerlink" title="(2)震荡阶段。"></a>(2)震荡阶段。</h3><p>这一阶段，成员们开始着手执行分配到的任务，缓慢地推进工作。现 实也许会与个人当初的设想不一致。<br>震荡阶段的特点是人们有挫折、愤怨或者对立的情绪。这一阶段士气很低，成员可能会 抵制形成团队，因为他们要表达与团队联合相对立的个性。<br>因此在这一阶段，项目经理要做导向工作，致力于解决矛盾，决不能希望通过压制来使 其自行消失。这时，对于项目成员采取的激励方式主要是参与激励、责任激励和信息激励。</p><h3 id="3-正规阶段。"><a href="#3-正规阶段。" class="headerlink" title="(3)正规阶段。"></a>(3)正规阶段。</h3><p>经受了震荡阶段的考验，项目团队就进入了发展的正规阶段。项目团队逐渐接受了现有的工作环境，团队的凝聚力开始形成。这一阶段，随着成员之间开始相互 信任，团队内大量地交流信息、观点和感情，合作意识增强，团队成员互相交换看法，并感 觉到他们可以自由地、建设性地表达他们的情绪及意见。<br>在正规阶段，项目经理采取的激励方式除参与激励外，还有两个重要方式:一是发掘每 个成员的自我成就感和责任意识，引导员工进行自我激励;二是尽可能地多创造团队成员之 间互相沟通、相互学习的环境，以及从项目外部聘请专家讲解与项目有关的新知识、新技术， 给员工充分的知识激励。</p><h3 id="4-表现阶段。"><a href="#4-表现阶段。" class="headerlink" title="(4)表现阶段。"></a>(4)表现阶段。</h3><p>团队成长的最后阶段是表现阶段。这时，项目团队积极工作，急于实 现项目目标。这一阶段的工作绩效很高，团队有集体感和荣誉感，信心十足。团队能感觉到 被高度授权，如果出现技术难题，就由适当的团队成员组成临时攻关小组，解决问题后再将 相关知识或技巧在团队内部快速共享。<br>这一阶段，项目经理需要特别关注预算、进度计划、工作范围及计划方面的项目业绩。 如果实际进程落后于计划进程，项目经理就需要协助支持修正行动的制定与执行。这一阶段 激励的主要方式是危机激励、目标激励和知识激励。<br>需要强调的是，对于信息系统建设人才，要更多地引导他们进行自我激励和知识激励。 当然，足够的物质激励是不言而喻的，它从始至终都是最有效的激励。</p><h2 id="一个富有成效的项目团队具有如下特点"><a href="#一个富有成效的项目团队具有如下特点" class="headerlink" title="一个富有成效的项目团队具有如下特点:"></a>一个富有成效的项目团队具有如下特点:</h2><p>1、能清晰地理解项目的目标;<br>2、每位成员的角色和职责有明确的期望;<br>3、以项目的目标为行为的导向;<br>4、项目成员之间高度信任、高度合作互助。<br>总之，科学地进行团队建设有助于按期、保质、高效、在预算内完成软件项目。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-开发管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发管理（六）软件的运行与评价</title>
      <link href="/2021/10/11/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E5%85%AD%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%BF%90%E8%A1%8C%E4%B8%8E%E8%AF%84%E4%BB%B7/"/>
      <url>/2021/10/11/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E5%85%AD%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%BF%90%E8%A1%8C%E4%B8%8E%E8%AF%84%E4%BB%B7/</url>
      
        <content type="html"><![CDATA[<p>(1)软件的稳定性和可靠性评价。<br>(2)软件是否满足了用户的需求。<br>(3)软件实施给用户带来的好处。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-开发管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据法律法规、政策文件及相关标准（一）法律法规</title>
      <link href="/2021/10/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%80%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86%EF%BC%88%E4%B8%80%EF%BC%89%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84/"/>
      <url>/2021/10/11/%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%80%83%E8%AF%95/%E4%B8%80%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84%E3%80%81%E6%94%BF%E7%AD%96%E6%96%87%E4%BB%B6%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A0%87%E5%87%86%EF%BC%88%E4%B8%80%EF%BC%89%E6%B3%95%E5%BE%8B%E6%B3%95%E8%A7%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1、《中华人民共和国民法典》中华人民共和国主席令第四十五号"><a href="#1、《中华人民共和国民法典》中华人民共和国主席令第四十五号" class="headerlink" title="1、《中华人民共和国民法典》中华人民共和国主席令第四十五号"></a>1、《中华人民共和国民法典》中华人民共和国主席令第四十五号</h1><h2 id="1-了解隐私权和个人信息保护有关内容。"><a href="#1-了解隐私权和个人信息保护有关内容。" class="headerlink" title="(1)了解隐私权和个人信息保护有关内容。"></a>(1)了解隐私权和个人信息保护有关内容。</h2><p>第六章　隐私权和个人信息保护</p><p>第一千零三十二条　自然人享有隐私权。任何组织或者个人不得以刺探、侵扰、泄露、公开等方式侵害他人的隐私权。</p><p>隐私是自然人的私人生活安宁和不愿为他人知晓的私密空间、私密活动、私密信息。</p><p>第一千零三十三条　除法律另有规定或者权利人明确同意外，任何组织或者个人不得实施下列行为：</p><p>（一）以电话、短信、即时通讯工具、电子邮件、传单等方式侵扰他人的私人生活安宁；</p><p>（二）进入、拍摄、窥视他人的住宅、宾馆房间等私密空间；</p><p>（三）拍摄、窥视、窃听、公开他人的私密活动；</p><p>（四）拍摄、窥视他人身体的私密部位；</p><p>（五）处理他人的私密信息；</p><p>（六）以其他方式侵害他人的隐私权。</p><p>第一千零三十四条　自然人的个人信息受法律保护。</p><p>个人信息是以电子或者其他方式记录的能够单独或者与其他信息结合识别特定自然人的各种信息，包括自然人的姓名、出生日期、身份证件号码、生物识别信息、住址、电话号码、电子邮箱、健康信息、行踪信息等。</p><p>个人信息中的私密信息，适用有关隐私权的规定；没有规定的，适用有关个人信息保护的规定。</p><p>第一千零三十五条　处理个人信息的，应当遵循合法、正当、必要原则，不得过度处理，并符合下列条件：</p><p>（一）征得该自然人或者其监护人同意，但是法律、行政法规另有规定的除外；</p><p>（二）公开处理信息的规则；</p><p>（三）明示处理信息的目的、方式和范围；</p><p>（四）不违反法律、行政法规的规定和双方的约定。</p><p>个人信息的处理包括个人信息的收集、存储、使用、加工、传输、提供、公开等。</p><p>第一千零三十六条　处理个人信息，有下列情形之一的，行为人不承担民事责任：</p><p>（一）在该自然人或者其监护人同意的范围内合理实施的行为；</p><p>（二）合理处理该自然人自行公开的或者其他已经合法公开的信息，但是该自然人明确拒绝或者处理该信息侵害其重大利益的除外；</p><p>（三）为维护公共利益或者该自然人合法权益，合理实施的其他行为。</p><p>第一千零三十七条　自然人可以依法向信息处理者查阅或者复制其个人信息；发现信息有错误的，有权提出异议并请求及时采取更正等必要措施。</p><p>自然人发现信息处理者违反法律、行政法规的规定或者双方的约定处理其个人信息的，有权请求信息处理者及时删除。</p><p>第一千零三十八条　信息处理者不得泄露或者篡改其收集、存储的个人信息；未经自然人同意，不得向他人非法提供其个人信息，但是经过加工无法识别特定个人且不能复原的除外。</p><p>信息处理者应当采取技术措施和其他必要措施，确保其收集、存储的个人信息安全，防止信息泄露、篡改、丢失；发生或者可能发生个人信息泄露、篡改、丢失的，应当及时采取补救措施，按照规定告知自然人并向有关主管部门报告。</p><p>第一千零三十九条　国家机关、承担行政职能的法定机构及其工作人员对于履行职责过程中知悉的自然人的隐私和个人信息，应当予以保密，不得泄露或者向他人非法提供。</p><h1 id="2、《中华人民共和国数据安全法》中华人民共和国主席令第八十四号"><a href="#2、《中华人民共和国数据安全法》中华人民共和国主席令第八十四号" class="headerlink" title="2、《中华人民共和国数据安全法》中华人民共和国主席令第八十四号"></a>2、《中华人民共和国数据安全法》中华人民共和国主席令第八十四号</h1><h2 id="1-了解数据安全制度、数据安全保护义务、政务数据安全与开放等相关内容。"><a href="#1-了解数据安全制度、数据安全保护义务、政务数据安全与开放等相关内容。" class="headerlink" title="(1)了解数据安全制度、数据安全保护义务、政务数据安全与开放等相关内容。"></a>(1)了解数据安全制度、数据安全保护义务、政务数据安全与开放等相关内容。</h2><p>第三章 数据安全制度</p><p>第二十一条 国家建立数据分类分级保护制度，根据数据在经济社会发展中的重要程度，以及一旦遭到篡改、破坏、泄露或者非法获取、非法利用，对国家安全、公共利益或者个人、组织合法权益造成的危害程度，对数据实行分类分级保护。国家数据安全工作协调机制统筹协调有关部门制定重要数据目录，加强对重要数据的保护。</p><p>关系国家安全、国民经济命脉、重要民生、重大公共利益等数据属于国家核心数据，实行更加严格的管理制度。</p><p>各地区、各部门应当按照数据分类分级保护制度，确定本地区、本部门以及相关行业、领域的重要数据具体目录，对列入目录的数据进行重点保护。</p><p>第二十二条 国家建立集中统一、高效权威的数据安全风险评估、报告、信息共享、监测预警机制。国家数据安全工作协调机制统筹协调有关部门加强数据安全风险信息的获取、分析、研判、预警工作。</p><p>第二十三条 国家建立数据安全应急处置机制。发生数据安全事件，有关主管部门应当依法启动应急预案，采取相应的应急处置措施，防止危害扩大，消除安全隐患，并及时向社会发布与公众有关的警示信息。</p><p>第二十四条 国家建立数据安全审查制度，对影响或者可能影响国家安全的数据处理活动进行国家安全审查。</p><p>依法作出的安全审查决定为最终决定。</p><p>第二十五条 国家对与维护国家安全和利益、履行国际义务相关的属于管制物项的数据依法实施出口管制。</p><p>第二十六条 任何国家或者地区在与数据和数据开发利用技术等有关的投资、贸易等方面对中华人民共和国采取歧视性的禁止、限制或者其他类似措施的，中华人民共和国可以根据实际情况对该国家或者地区对等采取措施。</p><p>第四章 数据安全保护义务</p><p>第二十七条 开展数据处理活动应当依照法律、法规的规定，建立健全全流程数据安全管理制度，组织开展数据安全教育培训，采取相应的技术措施和其他必要措施，保障数据安全。利用互联网等信息网络开展数据处理活动，应当在网络安全等级保护制度的基础上，履行上述数据安全保护义务。</p><p>重要数据的处理者应当明确数据安全负责人和管理机构，落实数据安全保护责任。</p><p>第二十八条 开展数据处理活动以及研究开发数据新技术，应当有利于促进经济社会发展，增进人民福祉，符合社会公德和伦理。</p><p>第二十九条 开展数据处理活动应当加强风险监测，发现数据安全缺陷、漏洞等风险时，应当立即采取补救措施；发生数据安全事件时，应当立即采取处置措施，按照规定及时告知用户并向有关主管部门报告。</p><p>第三十条 重要数据的处理者应当按照规定对其数据处理活动定期开展风险评估，并向有关主管部门报送风险评估报告。</p><p>风险评估报告应当包括处理的重要数据的种类、数量，开展数据处理活动的情况，面临的数据安全风险及其应对措施等。</p><p>第三十一条 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的重要数据的出境安全管理，适用《中华人民共和国网络安全法》的规定；其他数据处理者在中华人民共和国境内运营中收集和产生的重要数据的出境安全管理办法，由国家网信部门会同国务院有关部门制定。</p><p>第三十二条 任何组织、个人收集数据，应当采取合法、正当的方式，不得窃取或者以其他非法方式获取数据。</p><p>法律、行政法规对收集、使用数据的目的、范围有规定的，应当在法律、行政法规规定的目的和范围内收集、使用数据。</p><p>第三十三条 从事数据交易中介服务的机构提供服务，应当要求数据提供方说明数据来源，审核交易双方的身份，并留存审核、交易记录。</p><p>第三十四条 法律、行政法规规定提供数据处理相关服务应当取得行政许可的，服务提供者应当依法取得许可。</p><p>第三十五条 公安机关、国家安全机关因依法维护国家安全或者侦查犯罪的需要调取数据，应当按照国家有关规定，经过严格的批准手续，依法进行，有关组织、个人应当予以配合。</p><p>第三十六条 中华人民共和国主管机关根据有关法律和中华人民共和国缔结或者参加的国际条约、协定，或者按照平等互惠原则，处理外国司法或者执法机构关于提供数据的请求。非经中华人民共和国主管机关批准，境内的组织、个人不得向外国司法或者执法机构提供存储于中华人民共和国境内的数据。</p><p>第五章 政务数据安全与开放</p><p>第三十七条 国家大力推进电子政务建设，提高政务数据的科学性、准确性、时效性，提升运用数据服务经济社会发展的能力。</p><p>第三十八条 国家机关为履行法定职责的需要收集、使用数据，应当在其履行法定职责的范围内依照法律、行政法规规定的条件和程序进行；对在履行职责中知悉的个人隐私、个人信息、商业秘密、保密商务信息等数据应当依法予以保密，不得泄露或者非法向他人提供。</p><p>第三十九条 国家机关应当依照法律、行政法规的规定，建立健全数据安全管理制度，落实数据安全保护责任，保障政务数据安全。</p><p>第四十条 国家机关委托他人建设、维护电子政务系统，存储、加工政务数据，应当经过严格的批准程序，并应当监督受托方履行相应的数据安全保护义务。受托方应当依照法律、法规的规定和合同约定履行数据安全保护义务，不得擅自留存、使用、泄露或者向他人提供政务数据。</p><p>第四十一条 国家机关应当遵循公正、公平、便民的原则，按照规定及时、准确地公开政务数据。依法不予公开的除外。</p><p>第四十二条 国家制定政务数据开放目录，构建统一规范、互联互通、安全可控的政务数据开放平台，推动政务数据开放利用。</p><p>第四十三条 法律、法规授权的具有管理公共事务职能的组织为履行法定职责开展数据处理活动，适用本章规定。</p><h1 id="3、《中华人民共和国网络安全法》中华人民共和国主席令第五十三号"><a href="#3、《中华人民共和国网络安全法》中华人民共和国主席令第五十三号" class="headerlink" title="3、《中华人民共和国网络安全法》中华人民共和国主席令第五十三号"></a>3、《中华人民共和国网络安全法》中华人民共和国主席令第五十三号</h1><h2 id="1-熟悉数据分类、重要数据备份和加密等措施。"><a href="#1-熟悉数据分类、重要数据备份和加密等措施。" class="headerlink" title="(1)熟悉数据分类、重要数据备份和加密等措施。"></a>(1)熟悉数据分类、重要数据备份和加密等措施。</h2><p>第三章网络运行安全</p><p>第一节一般规定</p><p>第二十一条国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：</p><p>（一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任；</p><p>（二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；</p><p>（三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月；</p><p>（四）采取数据分类、重要数据备份和加密等措施；</p><p>（五）法律、行政法规规定的其他义务。</p><h1 id="4、《中华人民共和国电子签名法-2019-版-》中华人民共和国主席令第二十九号"><a href="#4、《中华人民共和国电子签名法-2019-版-》中华人民共和国主席令第二十九号" class="headerlink" title="4、《中华人民共和国电子签名法(2019 版)》中华人民共和国主席令第二十九号"></a>4、《中华人民共和国电子签名法(2019 版)》中华人民共和国主席令第二十九号</h1><h2 id="1-了解电子签名、数据电文基本概念。"><a href="#1-了解电子签名、数据电文基本概念。" class="headerlink" title="(1)了解电子签名、数据电文基本概念。"></a>(1)了解电子签名、数据电文基本概念。</h2><p>第一章　总　　则</p><p>第一条　为了规范电子签名行为，确立电子签名的法律效力，维护有关各方的合法权益，制定本法。</p><p>第二条　本法所称电子签名，是指数据电文中以电子形式所含、所附用于识别签名人身份并表明签名人认可其中内容的数据。</p><p>本法所称数据电文，是指以电子、光学、磁或者类似手段生成、发送、接收或者储存的信息。</p><p>第三条　民事活动中的合同或者其他文件、单证等文书，当事人可以约定使用或者不使用电子签名、数据电文。</p><p>当事人约定使用电子签名、数据电文的文书，不得仅因为其采用电子签名、数据电文的形式而否定其法律效力。</p><p>前款规定不适用下列文书：</p><p>（一）涉及婚姻、收养、继承等人身关系的；</p><p>（二）涉及停止供水、供热、供气等公用事业服务的；</p><p>（三）法律、行政法规规定的不适用电子文书的其他情形。</p><p>第二章　数据电文</p><p>第四条　能够有形地表现所载内容，并可以随时调取查用的数据电文，视为符合法律、法规要求的书面形式。</p><p>第五条　符合下列条件的数据电文，视为满足法律、法规规定的原件形式要求：</p><p>（一）能够有效地表现所载内容并可供随时调取查用；</p><p>（二）能够可靠地保证自最终形成时起，内容保持完整、未被更改。但是，在数据电文上增加背书以及数据交换、储存和显示过程中发生的形式变化不影响数据电文的完整性。</p><p>第六条　符合下列条件的数据电文，视为满足法律、法规规定的文件保存要求：</p><p>（一）能够有效地表现所载内容并可供随时调取查用；</p><p>（二）数据电文的格式与其生成、发送或者接收时的格式相同，或者格式不相同但是能够准确表现原来生成、发送或者接收的内容；</p><p>（三）能够识别数据电文的发件人、收件人以及发送、接收的时间。</p><p>第七条　数据电文不得仅因为其是以电子、光学、磁或者类似手段生成、发送、接收或者储存的而被拒绝作为证据使用。</p><p>第八条　审查数据电文作为证据的真实性，应当考虑以下因素：</p><p>（一）生成、储存或者传递数据电文方法的可靠性；</p><p>（二）保持内容完整性方法的可靠性；</p><p>（三）用以鉴别发件人方法的可靠性；</p><p>（四）其他相关因素。</p><p>第九条　数据电文有下列情形之一的，视为发件人发送：</p><p>（一）经发件人授权发送的；</p><p>（二）发件人的信息系统自动发送的；</p><p>（三）收件人按照发件人认可的方法对数据电文进行验证后结果相符的。</p><p>当事人对前款规定的事项另有约定的，从其约定。</p><p>第十条　法律、行政法规规定或者当事人约定数据电文需要确认收讫的，应当确认收讫。发件人收到收件人的收讫确认时，数据电文视为已经收到。</p><p>第十一条　数据电文进入发件人控制之外的某个信息系统的时间，视为该数据电文的发送时间。</p><p>收件人指定特定系统接收数据电文的，数据电文进入该特定系统的时间，视为该数据电文的接收时间；未指定特定系统的，数据电文进入收件人的任何系统的首次时间，视为该数据电文的接收时间。</p><p>当事人对数据电文的发送时间、接收时间另有约定的，从其约定。</p><p>第十二条　发件人的主营业地为数据电文的发送地点，收件人的主营业地为数据电文的接收地点。没有主营业地的，其经常居住地为发送或者接收地点。</p><p>当事人对数据电文的发送地点、接收地点另有约定的，从其约定。</p><p>第三章　电子签名与认证</p><p>第十三条　电子签名同时符合下列条件的，视为可靠的电子签名：</p><p>（一）电子签名制作数据用于电子签名时，属于电子签名人专有；</p><p>（二）签署时电子签名制作数据仅由电子签名人控制；</p><p>（三）签署后对电子签名的任何改动能够被发现；</p><p>（四）签署后对数据电文内容和形式的任何改动能够被发现。</p><p>当事人也可以选择使用符合其约定的可靠条件的电子签名。</p><p>第十四条　可靠的电子签名与手写签名或者盖章具有同等的法律效力。</p><p>第十五条　电子签名人应当妥善保管电子签名制作数据。电子签名人知悉电子签名制作数据已经失密或者可能已经失密时，应当及时告知有关各方，并终止使用该电子签名制作数据。</p><p>第十六条　电子签名需要第三方认证的，由依法设立的电子认证服务提供者提供认证服务。</p><p>第十七条　提供电子认证服务，应当具备下列条件：</p><p>（一）取得企业法人资格；</p><p>（二）具有与提供电子认证服务相适应的专业技术人员和管理人员；</p><p>（三）具有与提供电子认证服务相适应的资金和经营场所；</p><p>（四）具有符合国家安全标准的技术和设备；</p><p>（五）具有国家密码管理机构同意使用密码的证明文件；</p><p>（六）法律、行政法规规定的其他条件。</p><p>第十八条　从事电子认证服务，应当向国务院信息产业主管部门提出申请，并提交符合本法第十七条规定条件的相关材料。国务院信息产业主管部门接到申请后经依法审查，征求国务院商务主管部门等有关部门的意见后，自接到申请之日起四十五日内作出许可或者不予许可的决定。予以许可的，颁发电子认证许可证书；不予许可的，应当书面通知申请人并告知理由。</p><p>取得认证资格的电子认证服务提供者，应当按照国务院信息产业主管部门的规定在互联网上公布其名称、许可证号等信息。</p><p>第十九条　电子认证服务提供者应当制定、公布符合国家有关规定的电子认证业务规则，并向国务院信息产业主管部门备案。</p><p>电子认证业务规则应当包括责任范围、作业操作规范、信息安全保障措施等事项。</p><p>第二十条　电子签名人向电子认证服务提供者申请电子签名认证证书，应当提供真实、完整和准确的信息。</p><p>电子认证服务提供者收到电子签名认证证书申请后，应当对申请人的身份进行查验，并对有关材料进行审查。</p><p>第二十一条　电子认证服务提供者签发的电子签名认证证书应当准确无误，并应当载明下列内容：</p><p>（一）电子认证服务提供者名称；</p><p>（二）证书持有人名称；</p><p>（三）证书序列号；</p><p>（四）证书有效期；</p><p>（五）证书持有人的电子签名验证数据；</p><p>（六）电子认证服务提供者的电子签名；</p><p>（七）国务院信息产业主管部门规定的其他内容。</p><p>第二十二条　电子认证服务提供者应当保证电子签名认证证书内容在有效期内完整、准确，并保证电子签名依赖方能够证实或者了解电子签名认证证书所载内容及其他有关事项。</p><p>第二十三条　电子认证服务提供者拟暂停或者终止电子认证服务的，应当在暂停或者终止服务九十日前，就业务承接及其他有关事项通知有关各方。</p><p>电子认证服务提供者拟暂停或者终止电子认证服务的，应当在暂停或者终止服务六十日前向国务院信息产业主管部门报告，并与其他电子认证服务提供者就业务承接进行协商，作出妥善安排。</p><p>电子认证服务提供者未能就业务承接事项与其他电子认证服务提供者达成协议的，应当申请国务院信息产业主管部门安排其他电子认证服务提供者承接其业务。</p><p>电子认证服务提供者被依法吊销电子认证许可证书的，其业务承接事项的处理按照国务院信息产业主管部门的规定执行。</p><p>第二十四条　电子认证服务提供者应当妥善保存与认证相关的信息，信息保存期限至少为电子签名认证证书失效后五年。</p><p>第二十五条　国务院信息产业主管部门依照本法制定电子认证服务业的具体管理办法，对电子认证服务提供者依法实施监督管理。</p><p>第二十六条　经国务院信息产业主管部门根据有关协议或者对等原则核准后，中华人民共和国境外的电子认证服务提供者在境外签发的电子签名认证证书与依照本法设立的电子认证服务提供者签发的电子签名认证证书具有同等的法律效力。</p><h1 id="5、《中华人民共和国密码法》中华人民共和国主席令第三十五号"><a href="#5、《中华人民共和国密码法》中华人民共和国主席令第三十五号" class="headerlink" title="5、《中华人民共和国密码法》中华人民共和国主席令第三十五号"></a>5、《中华人民共和国密码法》中华人民共和国主席令第三十五号</h1><h2 id="1-了解核心密码、普通密码、商用密码之间的区别。"><a href="#1-了解核心密码、普通密码、商用密码之间的区别。" class="headerlink" title="(1)了解核心密码、普通密码、商用密码之间的区别。"></a>(1)了解核心密码、普通密码、商用密码之间的区别。</h2><p>第一章　总　　则</p><p>第一条　为了规范密码应用和管理，促进密码事业发展，保障网络与信息安全，维护国家安全和社会公共利益，保护公民、法人和其他组织的合法权益，制定本法。</p><p>第二条　本法所称密码，是指采用特定变换的方法对信息等进行加密保护、安全认证的技术、产品和服务。</p><p>第三条　密码工作坚持总体国家安全观，遵循统一领导、分级负责，创新发展、服务大局，依法管理、保障安全的原则。</p><p>第四条　坚持中国共产党对密码工作的领导。中央密码工作领导机构对全国密码工作实行统一领导，制定国家密码工作重大方针政策，统筹协调国家密码重大事项和重要工作，推进国家密码法治建设。</p><p>第五条　国家密码管理部门负责管理全国的密码工作。县级以上地方各级密码管理部门负责管理本行政区域的密码工作。</p><p>国家机关和涉及密码工作的单位在其职责范围内负责本机关、本单位或者本系统的密码工作。</p><p>第六条　国家对密码实行分类管理。</p><p>密码分为核心密码、普通密码和商用密码。</p><p>第七条　核心密码、普通密码用于保护国家秘密信息，核心密码保护信息的最高密级为绝密级，普通密码保护信息的最高密级为机密级。</p><p>核心密码、普通密码属于国家秘密。密码管理部门依照本法和有关法律、行政法规、国家有关规定对核心密码、普通密码实行严格统一管理。</p><p>第八条　商用密码用于保护不属于国家秘密的信息。</p><p>公民、法人和其他组织可以依法使用商用密码保护网络与信息安全。</p><p>第九条　国家鼓励和支持密码科学技术研究和应用，依法保护密码领域的知识产权，促进密码科学技术进步和创新。</p><p>国家加强密码人才培养和队伍建设，对在密码工作中作出突出贡献的组织和个人，按照国家有关规定给予表彰和奖励。</p><p>第十条　国家采取多种形式加强密码安全教育，将密码安全教育纳入国民教育体系和公务员教育培训体系，增强公民、法人和其他组织的密码安全意识。</p><p>第十一条　县级以上人民政府应当将密码工作纳入本级国民经济和社会发展规划，所需经费列入本级财政预算。</p><p>第十二条　任何组织或者个人不得窃取他人加密保护的信息或者非法侵入他人的密码保障系统。</p><p>任何组织或者个人不得利用密码从事危害国家安全、社会公共利益、他人合法权益等违法犯罪活动。</p><p>第二章　核心密码、普通密码</p><p>第十三条　国家加强核心密码、普通密码的科学规划、管理和使用，加强制度建设，完善管理措施，增强密码安全保障能力。</p><p>第十四条　在有线、无线通信中传递的国家秘密信息，以及存储、处理国家秘密信息的信息系统，应当依照法律、行政法规和国家有关规定使用核心密码、普通密码进行加密保护、安全认证。</p><p>第十五条　从事核心密码、普通密码科研、生产、服务、检测、装备、使用和销毁等工作的机构（以下统称密码工作机构）应当按照法律、行政法规、国家有关规定以及核心密码、普通密码标准的要求，建立健全安全管理制度，采取严格的保密措施和保密责任制，确保核心密码、普通密码的安全。</p><p>第十六条　密码管理部门依法对密码工作机构的核心密码、普通密码工作进行指导、监督和检查，密码工作机构应当配合。</p><p>第十七条　密码管理部门根据工作需要会同有关部门建立核心密码、普通密码的安全监测预警、安全风险评估、信息通报、重大事项会商和应急处置等协作机制，确保核心密码、普通密码安全管理的协同联动和有序高效。</p><p>密码工作机构发现核心密码、普通密码泄密或者影响核心密码、普通密码安全的重大问题、风险隐患的，应当立即采取应对措施，并及时向保密行政管理部门、密码管理部门报告，由保密行政管理部门、密码管理部门会同有关部门组织开展调查、处置，并指导有关密码工作机构及时消除安全隐患。</p><p>第十八条　国家加强密码工作机构建设，保障其履行工作职责。</p><p>国家建立适应核心密码、普通密码工作需要的人员录用、选调、保密、考核、培训、待遇、奖惩、交流、退出等管理制度。</p><p>第十九条　密码管理部门因工作需要，按照国家有关规定，可以提请公安、交通运输、海关等部门对核心密码、普通密码有关物品和人员提供免检等便利，有关部门应当予以协助。</p><p>第二十条　密码管理部门和密码工作机构应当建立健全严格的监督和安全审查制度，对其工作人员遵守法律和纪律等情况进行监督，并依法采取必要措施，定期或者不定期组织开展安全审查。</p><p>第三章　商用密码</p><p>第二十一条　国家鼓励商用密码技术的研究开发、学术交流、成果转化和推广应用，健全统一、开放、竞争、有序的商用密码市场体系，鼓励和促进商用密码产业发展。</p><p>各级人民政府及其有关部门应当遵循非歧视原则，依法平等对待包括外商投资企业在内的商用密码科研、生产、销售、服务、进出口等单位（以下统称商用密码从业单位）。国家鼓励在外商投资过程中基于自愿原则和商业规则开展商用密码技术合作。行政机关及其工作人员不得利用行政手段强制转让商用密码技术。</p><p>商用密码的科研、生产、销售、服务和进出口，不得损害国家安全、社会公共利益或者他人合法权益。</p><p>第二十二条　国家建立和完善商用密码标准体系。</p><p>国务院标准化行政主管部门和国家密码管理部门依据各自职责，组织制定商用密码国家标准、行业标准。</p><p>国家支持社会团体、企业利用自主创新技术制定高于国家标准、行业标准相关技术要求的商用密码团体标准、企业标准。</p><p>第二十三条　国家推动参与商用密码国际标准化活动，参与制定商用密码国际标准，推进商用密码中国标准与国外标准之间的转化运用。</p><p>国家鼓励企业、社会团体和教育、科研机构等参与商用密码国际标准化活动。</p><p>第二十四条　商用密码从业单位开展商用密码活动，应当符合有关法律、行政法规、商用密码强制性国家标准以及该从业单位公开标准的技术要求。</p><p>国家鼓励商　用密码从业单位采用商用密码推荐性国家标准、行业标准，提升商用密码的防护能力，维护用户的合法权益。</p><p>第二十五条　国家推进商用密码检测认证体系建设，制定商用密码检测认证技术规范、规则，鼓励商用密码从业单位自愿接受商用密码检测认证，提升市场竞争力。</p><p>商用密码检测、认证机构应当依法取得相关资质，并依照法律、行政法规的规定和商用密码检测认证技术规范、规则开展商用密码检测认证。</p><p>商用密码检测、认证机构应当对其在商用密码检测认证中所知悉的国家秘密和商业秘密承担保密义务。</p><p>第二十六条　涉及国家安全、国计民生、社会公共利益的商用密码产品，应当依法列入网络关键设备和网络安全专用产品目录，由具备资格的机构检测认证合格后，方可销售或者提供。商用密码产品检测认证适用《中华人民共和国网络安全法》的有关规定，避免重复检测认证。</p><p>商用密码服务使用网络关键设备和网络安全专用产品的，应当经商用密码认证机构对该商用密码服务认证合格。</p><p>第二十七条　法律、行政法规和国家有关规定要求使用商用密码进行保护的关键信息基础设施，其运营者应当使用商用密码进行保护，自行或者委托商用密码检测机构开展商用密码应用安全性评估。商用密码应用安全性评估应当与关键信息基础设施安全检测评估、网络安全等级测评制度相衔接，避免重复评估、测评。</p><p>关键信息基础设施的运营者采购涉及商用密码的网络产品和服务，可能影响国家安全的，应当按照《中华人民共和国网络安全法》的规定，通过国家网信部门会同国家密码管理部门等有关部门组织的国家安全审查。</p><p>第二十八条　国务院商务主管部门、国家密码管理部门依法对涉及国家安全、社会公共利益且具有加密保护功能的商用密码实施进口许可，对涉及国家安全、社会公共利益或者中国承担国际义务的商用密码实施出口管制。商用密码进口许可清单和出口管制清单由国务院商务主管部门会同国家密码管理部门和海关总署制定并公布。</p><p>大众消费类产品所采用的商用密码不实行进口许可和出口管制制度。</p><p>第二十九条　国家密码管理部门对采用商用密码技术从事电子政务电子认证服务的机构进行认定，会同有关部门负责政务活动中使用电子签名、数据电文的管理。</p><p>第三十条　商用密码领域的行业协会等组织依照法律、行政法规及其章程的规定，为商用密码从业单位提供信息、技术、培训等服务，引导和督促商用密码从业单位依法开展商用密码活动，加强行业自律，推动行业诚信建设，促进行业健康发展。</p><p>第三十一条　密码管理部门和有关部门建立日常监管和随机抽查相结合的商用密码事中事后监管制度，建立统一的商用密码监督管理信息平台，推进事中事后监管与社会信用体系相衔接，强化商用密码从业单位自律和社会监督。</p><p>密码管理部门和有关部门及其工作人员不得要求商用密码从业单位和商用密码检测、认证机构向其披露源代码等密码相关专有信息，并对其在履行职责中知悉的商业秘密和个人隐私严格保密，不得泄露或者非法向他人提供。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据分析应用-中级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据考试-大数据法律法规、政策文件及相关标准 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（一）设计模式概述</title>
      <link href="/2021/10/09/%E8%BD%AF%E8%80%83/10%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/10/09/%E8%BD%AF%E8%80%83/10%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、设计模式的概念"><a href="#一、设计模式的概念" class="headerlink" title="一、设计模式的概念"></a>一、设计模式的概念</h1><p>设计模式解决的是一类问题。<br>工厂模式就是为了解决类创建的问题，<br>适配器模式则是为了解决类接口不匹配的问题。</p><p>(1)学习这些模式是一个方面，另一方面更要了解模式中的思想。<br>(2)设计模式虽然可以使设计变得更精妙，但滥用设计模式会适得其反。</p><h1 id="二、设计模式的组成"><a href="#二、设计模式的组成" class="headerlink" title="二、设计模式的组成"></a>二、设计模式的组成</h1><p>在描述一个设计模式时，至少需要包含四个方面:<br>模式名称(Pattern name)、<br>问题(Problem)、<br>解决方案(Solution)、<br>效果(Consequence)。</p><h1 id="三、GoF设计模式"><a href="#三、GoF设计模式" class="headerlink" title="三、GoF设计模式"></a>三、GoF设计模式</h1><h2 id="补充-简单工厂"><a href="#补充-简单工厂" class="headerlink" title="(补充)简单工厂"></a>(补充)简单工厂</h2><p>1、写一个工厂类，使用静态方法，根据传参来new不同的产品对象<br>2、客户端调用这个工厂类的静态方法，就可以获取想要的产品</p><h2 id="1-Factory-Method-模式。工厂模式"><a href="#1-Factory-Method-模式。工厂模式" class="headerlink" title="(1)Factory Method 模式。工厂模式"></a>(1)Factory Method 模式。工厂模式</h2><p>Factory Method 模式提供了一种延迟创建类的方法，使用 这个方法可以在运行期由子类决定创建哪一个类的实例。<br>1、写一个抽象工厂类，每个工厂实现类负责将new不同种类的产品。<br>2、客户端new不同的工厂实现类就可以获得不同的产品。</p><h2 id="2-Abstract-Factory-模式。抽象工厂模式"><a href="#2-Abstract-Factory-模式。抽象工厂模式" class="headerlink" title="(2)Abstract Factory 模式。抽象工厂模式"></a>(2)Abstract Factory 模式。抽象工厂模式</h2><p>Abstract Factory 又称为抽象工厂模式，该模式主要为解决 复杂系统中对象创建的问题。抽象工厂模式提供了一个一致的对象创建接口来创建一系列具 有相似基类或相似接口的对象。<br>1、写一个抽象工厂类，然后每个工厂实现类负责new一组不同的种类的产品。<br>2、客户端new需要某一组的产品，只需要new一个工厂即可。</p><h2 id="3-Builder-模式。建造者模式"><a href="#3-Builder-模式。建造者模式" class="headerlink" title="(3)Builder 模式。建造者模式"></a>(3)Builder 模式。建造者模式</h2><p>Builder 模式与 Abstract Factory 模式非常类似，但 Builder 模式是逐步地构造出一个复杂对象，并在最后返回对象的实例。Builder 模式可以把复杂对象的创建与表示分离，使得同样的创建过程可以创建不同的表示。<br>1、Builder：给出一个抽象接口，以规范产品对象的各个组成成分的建造。这个接口规定要实现复杂对象的哪些部分的创建，并不涉及具体的对象部件的创建。<br>2、ConcreteBuilder：实现Builder接口，针对不同的商业逻辑，具体化复杂对象的各部分的创建。在建造过程完成后，提供产品的实例。<br>3、Director：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建，是一个具体的类。<br>4、Product：要创建的复杂对象类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Director &#123;</span><br><span class="line">    </span><br><span class="line">    public Product constructProduct(ConcreteBuilder concreteBuilder)&#123;</span><br><span class="line">        concreteBuilder.buildBasic();</span><br><span class="line">        concreteBuilder.buildWalls();</span><br><span class="line">        concreteBuilder.roofed();</span><br><span class="line">        return concreteBuilder.buildProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Prototype-模式。原型模式"><a href="#4-Prototype-模式。原型模式" class="headerlink" title="(4)Prototype 模式。原型模式"></a>(4)Prototype 模式。原型模式</h2><p>Prototype 模式可以根据原型实例制定创建的对象的种类，并通过深复制这个原型来创建新的对象。Prototype 模式有着同 Abstract Factory 模式和 Builder 模式相同的效果，不过当需要实例化的类是在运行期才被指定的而且要避免创建一个与产品 曾是平行的工厂类层次时，可以使用 Prototype 模式。使用 Prototype 模式可以在运行时 增加或减少原型，比 Abstract Factory 和 Builder 模式更加灵活。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Prototype pro = new Prototype();</span><br><span class="line">Prototype pro1 = (Prototype)pro.clone();</span><br></pre></td></tr></table></figure><h2 id="5-Singleton-模式。单例模式"><a href="#5-Singleton-模式。单例模式" class="headerlink" title="(5)Singleton 模式。单例模式"></a>(5)Singleton 模式。单例模式</h2><p>Singleton 模式也是一种很有代表性的模式。使用 Singleton 模式 可以保证一个类仅有一个实例，从而可以提供一个单一的全局访问点。</p><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><p>在定义类的静态私有变量同时进行实例化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance = new Singleton();  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">        return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处：线程安全；获取实例速度快<br>缺点：类加载即初始化实例，内存浪费</p><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private volatile static Singleton singleton;</span><br><span class="line">    private Singleton ()&#123;&#125;</span><br><span class="line">    public static Singleton getSingleton() &#123;</span><br><span class="line">        if (singleton == null) &#123;</span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                if (singleton == null) &#123;</span><br><span class="line">                    singleton = new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：线程安全，进行双重检查，保证只在实例未初始化前进行同步，效率高<br>缺点：实例非空判断，耗费一定资源</p><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static class SingletonHolder &#123;</span><br><span class="line">        private static final Singleton INSTANCE = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    private Singleton ()&#123;&#125;</span><br><span class="line">    public static final Singleton getInstance() &#123;</span><br><span class="line">        return SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式利用了classloder的机制来保证初始化instance时只有一个线程，但singleton类被装载了，instance不一定被初始化。因为SingletonHolder类没有被主动使用，只有显示通过调用getInstance方法时，才会显示装载SingletonHolder类，从而实例化instance。如果实例化instance很消耗资源，我们想让他延迟加载，此外，我们不希望在Singleton类加载时就实例化，因为不能确保Singleton类还可能在其他的地方被主动使用从而被加载。这个时候，这种方式相比饿汉式就显得更合理。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public enum Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    public void whateverMethod() &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：写法简单，天然线程安全，可防止反射生成实例，是Effective Java作者Josh Bloch提倡的方式。</p><h2 id="6-Adapter-模式。适配者模式"><a href="#6-Adapter-模式。适配者模式" class="headerlink" title="(6)Adapter 模式。适配者模式"></a>(6)Adapter 模式。适配者模式</h2><p>Adapter 模式可以解决系统间接口不相容的问题。通过 Adapter 可以把类的接口转化为客户程序所希望的接口，从而提高复用性。<br>实现原来的接口，方法体却是另一个对象的实现。</p><h3 id="接口适配"><a href="#接口适配" class="headerlink" title="接口适配"></a>接口适配</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">interface Mp4&#123;</span><br><span class="line">    void playMp4();</span><br><span class="line">&#125;</span><br><span class="line">interface Avi&#123;</span><br><span class="line">    void playAvi();</span><br><span class="line">&#125;</span><br><span class="line">class VideoPlayer implements Mp4&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void playMp4() &#123;</span><br><span class="line">        System.out.println(&quot;播放Mp4格式的视频文件.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class FormatFactory extends VideoPlayer  implements Avi&#123;    </span><br><span class="line">    @Override</span><br><span class="line">    public void playAvi() &#123;</span><br><span class="line">        //转换成MP4格式的视频</span><br><span class="line">        playMp4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;        </span><br><span class="line">    Mp4 mp4=new VideoPlayer();</span><br><span class="line">    mp4.playMp4();</span><br><span class="line">    Avi avi=new FormatFactory();</span><br><span class="line">    avi.playAvi();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类适配"><a href="#类适配" class="headerlink" title="类适配"></a>类适配</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class FormatFactory2 implements Rvmb&#123;</span><br><span class="line">    private Mp4 mp4;</span><br><span class="line">    public FormatFactory2(Mp4 mp4) &#123;</span><br><span class="line">        this.mp4=mp4;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void playRvmb() &#123;</span><br><span class="line">        mp4.playMp4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Rvmb rvmb=new FormatFactory2(new VideoPlayer());</span><br><span class="line">    rvmb.playRvmb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Bridge-模式。桥接模式"><a href="#7-Bridge-模式。桥接模式" class="headerlink" title="(7)Bridge 模式。桥接模式"></a>(7)Bridge 模式。桥接模式</h2><p>Bridge 模式把类的抽象部分同实现部分相分离，这样类的抽象和实现都可以独立地变化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">interface Pen&#123;</span><br><span class="line">    void write();</span><br><span class="line">&#125;</span><br><span class="line">class RedPen implements Pen&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void write() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">abstract class  Paper&#123;</span><br><span class="line">    protected  Pen pen;</span><br><span class="line">    void setPen(Pen pen)&#123;</span><br><span class="line">        this.pen=pen;</span><br><span class="line">    &#125;   </span><br><span class="line">    abstract void writing();</span><br><span class="line">&#125;</span><br><span class="line">class ExaminationPaper extends Paper&#123;</span><br><span class="line">    @Override</span><br><span class="line">    void writing() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Paper paper=new ExaminationPaper();</span><br><span class="line">    paper.setPen(new RedPen());</span><br><span class="line">    paper.writing();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-Composite-模式。复合模式"><a href="#8-Composite-模式。复合模式" class="headerlink" title="(8)Composite 模式。复合模式"></a>(8)Composite 模式。复合模式</h2><p>Composite 模式提供了一种以树形结构组合对象的方法，使用Composite 可以使单个对象和组合后的对象具有一致性以提高软件的复用性。</p><h2 id="9-Decorator-模式。装饰模式"><a href="#9-Decorator-模式。装饰模式" class="headerlink" title="(9)Decorator 模式。装饰模式"></a>(9)Decorator 模式。装饰模式</h2><p>Decorator 模式可以动态地为对象的某一个方法增加更多的功能。在很多时候，使用 Decorator 模式可以不必继承出新的子类从而维护简洁的类继承结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public interface Beverage&#123;&#125; // 饮料接口</span><br><span class="line">public class CoffeeBean implements Beverage&#123;&#125; // 具体被装饰的对象类</span><br><span class="line">public class Decorator implements Beverage&#123;&#125; // 装饰类</span><br><span class="line">public class Milk extends Decorator&#123; // 具体装饰类，给咖啡加入牛奶</span><br><span class="line">private String description = &quot;加了牛奶！&quot;;</span><br><span class="line">private Beverage beverage = null;</span><br><span class="line">public Milk(Beverage beverage)&#123;</span><br><span class="line">this.beverage = beverage;</span><br><span class="line">&#125;</span><br><span class="line">public String getDescription()&#123;</span><br><span class="line">return beverage.getDescription()+&quot;\n&quot;+description;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Beverage beverage = new CoffeeBean();</span><br><span class="line">    beverage = new Milk(beverage); // 给咖啡加了牛奶</span><br><span class="line">    System.out.println(beverage.getDescription());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-Facade-模式。外观模式，门面模式"><a href="#10-Facade-模式。外观模式，门面模式" class="headerlink" title="(10)Facade 模式。外观模式，门面模式"></a>(10)Facade 模式。外观模式，门面模式</h2><p>Facade 模式为一组类提供了一致的访问接口。使用 Facade 可以 封装内部具有不同接口的类，使其对外提供统一的访问方式。Facade 模式在 J2EE 系统开 发中发展为 Session Facade 模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class FacadePattern &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Facade f = new Facade();</span><br><span class="line">        f.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Facade &#123; //外观角色</span><br><span class="line">    private SubSystem01 obj1 = new SubSystem01();</span><br><span class="line">    private SubSystem02 obj2 = new SubSystem02();</span><br><span class="line">    private SubSystem03 obj3 = new SubSystem03();</span><br><span class="line">    public void method() &#123;</span><br><span class="line">        obj1.method1();</span><br><span class="line">        obj2.method2();</span><br><span class="line">        obj3.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-Flyweight-模式。享元模式，共享元素"><a href="#11-Flyweight-模式。享元模式，共享元素" class="headerlink" title="(11)Flyweight 模式。享元模式，共享元素"></a>(11)Flyweight 模式。享元模式，共享元素</h2><p>Flyweight 模式可以共享大量的细粒度对象，从而节省创建对象 所需要分配的空间，不过在时间上的开销会变大。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public Flyweight factory(int state)&#123;</span><br><span class="line">    if(map.containsKey(state))&#123;</span><br><span class="line">        return (Flyweight)map.get(state);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        map.put(state, new ConcreteFlyweight(state));</span><br><span class="line">        return (Flyweight)map.get(state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-Proxy-模式。代理模式"><a href="#12-Proxy-模式。代理模式" class="headerlink" title="(12)Proxy 模式。代理模式"></a>(12)Proxy 模式。代理模式</h2><p>Proxy 模式为对象提供了一种访问代理对象，通过对象 Proxy 可以控制客户程序的访问。例如:访问权限的控制、访问地址的控制、访问方式的控制等， 甚至可以通过 Proxy 将开销较大的访问化整为零，提高访问效率。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Customer customer=new Customer();</span><br><span class="line">customer.setCash(120000);</span><br><span class="line">BuyCarProxy buyCarProxy=new BuyCarProxy(customer);</span><br><span class="line">buyCarProxy.buyCar();</span><br></pre></td></tr></table></figure><h2 id="13-Interpreter-模式。解释器模式"><a href="#13-Interpreter-模式。解释器模式" class="headerlink" title="(13)Interpreter 模式。解释器模式"></a>(13)Interpreter 模式。解释器模式</h2><p>定义了一个解释器，来解释遵循给定语言和文法的句子。<br>只需要向计算机输入一个句子或文件，就能按照预定的文法规则来对句子或文件进行解释。<br>例如输入“1+2+3-4+1”时，将输出计算结果为3。</p><h2 id="14-Template-Method-模式。模板方法模式"><a href="#14-Template-Method-模式。模板方法模式" class="headerlink" title="(14)Template Method 模式。模板方法模式"></a>(14)Template Method 模式。模板方法模式</h2><p>定义一个操作的模板，其中的一些步骤会在子类中实现，以适应不同的情况。<br>在父类中定义处理流程的框架，在子类中实现具体的处理方式。</p><h2 id="15-Chain-of-Responsibility-模式。责任链模式"><a href="#15-Chain-of-Responsibility-模式。责任链模式" class="headerlink" title="(15)Chain of Responsibility 模式。责任链模式"></a>(15)Chain of Responsibility 模式。责任链模式</h2><p>Chain of Responsibility 模式把可以响应请求的对象 组织成一条链，并在这条对象链上传递请求，从而保证多个对象都有机会处理请求而且可以 避免请求方和相应方的耦合。</p><p>一个纯的责任链模式要求一个具体的处理者对象只能在两个行为中选择一个：一个是承担责任，二是把责任推给下家。不允许出现某一个具体处理者对象在承担了一部分责任后又把责任向下传的情况。</p><p>在一个纯的责任链模式里面，一个请求必须被某一个处理者对象所接收；在一个不纯的责任链模式里面，一个请求可以最终不被任何接收端对象所接收。纯的责任链模式的例子是不容易找到的，一般看到的例子均是不纯的责任链模式的实现。</p><h2 id="16-Command-模式。命令模式"><a href="#16-Command-模式。命令模式" class="headerlink" title="(16)Command 模式。命令模式"></a>(16)Command 模式。命令模式</h2><p>将请求封装为对象，从而增强请求的能力，如参数化、排队、 记录日志等。</p><p>Command有时也被称为事件（event）。它与“事件驱动编程”中的“事件”是一样的意思。当发生点击鼠标、按下键盘按键等事件时，我们可以先将这些事件作成实例，然后按照发生顺序放入队列中。接着，再依次去处理它们。在GUI（graphical user interface）编程中，经常需要与“事件”打交道。即为在有多个命令，并且这些命令有一定的逻辑顺序，且可能需要保存的这些命令的数据，那么可以使用Command设计模式。</p><h2 id="17-Iterator-模式。迭代器模式"><a href="#17-Iterator-模式。迭代器模式" class="headerlink" title="(17)Iterator 模式。迭代器模式"></a>(17)Iterator 模式。迭代器模式</h2><p>Iterator 模式提供了顺序访问一个对象集合中的各元素的方法， 使用 Iterator 可以避免暴露集合中对象的耦合关系。</p><h2 id="18-Mediator-模式。仲裁者模式、中介者模式"><a href="#18-Mediator-模式。仲裁者模式、中介者模式" class="headerlink" title="(18)Mediator 模式。仲裁者模式、中介者模式"></a>(18)Mediator 模式。仲裁者模式、中介者模式</h2><p>Mediator 模式可以减少系统中对象间的耦合性。Mediator 模式 使用中介对象封装其他的对象，从而使这些被封装的对象间的关系就成了松散耦合。</p><p>例如：QQ聊天</p><h2 id="19-Memento-模式。备忘录模式"><a href="#19-Memento-模式。备忘录模式" class="headerlink" title="(19)Memento 模式。备忘录模式"></a>(19)Memento 模式。备忘录模式</h2><p>Memento 模式提供了一种捕获对象状态的方法，且不会破坏对 象的封装。并且可以在对象外部保存对象的状态，并在需要的时候恢复对象状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    List&lt;Memento&gt; savedTimes = new ArrayList&lt;&gt;();</span><br><span class="line">    Life life = new Life();</span><br><span class="line">    life.set(&quot;3000 A.D.&quot;);</span><br><span class="line">    savedTimes.add(life.saveToMemento());</span><br><span class="line">    life.set(&quot;4000 A.D.&quot;);</span><br><span class="line">    life.restoreFromMemento(savedTimes.get(0));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="20-Observer-模式。观察者模式"><a href="#20-Observer-模式。观察者模式" class="headerlink" title="(20)Observer 模式。观察者模式"></a>(20)Observer 模式。观察者模式</h2><p>Observer 模式提供了将对象的状态广播到一组观察者的方式， 从而可以让每个观察者随时可以得到对象更新的通知。</p><h2 id="21-State-模式。状态模式"><a href="#21-State-模式。状态模式" class="headerlink" title="(21)State 模式。状态模式"></a>(21)State 模式。状态模式</h2><p>State 模式允许一个对象在其内部状态改变的时候改变它的行为。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void setState(State state) &#123;</span><br><span class="line">    System.out.println(&quot;订单信息已更新！&quot;);</span><br><span class="line">    this.state = state;</span><br><span class="line">    this.state.handle();</span><br><span class="line">&#125;</span><br><span class="line">public static  void  main(String [] args) &#123;</span><br><span class="line">    Context context = new Context();</span><br><span class="line">    context.setState(new Booked());</span><br><span class="line">    context.setState(new Payed());</span><br><span class="line">    context.setState(new Sended());</span><br><span class="line">    context.setState(new InWay());</span><br><span class="line">    context.setState(new Recieved());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22-Strategy-模式。策略模式"><a href="#22-Strategy-模式。策略模式" class="headerlink" title="(22)Strategy 模式。策略模式"></a>(22)Strategy 模式。策略模式</h2><p>使用 Strategy 模式可以让对象中算法的变化独立于客户。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">状态模式和策略模式的不同点：</span><br><span class="line">策略模式中，类的功能是根据当前条件主动更改；</span><br><span class="line">状态模式中，类的功能是被动由当前状态更改；</span><br><span class="line">策略模式中每个行为或算法之间没有关联；</span><br><span class="line">状态模式中的状态之间有关联，并且状态本身控制着状态转移；</span><br></pre></td></tr></table></figure><h2 id="23-Visitor-模式。访问者模式"><a href="#23-Visitor-模式。访问者模式" class="headerlink" title="(23)Visitor 模式。访问者模式"></a>(23)Visitor 模式。访问者模式</h2><p>表示对某对象结构中各元素的操作，使用 Visitor 模式可以在不改<br>变各元素类的前提下定义作用于这些元素的新操作。</p><p>双重分发</p><h1 id="四、其他设计模式"><a href="#四、其他设计模式" class="headerlink" title="四、其他设计模式"></a>四、其他设计模式</h1><h2 id="1-Intercepting-Filter-模式。拦截过滤器模式"><a href="#1-Intercepting-Filter-模式。拦截过滤器模式" class="headerlink" title="(1)Intercepting Filter 模式。拦截过滤器模式"></a>(1)Intercepting Filter 模式。拦截过滤器模式</h2><p>在 J2EE 的 BPS(Basic Programming System，基本编程系 统)应用框架下，在真正响应客户端请求前经常需要进行一些预处理，如客户身份验证、客 户 Session 的合法性验证、字符集转码、客户请求记录等。</p><h2 id="2-Session-Facade-模式。"><a href="#2-Session-Facade-模式。" class="headerlink" title="(2)Session Facade 模式。"></a>(2)Session Facade 模式。</h2><p>在 J2EE 开发领域，人们把Session Bean 和 Facade 模式结合起来， 封装业务逻辑的接口，形成了 Session Facade 模式。</p><h1 id="五、设计模式与软件架构"><a href="#五、设计模式与软件架构" class="headerlink" title="五、设计模式与软件架构"></a>五、设计模式与软件架构</h1><p>软件架构更倾向于从整体和全局上描述软件的组成。<br>设计模式更侧重于类与类、对象与对象之间的关系。<br>设计模式和软件架构是面向不同层次问题的解决方案。</p><h1 id="六、设计模式分类"><a href="#六、设计模式分类" class="headerlink" title="六、设计模式分类"></a>六、设计模式分类</h1><p>设计模式分为三类，分别为创建型、结构型和行为型。</p><p><img src="/images/ruankao/8-1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（二）设计模式及实现</title>
      <link href="/2021/10/09/%E8%BD%AF%E8%80%83/10%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/10/09/%E8%BD%AF%E8%80%83/10%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/ruankao/8-2.png"></p><p><img src="/images/ruankao/8-3.png"></p><p><img src="/images/ruankao/8-4.png"></p><p><img src="/images/ruankao/8-5.png"></p><p><img src="/images/ruankao/8-6.png"></p><p><img src="/images/ruankao/8-7.png"></p><p><img src="/images/ruankao/8-8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式（三）设计模式总结</title>
      <link href="/2021/10/09/%E8%BD%AF%E8%80%83/10%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2021/10/09/%E8%BD%AF%E8%80%83/10%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>学习设计模式最重要的是理解，而不是生搬硬套。</p><p>不能滥用设计模式</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发管理（一）项目的范围、时间与成本</title>
      <link href="/2021/10/09/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%8C%83%E5%9B%B4%E3%80%81%E6%97%B6%E9%97%B4%E4%B8%8E%E6%88%90%E6%9C%AC/"/>
      <url>/2021/10/09/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%8C%83%E5%9B%B4%E3%80%81%E6%97%B6%E9%97%B4%E4%B8%8E%E6%88%90%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>一般的项目管理可以分为范围管理、时间管理、费用管理、质量管理、人力资源管理、沟通管理、风险管理、采购管理和整体管理 9 个知识领域。</p><p>对于软件的开发管理来讲，软件范围管理、软件进度管理、软件成本管理、软件配置管理(属于整体管理)、软件质量管理、软件风险管理、开发人员管理(属于人力资源管理)7 个方面的管理尤为重要</p><h1 id="一、项目范围管理"><a href="#一、项目范围管理" class="headerlink" title="一、项目范围管理"></a>一、项目范围管理</h1><p>目的是控制项目的全部活动都在需求范围内，以确保项目资源的高效利用。</p><p>它主要包括项目启动、范围计划编制、范围定义、范围核实和范围变更控制 5 个部分的内容。</p><p>当范围定义不明确时，不可避免的变更会使最终 项目成本大大超出预算，因为这些不可避免的变更会破坏项目节奏，导致返工、增加项目历 时、降低生产率和工作人员的士气。</p><h1 id="二、项目成本管理"><a href="#二、项目成本管理" class="headerlink" title="二、项目成本管理"></a>二、项目成本管理</h1><p>软件项目的成本不仅包括开发成本，也包括开发之前立项阶段及软件在运行中的费用。此外，操作者的培训费用和项目所使用的各种硬件设施费用也都是整个项目成本的一部分，这些成本都需要很好地计划和控制。</p><p>项目成本管理包括资源计划编制、成本估算、成本预算、成本控制 4 个主要部分内容。</p><h1 id="三、项目时间管理"><a href="#三、项目时间管理" class="headerlink" title="三、项目时间管理"></a>三、项目时间管理</h1><p>时间管理包括确保项目按时完成所需的各个过程。</p><p>它包括活动定义、活动排序、活动历时估算、进度计划编制、进度控制 5 个部分内容。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-开发管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发管理（三）软件需求管理</title>
      <link href="/2021/10/09/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E7%AE%A1%E7%90%86/"/>
      <url>/2021/10/09/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89%E8%BD%AF%E4%BB%B6%E9%9C%80%E6%B1%82%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="需求变更"><a href="#需求变更" class="headerlink" title="需求变更"></a>需求变更</h1><p>进行需求变更控制的主要依据是项目计划、变更请求和反映项目执行状况的绩效报告。</p><p>为保证项目变更的规范性和项目的有效实施，通常软件开发机构会采取如下措施。</p><h2 id="1-项目启动阶段的变更预防。"><a href="#1-项目启动阶段的变更预防。" class="headerlink" title="(1)项目启动阶段的变更预防。"></a>(1)项目启动阶段的变更预防。</h2><p>基准文件定义的范围越详细、清晰，用户跟项目经理的分歧就越少。<br>如果需求做得好，文档清晰且有客户签字，那么后期客户提出的变更超出了合同范围，就需要另外处理。</p><h2 id="2-项目实施阶段的需求变更。"><a href="#2-项目实施阶段的需求变更。" class="headerlink" title="(2)项目实施阶段的需求变更。"></a>(2)项目实施阶段的需求变更。</h2><p>“需求变更是必然的、可控的、有益的”</p><p>需求一定要与投入有联系，如果需求变更的成本由开发方来承担，则项目需求的变更就成为 必然了。所以，在项目的开始，无论是开发方还是出资方都要明确这一条:需求变，软件开 发的投入也要变。</p><p>需求的变更要经过出资者的认可，使需求的变更有成本的概念。这样项目实施涉及各方就能 够慎重地对待需求的变更。</p><p>小的需求变更也要经过正规的需求管理流程。在实践中，人们往往不愿意为小的需求变更去 执行正规的需求管理过程，认为降低了开发效率，浪费了时间。但正是由于这种观念才使需 求逐渐变为不可控，最终导致项目的失败。</p><h1 id="需求跟踪"><a href="#需求跟踪" class="headerlink" title="需求跟踪"></a>需求跟踪</h1><h2 id="1-确定需求变更控制过程。"><a href="#1-确定需求变更控制过程。" class="headerlink" title="(1)确定需求变更控制过程。"></a>(1)确定需求变更控制过程。</h2><p>制定一个选择、分析和决策需求变更的标准过程，所有的需求变更都需遵循此过程。</p><h2 id="2-进行需求变更影响分析。"><a href="#2-进行需求变更影响分析。" class="headerlink" title="(2)进行需求变更影响分析。"></a>(2)进行需求变更影响分析。</h2><p>评估每项需求变更，以确定它对项目计划安排和其他需求的影响，明确与变更相关的任务，并评估完成这些任务需要的工作量。通过这些分析将有助于需求变更控制部门做出更好的决策。</p><h2 id="3-建立需求基准版本和需求控制版本文档。"><a href="#3-建立需求基准版本和需求控制版本文档。" class="headerlink" title="(3)建立需求基准版本和需求控制版本文档。"></a>(3)建立需求基准版本和需求控制版本文档。</h2><p>确定需求基准，这是项目各方对需求达成一致认识时刻的一个快照，之后的需求变更遵循变更控制过程即可。每个版本的需求规格说明都必须是独立说明，以避免将底稿和基准或新旧版本相混淆。</p><h2 id="4-维护需求变更的历史记录。"><a href="#4-维护需求变更的历史记录。" class="headerlink" title="(4)维护需求变更的历史记录。"></a>(4)维护需求变更的历史记录。</h2><p>将需求变更情况写成文档，记录变更日期、原因、负责人、版本号等内容，及时通知到项目开发所涉及的人员。为了尽量减少困惑、冲突、误传，应指定专人来负责更新需求。</p><h2 id="5-跟踪每项需求的状态。"><a href="#5-跟踪每项需求的状态。" class="headerlink" title="(5)跟踪每项需求的状态。"></a>(5)跟踪每项需求的状态。</h2><p>可以把每一项需求的状态属性(如已推荐的，已通过的，已实施的，或已验证的)保存在数据库中，这样可以在任何时候得到每个状态类的需求数量。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-开发管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发管理（二）配置管理与文档管理</title>
      <link href="/2021/10/09/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/"/>
      <url>/2021/10/09/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>随着软件规模和复杂性的增大，许多大型开发项目往往都会延迟和超出预算，软件开发 不得不直面越来越多的问题，表现为开发的环境日益复杂，代码共享日益困难，需跨越的平 台增多;软件的重用性需要提高;软件的维护越来越困难。</p><p>软件配置管理(Software Configuration Management，SCM)，其主要作用是通过结构化的、有序化的、产品 化的管理软件工程的方法来维护产品的历史，鉴别和定位产品独有的版本，并在产品的开发 和发布阶段控制变化;通过有序管理和减少重复性工作，配置管理保证了生产的质量和效率; 它涵盖了软件生命周期的所有领域并影响所有数据和过程。</p><h1 id="一、软件配置管理的概念"><a href="#一、软件配置管理的概念" class="headerlink" title="一、软件配置管理的概念"></a>一、软件配置管理的概念</h1><p>SCM 是指在软件系统中确定和定义构件(源代码、可执行程序、文档等)，在整个生命周期中控制发布和变更，记录和报告构件的状态 和变更请求，并定义完整的、正确的系统构件的过程。</p><h2 id="在-IEEE-标准-729-1983-中，软件配置管理包括以下几个方面功能"><a href="#在-IEEE-标准-729-1983-中，软件配置管理包括以下几个方面功能" class="headerlink" title="在 IEEE 标准 729-1983 中，软件配置管理包括以下几个方面功能:"></a>在 IEEE 标准 729-1983 中，软件配置管理包括以下几个方面功能:</h2><h3 id="配置标识"><a href="#配置标识" class="headerlink" title="配置标识"></a>配置标识</h3><p>产品的结构、产品的构件及其类型，为其分配唯一的标识符，并以某种形式提供对它们的存取。</p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>过建立产品基线，控制软件产品的发布和在整个软件生命周期中对软件产品的 修改。例如，它将解决哪些修改会在该产品的最新版本中实现的问题。</p><h3 id="状态统计"><a href="#状态统计" class="headerlink" title="状态统计"></a>状态统计</h3><p>记录并报告构件和修改请求的状态，并收集关于产品构件的重要统计信息。例如， 它将解决修改这个错误会影响多少个文件的问题。</p><h3 id="审计和审查"><a href="#审计和审查" class="headerlink" title="审计和审查"></a>审计和审查</h3><p>确认产品的完整性并维护构件间的一致性，即确保产品是一个严格定义的构件 集合。例如，它将解决目前发布的产品所用的文件的版本是否正确的问题。</p><h3 id="生产"><a href="#生产" class="headerlink" title="生产"></a>生产</h3><p>对产品的生产进行优化管理。它将解决最新发布的产品应由哪些版本的文件和工具来 生成的问题。</p><h3 id="过程管理"><a href="#过程管理" class="headerlink" title="过程管理"></a>过程管理</h3><p>确保软件组织的规程、方针和软件周期得以正确贯彻执行。它将解决要交付给用 户的产品是否经过测试和质量检查的问题。</p><h3 id="小组协作"><a href="#小组协作" class="headerlink" title="小组协作"></a>小组协作</h3><p>控制开发统一产品的多个开发人员之间的协作。例如，它将解决是否所有本地程 序员所做的修改都已被加入新版本的产品中的问题。</p><h2 id="而在另外一个标准-ISO9000-3-中，对软件配置管理系统做了如下要求"><a href="#而在另外一个标准-ISO9000-3-中，对软件配置管理系统做了如下要求" class="headerlink" title="而在另外一个标准 ISO9000.3 中，对软件配置管理系统做了如下要求:"></a>而在另外一个标准 ISO9000.3 中，对软件配置管理系统做了如下要求:</h2><p>唯一地标识每个软件项的版本;<br>标识共同构成一个完整产品的特定版本的每一软件项的版本;<br>控制由两个或多个独立工作的人员同时对一个给定软件项的更新;<br>按要求在一个或多个位置对复杂产品的更新进行协调;<br>标识并跟踪所有的措施和更改;<br>这些措施和更改是在从开始直到放行期间，由于更改请求或问题引起的。</p><h2 id="版本管理应完成以下主要任务"><a href="#版本管理应完成以下主要任务" class="headerlink" title="版本管理应完成以下主要任务:"></a>版本管理应完成以下主要任务:</h2><p>建立项目;<br>重构任何修订版的某一项或某一文件;<br>利用加锁技术防止覆盖;<br>当增加一个修订版时要求输入变更描述;<br>提供比较任意两个修订版的使用工具;<br>采用增量存储方式;<br>提供对修订版历史和锁定状态的报告功能;<br>提供归并功能;<br>允许在任何时候重构任何版本;<br>权限的设置;<br>晋升模型的建立;<br>提供各种报告。</p><h1 id="二、软件配置管理的解决方案"><a href="#二、软件配置管理的解决方案" class="headerlink" title="二、软件配置管理的解决方案"></a>二、软件配置管理的解决方案</h1><p>常用的软件配置管理工具，主要有如下产品:Rational ClearCase，Merant PVCS， Microsoft VSS，CVS。</p><h1 id="三、软件文档管理"><a href="#三、软件文档管理" class="headerlink" title="三、软件文档管理"></a>三、软件文档管理</h1><h2 id="1-软件文档的作用"><a href="#1-软件文档的作用" class="headerlink" title="1.软件文档的作用"></a>1.软件文档的作用</h2><p>(1)管理依据。<br>(2)任务之间联系的凭证。<br>(3)质量保证。<br>(4)培训与参考。<br>(5)软件维护支持。<br>(6)历史档案。<br>(7)销售可能。</p><h2 id="2-文档的归类"><a href="#2-文档的归类" class="headerlink" title="2.文档的归类"></a>2.文档的归类</h2><p>软件文档大致可分为 3 类:开发文档;管理文档;产品文档。</p><h3 id="1-开发文档。"><a href="#1-开发文档。" class="headerlink" title="(1)开发文档。"></a>(1)开发文档。</h3><p>软件需求、软件设计、软件测试、保证软件质量的一类文档</p><h3 id="2-产品文档。"><a href="#2-产品文档。" class="headerlink" title="(2)产品文档。"></a>(2)产品文档。</h3><p>关于软件产品的使用、维护、增强、转换和传输的信息。</p><h3 id="3-管理文档。"><a href="#3-管理文档。" class="headerlink" title="(3)管理文档。"></a>(3)管理文档。</h3><p>项目开发计划、测试计划;<br>开发过程的每个阶段的进度和进度变更的记录;<br>软件变更情况的记录;<br>相对于开发的判定记录;<br>开发人员职责定义;<br>测试报告、开发进度月报;<br>项目开发总结等。</p><p>内部文档包括项目开发计划、需求分析、架构设计说明、详细设计说明、构件索引、构件成分说明、构件接口及调用说明、构件索引、构件接口及调用说明、类索引、类属性及方法说明、测试报告、测试 统计报告、质量监督报告、源代码、文档分类版本索引和软件安装打包文件等。</p><p>外部文档主要包括软件安装手册、软件操作手册、在线帮助、系统性能指标报告和系统操作索引等。</p><h2 id="3-文档编制计划"><a href="#3-文档编制计划" class="headerlink" title="3.文档编制计划"></a>3.文档编制计划</h2><p>文档计划一般包括以下几方面内容:<br>列出应编制文档的目录;<br>提示编制文档应参考的标准;<br>指定文档管理员;<br>提供编制文档所需要的条件，落实文档编写人员、所需经费及编制工具等;<br>明确保证文档质量的方法，为了确保文档内容的正确性、合理性，应采取一定的措施，如评审、鉴定等;<br>绘制进度表，以图表形式列出在软件生存期各阶段应产生的文档、编制人员、编制日期、完成日期、评审日期等。<br>要编制哪几种文档，详细程度如何;<br>各文档的编制负责人和进度要求;<br>审查/批准负责人和时间进度安排;<br>在开发时期内各文档的维护、修改和管理的负责人，以及批准手续。</p><h2 id="4-对文档质量的要求"><a href="#4-对文档质量的要求" class="headerlink" title="4.对文档质量的要求"></a>4.对文档质量的要求</h2><p>好的软件文档要求具备如下特征：</p><h3 id="1-针对性。"><a href="#1-针对性。" class="headerlink" title="(1)针对性。"></a>(1)针对性。</h3><p>文档编制前应分清读者对象。对不同的类型、不同层次的读者，决定如何满足适应他们的需要。<br>管理文档主要面向管理人员。<br>用户文档主要面向用户。</p><h3 id="2-精确性。"><a href="#2-精确性。" class="headerlink" title="(2)精确性。"></a>(2)精确性。</h3><p>文档的行文应当十分确切，不能出现多义性的描述。同一课题几个文档 的内容应当是协调一致、没有矛盾的。</p><h3 id="3-清晰性。"><a href="#3-清晰性。" class="headerlink" title="(3)清晰性。"></a>(3)清晰性。</h3><p>文档编写应力求简明，如有可能，配以适当的图表，以增强其清晰性。</p><h3 id="4-完整性。"><a href="#4-完整性。" class="headerlink" title="(4)完整性。"></a>(4)完整性。</h3><p>任何一个文档都应当是完整的、独立的，它应自成体系。</p><h3 id="5-灵活性。"><a href="#5-灵活性。" class="headerlink" title="(5)灵活性。"></a>(5)灵活性。</h3><p>各个不同软件项目，其规模和复杂程度有着许多实际差别，不能相同看 待。应根据具体的软件开发项目，决定编制的文档种类。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-开发管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发管理（四）软件开发的质量与风险</title>
      <link href="/2021/10/09/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E8%B4%A8%E9%87%8F%E4%B8%8E%E9%A3%8E%E9%99%A9/"/>
      <url>/2021/10/09/%E8%BD%AF%E8%80%83/13%E3%80%81%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86/%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E8%B4%A8%E9%87%8F%E4%B8%8E%E9%A3%8E%E9%99%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="一、软件质量管理"><a href="#一、软件质量管理" class="headerlink" title="一、软件质量管理"></a>一、软件质量管理</h1><p>项目质量管理包括保证项目能满足原先规定的各项要求所需要的过程。</p><p>总体管理功能中决定质量方针、目标与责任的所有活动，并通过诸如质量规划、质量保证、质量控制、质量改进等手段在质量体系内加以实施。</p><h2 id="1、质量计划"><a href="#1、质量计划" class="headerlink" title="1、质量计划"></a>1、质量计划</h2><p>判断哪些质量标准与本项目相关，并决定应如何达到这些质量标准。</p><p>在软件质量计划阶段应该完成如下活动:</p><p>1.对项目的软件质量活动做出计划。<br>2.对软件产品质量的可测量的目标及其优先级进行定义。<br>3.确定软件产品质量目标的实现过程是可量化和可管理的。<br>4.为管理软件产品的质量提供适当的资源和资金。<br>5.对实施和支持软件质量管理的人员进行实施和支持过程中所要求的培训。<br>6.对软件开发项目组和其他与软件项目有关的人员进行软件质量管理方面的培训。<br>7.按照已文档化的规程制订和维护项目的软件质量计划。<br>8.项目的软件质量管理活动要以项目的软件质量计划为基础。<br>9.在整个软件生命周期，要确定、监控和更新软件产品的质量目标。</p><h2 id="2、质量保证"><a href="#2、质量保证" class="headerlink" title="2、质量保证"></a>2、质量保证</h2><p>定期评估项目总体绩效，建立项目能达到相关质量标准的信心。</p><p>质量保证应贯穿于项目的始终，在事件驱动的基础上，对软件产品的质量进行测量、分析，并将分析结果与既定的质量标准相比较，以提供质量改进的依据。</p><p>如果属于软件外包，还需要对软件产品的定量质量目标进行合理的分工，分派给项目交付软件产品的承包商。</p><h2 id="3、质量控制"><a href="#3、质量控制" class="headerlink" title="3、质量控制"></a>3、质量控制</h2><p>监测项目的总体结果，判断它们是否符合相关质量标准，并找出如何消除不合格绩效的方法。</p><p>软件质量的控制不单单是一个软件测试问题，评审、调试和测试是保证软件质量的重要手段。</p><p>质量控制应贯穿于项目的始终。 </p><p>项目结果既包括产品结果(例如可交付成果)、也包括项目管理结果(例如成本与进度绩效)。</p><p>软件质量控制包括如下活动:<br>1.对软件产品进行测试，并将测试结果用于软件质量管理活动的状态。<br>2.高级管理者定期参与评审软件质量管理的活动。<br>3.软件项目负责人定期参与评审软件质量管理的活动。<br>4.软件质量保证评审小组负责评审软件的质量管理活动和工作产品，并填写相关报告。</p><p>评审目标包括如下部分:<br>1.发现任何形式表现的软件功能、逻辑或实现方面的错误;<br>2.通过评审验证软件的需求;<br>3.保证软件按预先定义的标准表示;<br>4.已获得的软件是以统一的形式开发的;<br>5.使项目更容易管理。</p><h1 id="二、项目风险管理"><a href="#二、项目风险管理" class="headerlink" title="二、项目风险管理"></a>二、项目风险管理</h1><p>事前控制——风险管理规划，事中控制——风险管理方法，事后控制——风险管理报告。</p><h2 id="1-项目风险管理的概念"><a href="#1-项目风险管理的概念" class="headerlink" title="1.项目风险管理的概念"></a>1.项目风险管理的概念</h2><p>(1)内部技术风险:技术变化和创新是项目风险的重要来源之一。</p><p>(2)内部非技术风险:公司的经营战略发生了变化相关的战略风险、涉及公司管理/ 项 目管理人员管理水平等的管理风险，以及与范围变更有关的风险;没有按照要求的技术性能 和质量水平完成任务的质量风险;没有在预算的时间范围内完成任务的进度风险;没有在预 算的成本范围内完成任务的成本风险。</p><p>(3)外部法律风险:包括与项目相关的规章或标准的变化，如许可权、专利、合同失效、诉讼等。</p><p>(4)外部非法律风险:主要是指项目的政治、社会影响、经济环境的变化，组织中雇佣关系的变化，如公司并购、政府干预、货币变动、通货膨胀、税收、自然灾害等。这类风险对项目的影响和项目性质的关系较大。</p><h2 id="2-风险管理的过程"><a href="#2-风险管理的过程" class="headerlink" title="2.风险管理的过程"></a>2.风险管理的过程</h2><p>1 风险管理规划，决定如何指导和规划项目的风险管理活动。<br>2 项目风险识别，找到哪些风险可能影响项目，并记录其特征。<br>3 定性风险分析，完成风险和环境的定性分析，并按其对项目目标的影响进行排序。<br>4 定量风险分析，度量风险的可能性和后果，估量其对项目目标的潜在影响。<br>5 风险应对计划，创建过程和技术来为项目目标增进机会和减小威胁。<br>6 风险监督与控制，在项目生命周期中监视现存的风险、识别新的风险、执行缓解风险计划及评估其效果。</p><h3 id="1-风险识别。"><a href="#1-风险识别。" class="headerlink" title="(1)风险识别。"></a>(1)风险识别。</h3><p><img src="/images/ruankao/8-9.png"></p><h3 id="2-风险分析。"><a href="#2-风险分析。" class="headerlink" title="(2)风险分析。"></a>(2)风险分析。</h3><h4 id="风险得失值"><a href="#风险得失值" class="headerlink" title="风险得失值:"></a>风险得失值:</h4><p>指一旦风险发生可能对项目造成的影响大小，说明可能造成的损失。如果 损失的大小不容易直接估计，可以将损失分解为更小部分再评估它们。风险得失值可用相对 数值表示，建议将损失大小折算成对计划影响的时间表示。</p><h4 id="风险概率"><a href="#风险概率" class="headerlink" title="风险概率:"></a>风险概率:</h4><p>它是风险发生可能性的百分比表示，是一种主观判断。</p><h4 id="风险值"><a href="#风险值" class="headerlink" title="风险值:"></a>风险值:</h4><p>风险值又叫风险曝光度或风险暴露，他是评估风险的重要参数，“风险值”=“风险概率” * “风险影响”。如:某一风险概率是 25%，一旦发生会导致项目计划延长 4 周，因而，风险值为25% * 4周 = 1周。</p><h3 id="3-风险应对方法。"><a href="#3-风险应对方法。" class="headerlink" title="(3)风险应对方法。"></a>(3)风险应对方法。</h3><p>制订风险应对策略主要考虑以下 4 个方面的因素:可规避性、可转移性、可缓解性、可接受性。</p><h3 id="4-风险应对计划。"><a href="#4-风险应对计划。" class="headerlink" title="(4)风险应对计划。"></a>(4)风险应对计划。</h3><h3 id="5-风险监控。"><a href="#5-风险监控。" class="headerlink" title="(5)风险监控。"></a>(5)风险监控。</h3>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-开发管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息系统基础知识（三）政府信息化与电子政务</title>
      <link href="/2021/10/08/%E8%BD%AF%E8%80%83/14%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89%E6%94%BF%E5%BA%9C%E4%BF%A1%E6%81%AF%E5%8C%96%E4%B8%8E%E7%94%B5%E5%AD%90%E6%94%BF%E5%8A%A1/"/>
      <url>/2021/10/08/%E8%BD%AF%E8%80%83/14%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%89%EF%BC%89%E6%94%BF%E5%BA%9C%E4%BF%A1%E6%81%AF%E5%8C%96%E4%B8%8E%E7%94%B5%E5%AD%90%E6%94%BF%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>政府信息化是传统政府向信息化政府的演变过程。具体地说，政府信息化就是应用现代 信息技术、网络技术和通信技术，通过信息资源的开发和利用来集成管理和服务，从而提高 政府的工作效率、决策质量、调控能力，并节约开支，改进政府的组织结构、业务流程和工 作方式，全方位地向社会提供优质、规范、透明的管理和服务。</p><p>第一，政府信息化必须借助于信息技术和网络技术，离不开信息基础设施和软件产品;</p><p>第二，政府信息化是一个系统工程，它不仅是与行政有关部门的信息化，还包括立法、司法部门及其他一些公共组织的信息化;</p><p>第三，政府信息化并不是简单地将传统的政府管理事务原封不动地搬到互联网上，而是要对已有的组织结构和业务流程进行重组或再造。</p><p>政府信息化的主要内容是电子政务。因此，在大多数情况下，电子 政务可以作为政府信息化的同义语来使用。</p><h1 id="一、我国政府信息化的历程和策略"><a href="#一、我国政府信息化的历程和策略" class="headerlink" title="一、我国政府信息化的历程和策略"></a>一、我国政府信息化的历程和策略</h1><h2 id="20-世纪-80-年代末期“中国国家经济信息系统”的建设和运行。"><a href="#20-世纪-80-年代末期“中国国家经济信息系统”的建设和运行。" class="headerlink" title="20 世纪 80 年代末期“中国国家经济信息系统”的建设和运行。"></a>20 世纪 80 年代末期“中国国家经济信息系统”的建设和运行。</h2><p>国家经济信息系统包括着重为国家宏观经济服务的主系统，以及各部门各行业的专业经济信息系统在内的全国系统。</p><h2 id="20-世纪-90-年代"><a href="#20-世纪-90-年代" class="headerlink" title="20 世纪 90 年代"></a>20 世纪 90 年代</h2><p>一是以“金”字头为代表的多项信息工程项目取得了突破性进展。金桥、金关、金卡“三金”工程。<br>二是政府上网工程初具规模，“十二金”工程。第一类是对加强监管、提高效率和推进 公共服务起到核心作用的办公业务资源系统、宏观经济管理系统建设;第二类是增强政府收 入能力、保证公共支出合理性的金税、金关、金财、金融监管(含金卡)、金审 5 个业务系 统;第三类是保障社会秩序、为国民经济和社会发展打下坚实基础的金盾、金保、金农、金 水、金质 5 个业务系统建设。<br>三是各级政府都加强了电子政务的软件和硬件两方面的基础建设，建成了覆盖广泛的“两网、一站、四库”。“两网”是指政务内网和政务外网，两网之间物理隔离，政务外网与互联网之间逻辑隔离;“一站”，是政府门户网站;“四库”，即建立人口、法人单位、空间地理和自然资源、宏观经济 4 个基础数据库。<br>四是各地在推动政府信息化方面健康发展，并在全国普遍实行了 政府上网工程。</p><p>政府信息化的一个中心任务是实现由传统政务到电子政务的转变。</p><p>(1)做好战略数据规划。<br>(2)面向主导业务流程。<br>(3)重视资源条件。<br>(4)以人为本。<br>(5)设立 CIO。<br>(6)加强规范化和标准化。<br>(7)充分利用社会资源。</p><h1 id="二、电子政务的内容"><a href="#二、电子政务的内容" class="headerlink" title="二、电子政务的内容"></a>二、电子政务的内容</h1><h2 id="1-政府与政府-Government-To-Government"><a href="#1-政府与政府-Government-To-Government" class="headerlink" title="(1)政府与政府(Government To Government)"></a>(1)政府与政府(Government To Government)</h2><h2 id="2-政府对企业-Government-To-Business"><a href="#2-政府对企业-Government-To-Business" class="headerlink" title="(2)政府对企业(Government To Business)"></a>(2)政府对企业(Government To Business)</h2><h2 id="3-政府对公民（G2C）"><a href="#3-政府对公民（G2C）" class="headerlink" title="(3)政府对公民（G2C）"></a>(3)政府对公民（G2C）</h2><h2 id="4-企业对政府"><a href="#4-企业对政府" class="headerlink" title="(4)企业对政府"></a>(4)企业对政府</h2><h2 id="5-公民对政府"><a href="#5-公民对政府" class="headerlink" title="(5)公民对政府"></a>(5)公民对政府</h2><h2 id="6-政府对公务员（G2E）"><a href="#6-政府对公务员（G2E）" class="headerlink" title="(6)政府对公务员（G2E）"></a>(6)政府对公务员（G2E）</h2><h1 id="三、电子政务建设的过程模式和技术模式"><a href="#三、电子政务建设的过程模式和技术模式" class="headerlink" title="三、电子政务建设的过程模式和技术模式"></a>三、电子政务建设的过程模式和技术模式</h1><h2 id="1-电子政务建设的过程模式"><a href="#1-电子政务建设的过程模式" class="headerlink" title="1.电子政务建设的过程模式"></a>1.电子政务建设的过程模式</h2><p>(1)以用户为中心<br>(2)引进“客户关系管理”技术<br>(3)政府门户</p><h2 id="2-电子政务的技术模式"><a href="#2-电子政务的技术模式" class="headerlink" title="2.电子政务的技术模式"></a>2.电子政务的技术模式</h2><p>(1)网络管理模式<br>电子政务在网络管理上分为政府专网和通用网络两部分，包括专用网络、内部网络和外部网络。<br>(2)信息资源管理模式<br>电子政务可以选用的信息资 源管理模式有多种，目前主要有两种，即元数据管理模式和 XML 数据管理模式。<br>(3)应用开发模式<br>(4)电子政务的安全体系<br>电子政务的安全体系包括物理安全、网络安全、信息安全及安全管理等方面。<br>(5)电子政务的标准化<br>《国家电子政务标准化指南》共分为以下六个部分。<br>第一部分:总则。概括描述电子政务标准体系及标准化的机制。<br>第二部分:工程管理。概括描述电子政务工程管理须遵循或参考的技术要求、标准和管理规定。<br>第三部分:网络建设。概括描述网络建设须遵循或参考的技术要求、标准和管理规定。<br>第四部分:信息共享。概括描述信息共享须遵循或参考的技术要求、标准和管理规定。<br>第五部分:支撑技术。概括描述支撑技术须遵循或参考的技术要求、标准和管理规定。<br>第六部分:信息安全。概括描述保障信息安全须遵循或参考的技术要求、标准和管理规定。</p><p>六项电子政务标准分别如下:<br>1 基于 XML 电子公文格式规范第一部分:总则，第二部分:公文体;<br>2 XML 在电子政务中的应用指南;<br>3 电子政务业务流程设计方法通用规范;<br>4 信息化工程监理规范;<br>5 电子政务数据元第一部分:设计和管理规范;<br>6 电子政务主题词表编制规则。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-信息系统基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息系统基础知识（六）知识管理与商业智能</title>
      <link href="/2021/10/08/%E8%BD%AF%E8%80%83/14%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%94%EF%BC%89%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E4%B8%8E%E5%95%86%E4%B8%9A%E6%99%BA%E8%83%BD/"/>
      <url>/2021/10/08/%E8%BD%AF%E8%80%83/14%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%94%EF%BC%89%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E4%B8%8E%E5%95%86%E4%B8%9A%E6%99%BA%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>知识管理是企业信息化发展的高级阶段，而商业智能则是知识管理的实际应用。</p><h1 id="一、知识管理"><a href="#一、知识管理" class="headerlink" title="一、知识管理"></a>一、知识管理</h1><p>在组织中建构一个人文与技术兼备的知识系统，让组织中的信息 与知识，通过获得、创造、分享、整合、记录、存取、更新等过程，实现不断创新。同时， 这种创新知识又不断回馈到组织之内，从而使得组织的知识不间断地累积和升华，进而转化 为企业的智慧资本。</p><p>知识管理应以人为中心，以信息为基础，以知识 创新为目标，将知识看作一种可开发资源。</p><h2 id="知识管理工具的分类"><a href="#知识管理工具的分类" class="headerlink" title="知识管理工具的分类"></a>知识管理工具的分类</h2><h3 id="1-用于知识生成的工具"><a href="#1-用于知识生成的工具" class="headerlink" title="1 用于知识生成的工具"></a>1 用于知识生成的工具</h3><p>搜索引擎、数据挖掘技术、用于知识合成的工具、辅助创新知识的工具。</p><h3 id="2-用于知识编码的工具"><a href="#2-用于知识编码的工具" class="headerlink" title="2 用于知识编码的工具"></a>2 用于知识编码的工具</h3><p>知识仓库和知识地图。</p><h3 id="3-用于知识转移的工具"><a href="#3-用于知识转移的工具" class="headerlink" title="3 用于知识转移的工具"></a>3 用于知识转移的工具</h3><h1 id="二、商业智能"><a href="#二、商业智能" class="headerlink" title="二、商业智能"></a>二、商业智能</h1><p>商业智能(Business Intelligence，BI)是企业对商业数据的搜集、管理和分析的系统过 程，目的是使企业的各级决策者获得知识或洞察力，帮助他们做出对企业更有利的决策。</p><p>商业智能技术并不是基础技术或者产品技术，它是数据仓库、联机分析处理 OLAP 和数据挖掘等相关技术走向商业应用后形成的一种应用技术。</p><p>商业智能系统主要包括数据预处理、建立数据仓库、数据分析及数据展现 4 个主要阶段。</p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>数据预处理是整合企业原始数据的第一步，它包括数据的抽取、转换和装载三个过程。</p><h2 id="建立数据仓库"><a href="#建立数据仓库" class="headerlink" title="建立数据仓库"></a>建立数据仓库</h2><p>建立数据仓库则是处理海量数据的基础。</p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p>数据分析是体现系统智能的关键，一般采用联机分 析处理和数据挖掘两大技术。<br>联机分析处理不仅进行数据汇总/聚集，同时还提供切片、切块、下钻、上卷和旋转等数据分析功能，用户可以方便地对海量数据进行多维分析。<br>数据挖掘的目标则是挖掘数据背后隐藏的知识，通过关联分析、聚类和分类等方法建立分析模型，预测企业未来发展趋势和将要面临的问题。</p><h2 id="数据展现"><a href="#数据展现" class="headerlink" title="数据展现"></a>数据展现</h2><p>数据展现则主要保障系统分析结果的可视化。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-信息系统基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息系统基础知识（七）业务流程重组</title>
      <link href="/2021/10/08/%E8%BD%AF%E8%80%83/14%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%85%AD%EF%BC%89%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E9%87%8D%E7%BB%84/"/>
      <url>/2021/10/08/%E8%BD%AF%E8%80%83/14%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%85%AD%EF%BC%89%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E9%87%8D%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>业务流程重组(BusinessProcess Reengineering，BPR)</p><h1 id="一、BPR-的内容"><a href="#一、BPR-的内容" class="headerlink" title="一、BPR 的内容"></a>一、BPR 的内容</h1><p>BPR 强调 4 个核心内容，即根本性、彻底性、戏剧性和流程。</p><h1 id="二、BPR-的作用"><a href="#二、BPR-的作用" class="headerlink" title="二、BPR 的作用"></a>二、BPR 的作用</h1><p>(1)BPR 的实施使企业更贴近市场。<br>(2)BPR 使生产成本成倍压缩。<br>(3)BPR 使产品质量得到全面提升。<br>(4)服务质量更趋完美。</p><h1 id="三、BPR-遵循的原则"><a href="#三、BPR-遵循的原则" class="headerlink" title="三、BPR 遵循的原则"></a>三、BPR 遵循的原则</h1><h2 id="1-流程中心原则"><a href="#1-流程中心原则" class="headerlink" title="(1)流程中心原则"></a>(1)流程中心原则</h2><p>BPR 注重的是业务流程整体最优，通过理顺和优化业务流程，使得业务流程 中每一个环节上的活动尽可能实现最大化增值，尽可能减少无效的或不增值的活动，并从整 体最优的目标出发，设计和优化业务流程中的各项活动，消除本位主义和利益分散主义。</p><h2 id="2-团队管理原则"><a href="#2-团队管理原则" class="headerlink" title="(2)团队管理原则"></a>(2)团队管理原则</h2><p>首先是设计、重组业 务流程，而后依据业务流程建立或改造企业组织，尽量消除或弱化“中间层”。这不仅降低 了管理费用和成本，更重要的是提高了组织的运转效率及对市场的反应速度。</p><h2 id="3-客户导向原则"><a href="#3-客户导向原则" class="headerlink" title="(3)客户导向原则"></a>(3)客户导向原则</h2><p>利用信息技术能够有效地帮助企业 BPR 得以很好地实施，采用计算机网络、数据库和多媒体等技术 建立的信息网络，能够加快信息传递，实现信息共享，其结果是将传统的串行工作方式变为 并行工作方式，将企业组织结构由垂直型变为水平型，使企业成为协同工作的组织，使得企 业的业务流程，特别是关键业务流程与市场接通，与顾客接通。<br>另一方面，科学技术的发展和管理模式的日臻完善，也为 BPR 创造了条件。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-信息系统基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息系统基础知识（一）信息系统概述</title>
      <link href="/2021/10/06/%E8%BD%AF%E8%80%83/14%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/10/06/%E8%BD%AF%E8%80%83/14%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="信息系统的数据环境"><a href="#信息系统的数据环境" class="headerlink" title="信息系统的数据环境"></a>信息系统的数据环境</h1><p>马丁在《信息工程》和《战略数据规划方法学》中将信息系统的数据环境分为 4 种类型：</p><p>第一类数据环境:数据文件。<br>第二类数据环境:应用数据库。<br>第三类数据环境:主题数据库。<br>第四类数据环境:信息检索系统。</p><h1 id="公司的管理活动"><a href="#公司的管理活动" class="headerlink" title="公司的管理活动"></a>公司的管理活动</h1><p>一个公司的管理活动可以分成 4 级:战略级、战术级、操作级和事务级。</p><p>战略级的信息系统的所有者和使用者都是企业的最高管理层，对于现代公司制企业， 就是企业的董事会和经理班子;</p><p>战术级信息系统的使用者一般是企业的中层经理及其管理的 部门;</p><p>操作级信息系统的使用者一般是服务型企业的业务部门，例如，保险企业的保单处理 部门;</p><p>事务级信息系统的使用者一般是企业的管理业务人员，例如，企业的会计、劳资员等。</p><h1 id="信息系统的生命周期"><a href="#信息系统的生命周期" class="headerlink" title="信息系统的生命周期"></a>信息系统的生命周期</h1><p>信息系统的生命周期分为 4 个阶段，即产生阶段、开发阶段、运行阶段和 消亡阶段。</p><p>1.信息系统的产生阶段又分为 概念产生过程和需求分析过程。</p><p>2.信息系统的开发阶段 可分为 5 个阶段，即，总体规划、系统分析、系统设计、系统实施和系统验收阶段。</p><p>3.信息系统的运行阶段<br>四种类型：排错性维护、适应性维护、完善性维护和预防性维护。</p><p>4.信息系统的消亡阶段</p><h1 id="信息系统建设的原则"><a href="#信息系统建设的原则" class="headerlink" title="信息系统建设的原则"></a>信息系统建设的原则</h1><p>1.高层管理人员介入原则<br>2.用户参与开发原则<br>3.自顶向下规划原则<br>4.工程化原则<br>5.其他原则<br>创新性原则，用来体现信息系统的先进性。<br>整体性原则，用来体现信息系统的完整性。<br>发展性原则，用来体现信息系统的超前性。<br>经济性原则，用来体现信息系统的实用性。</p><h1 id="信息系统开发方法"><a href="#信息系统开发方法" class="headerlink" title="信息系统开发方法"></a>信息系统开发方法</h1><p>1.结构化方法<br>2.原型法<br>3.面向对象方法<br>4.面向服务的方法</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-信息系统基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息系统基础知识（二）信息系统工程</title>
      <link href="/2021/10/06/%E8%BD%AF%E8%80%83/14%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8B/"/>
      <url>/2021/10/06/%E8%BD%AF%E8%80%83/14%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BA%8C%EF%BC%89%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>系统有下述特性:<br>(1)集合性。<br>(2)相关性。<br>(3)目的性。<br>(4)层次性。<br>(5)环境适应性。</p><h1 id="一、信息系统工程的概念"><a href="#一、信息系统工程的概念" class="headerlink" title="一、信息系统工程的概念"></a>一、信息系统工程的概念</h1><h2 id="系统的分类"><a href="#系统的分类" class="headerlink" title="系统的分类"></a>系统的分类</h2><p>按照系统功能划分:工业控制系统、信息管理系统、军事系统和经济系统等。<br>按照系统与外界的关系划分:封闭系统和开放系统。<br>按照系统的内部结构划分:开环系统和闭环系统等。<br>按照抽象程度将系统分为:概念系统(描述系统的主要特征和大致轮廓)、逻辑系统(脱离实现细节的合理系统)和物理系统 (实际存在的系统)。</p><p>信息系统信息系统一般泛指收集、存储、处理和传播各种信息的具备完整功能的集 合体。</p><p>系统工程是以研究大规模复杂系统为对象的一门交叉学科。它把自然科学和社会科学的 某些思想、理论、方法、策略和手段等根据总体协调的需要，有机地联系起来，应用定量和定性分析相结合的方法和计算机等技术工具，对系统的构成要素、组织结构、信息交换和反 馈控制等功能进行分析、设计、制造和服务，从而达到最优设计、最优控制和最优管理的目的。</p><p>信息系统一般泛指收集、存储、处理和传播各种信息的具备完整功能的集 合体。人们常说的信息系统大多数支持各部门和机构的管理和决策的信息系统，当前信息系 统重要的特征是计算机和互联网技术的应用。</p><p>随着网络的普及，计算机信息系统已经从管理信 息系统发展成为更强调支持企业高层领导决策的决策支持系统，即 DSS 阶段。</p><h1 id="二、信息系统工程的内容"><a href="#二、信息系统工程的内容" class="headerlink" title="二、信息系统工程的内容"></a>二、信息系统工程的内容</h1><h2 id="1-信息系统工程的体系构成"><a href="#1-信息系统工程的体系构成" class="headerlink" title="1.信息系统工程的体系构成"></a>1.信息系统工程的体系构成</h2><h3 id="（1）信息网络系统"><a href="#（1）信息网络系统" class="headerlink" title="（1）信息网络系统"></a>（1）信息网络系统</h3><p>信息网络系统是指以信息技术为主要手段建立的信息处理、传输、交换和分发的计算机网络系统。</p><h3 id="（2）信息资源系统"><a href="#（2）信息资源系统" class="headerlink" title="（2）信息资源系统"></a>（2）信息资源系统</h3><p>信息资源系统是指以信息技术为主要技术手段建立的信息资源采集、存储、处理的资源系统。</p><h3 id="（3）信息应用系统"><a href="#（3）信息应用系统" class="headerlink" title="（3）信息应用系统"></a>（3）信息应用系统</h3><p>信息应用系统是指以信息技术为主要手段建立的各类业务管理的应用系统。</p><h2 id="2-信息系统工程的技术构成"><a href="#2-信息系统工程的技术构成" class="headerlink" title="2.信息系统工程的技术构成"></a>2.信息系统工程的技术构成</h2><p>信息系统工程首要的任务是实施软件工程和信息工程。信息系统工程还应包括组织中的业务流程等内容。</p><p>软件工程是开发、运行、维护和修复软件的系统方法。</p><p>“软件”的定义为:计算机程序、方法、规则、相关的文档资料以及在计算机上运行时所必需的数据的集合。</p><p><img src="/images/ruankao/7-10.png"></p><p>信息工程的主要焦点是用计算机来存储和维护数据，而信息则是从这些数据提炼出来，来满足人们的某种需要的数据。</p><p>信息工程方法的主要特点：<br>一是以数据为中心，进一步的工作是建立主题数据库;<br>二是将工程的实施划分为对业务系统的实施和对技术系统的实施。</p><h2 id="3-组织流程管理"><a href="#3-组织流程管理" class="headerlink" title="3.组织流程管理"></a>3.组织流程管理</h2><p>有效的组织保障包括:<br>(1)建立流程管理机构，这一机构可归入管理流程之中。<br>(2)配备强有力的领导来负责内部的流程管理工作。<br>(3)制定各流程之间的动态关系规则。通过实施流程管理模式，传统组织中的组织图将不复存在，取代它的是流程管理图。</p><h2 id="4-信息系统工程的管理信息"><a href="#4-信息系统工程的管理信息" class="headerlink" title="4.信息系统工程的管理信息"></a>4.信息系统工程的管理信息</h2><p>在具体实施过程中，项目管理一般包含了以下几个方面的内容:<br>(1)任务划分。任务划分是把整个开发工作定义成一组任务的集合，这组任务又可以进一步划分成若干个子任务，进而形成具有层次结构的任务群。<br>(2)计划安排。依据划分完毕的任务即可制定出整个开发及项目管理计划，并产生完成任务的计划表。<br>(3)经费管理。经费管理在整个开发项目管理中处于重要的地位。项目经理可以运用经济杠杆来控制整个开发工作。<br>(4)审计控制。按照所采用的开发方法，应针对每一类开发人员制定出工作过程中的责任、义务、完成任务的质量标准等，按照计划对每项任务进行审计。<br>(5)风险管理。如何有效地管理和控制风险是保证系统实施成功的重要环节之一。特别是信息系统工程项目，风险管理更是重中之重。<br>(6)质量保证。质量管理应贯穿于整个项目始终。在项目规划阶段，就应该建立系统质量的度量模型和相应的机制，对项目质量提出总体的要求;在系统分析和设计阶段应对质量管理不断细化，按自顶向下的方式将总体要求划分成若干易于考核和度量的质量单元。</p><h1 id="三、信息系统工程的总体规划"><a href="#三、信息系统工程的总体规划" class="headerlink" title="三、信息系统工程的总体规划"></a>三、信息系统工程的总体规划</h1><h2 id="已经建成或正在建设的系统仍然存在一系列问题，主要如下"><a href="#已经建成或正在建设的系统仍然存在一系列问题，主要如下" class="headerlink" title="已经建成或正在建设的系统仍然存在一系列问题，主要如下:"></a>已经建成或正在建设的系统仍然存在一系列问题，主要如下:</h2><p>系统建设与组织发展的目标和战略不匹配。<br>已建成的系统解决问题的有效性低，即系统建成后对管理并无显著改善。<br>不能适应环境变化和组织变革的需要。<br>组织结构陈旧，管理落后。<br>系统使用人员的素质较低。<br>系统开发环境落后，技术方案不合理。<br>系统开发及运行维护的标准、规范混乱。<br>资源短缺，投入太少，而对系统的期望又过高。</p><h2 id="总体规划的主要任务："><a href="#总体规划的主要任务：" class="headerlink" title="总体规划的主要任务："></a>总体规划的主要任务：</h2><p>制定信息系统工程的发展战略。主要是使信息系统工程的战略与整个组织的战略和目标协调一致。<br>确定组织的主要信息需求，形成信息系统工程的总体结构方案，安排项目开发计划。<br>制定系统建设的资源分配计划，即制定为实现开发计划而需要的硬软件资源、数据通信设备、人员、技术、服务和资金等计划，提出整个系统的建设概算。</p><h2 id="总体规划的主要步骤："><a href="#总体规划的主要步骤：" class="headerlink" title="总体规划的主要步骤："></a>总体规划的主要步骤：</h2><h3 id="1-对当前系统进行初步的调查。"><a href="#1-对当前系统进行初步的调查。" class="headerlink" title="1 对当前系统进行初步的调查。"></a>1 对当前系统进行初步的调查。</h3><p>初步调查主要由两部分构成:<br>①一般调查。一般调查包括组织的概括，企业的目标，现行系统运行情况，简单历史，企业的 产品，产量，利税，体制及改革情况，人员基本情况，面临的问题，企业的中长期计划及主 要困难等，使系统分析师对企业有一个初步轮廓。<br>②信息需求初步调查。信息需求初步调查是整个初步调查的主要内容。通过调查组织系统的工作职责及活动来了解各职能机构所要处理的数据，估计各机构发生的数据量及频度。信息需求初步调查还应调查环境信息，包括内部环境和外部环境的信息。</p><h3 id="2-分析和确定系统目标。"><a href="#2-分析和确定系统目标。" class="headerlink" title="2 分析和确定系统目标。"></a>2 分析和确定系统目标。</h3><p>这实际上可以由总经理和信息系统工程开发的领导小组确定， 应包括服务的质量和范围、政策、组织及人员等。它不仅包括信息系统工程的目标，而且应 有整个企业的目标。</p><h3 id="3-分析子系统的组成及基本功能。"><a href="#3-分析子系统的组成及基本功能。" class="headerlink" title="3 分析子系统的组成及基本功能。"></a>3 分析子系统的组成及基本功能。</h3><p>从上到下对系统进行划分，并且详细说明各个子系 统应该实现的功能。</p><h3 id="4-拟定系统的实施方案。"><a href="#4-拟定系统的实施方案。" class="headerlink" title="4 拟定系统的实施方案。"></a>4 拟定系统的实施方案。</h3><p>可以对子系统的优先级进行设定，以便确定子系统的开发顺序。</p><h3 id="5-进行系统的可行性研究。"><a href="#5-进行系统的可行性研究。" class="headerlink" title="5 进行系统的可行性研究。"></a>5 进行系统的可行性研究。</h3><h3 id="6-编写可行性报告。"><a href="#6-编写可行性报告。" class="headerlink" title="6 编写可行性报告。"></a>6 编写可行性报告。</h3><h2 id="信息系统工程总体规划的目标信息"><a href="#信息系统工程总体规划的目标信息" class="headerlink" title="信息系统工程总体规划的目标信息"></a>信息系统工程总体规划的目标信息</h2><p>两个原则:<br>一是从组织的战略出发，而不是从系统的需求出发，这样就可以避免脱离组织宗旨和战略目标，走入为建设而建设的困境;<br>二是从业务的变革出发，而不是从技术的变革出发，这样有利于充分利用组织的现有资源来满足关键需求，从而避免信息系统工程无法有效地支持组织决策。</p><p>信息系统工程规划的主要目的是根据企业总体目标规划好统一的、既有集中式又有分布 式、分期逐步实现的数据平台和应用平台的建设。</p><h2 id="总体规划目标的分析过程"><a href="#总体规划目标的分析过程" class="headerlink" title="总体规划目标的分析过程"></a>总体规划目标的分析过程</h2><p>总体规划目标的分析过程包括，<code>确定组织的总体目标</code>和<code>确定信息系统工程规划的总体目标</code>两个步骤。</p><h3 id="1-确定组织的总体目标。"><a href="#1-确定组织的总体目标。" class="headerlink" title="1 确定组织的总体目标。"></a>1 确定组织的总体目标。</h3><p>它的分析的步骤是:<br>根据系统调查的结果，进行分析，归纳出现行系统中的关键问题，做出问题表。<br>根据问题表，构造目标的层次结构，即目标树。在目标树中，最上层是总目标，以下各层是 分目标或子目标，最下层是为实现目标而采取的具体措施，它是用来衡量目标是否切合实际 的标准。<br>对目标树中的各项分目标进行分析。分析各项分目标之间的关系，确定解决目标冲突的方法， 指出各项措施的考核指标。<br>将目标树按各层分目标在系统中所起的作用重新绘制。</p><h3 id="2-确定信息系统工程规划的总体目标。"><a href="#2-确定信息系统工程规划的总体目标。" class="headerlink" title="2 确定信息系统工程规划的总体目标。"></a>2 确定信息系统工程规划的总体目标。</h3><p>信息系统工程应该在下面几个方面发挥作用。<br>1、信息系统工程的辅助决策功能。<br>2、信息系统工程的辅助管理功能。<br>3、企业资源管理。</p><p>信息系统工程的总体规划包括，总体规划的层次、总体规划的任务、信息系统工程的功能范围、确定功能范围的步骤、系统总体结构分解、投资概算和总体规划的成果等内容。</p><p>总体规划的层次分为:信息战略规划、信息资源规划、信息系统工程建设规划和企业资源计划(ERP)。</p><h2 id="总体规划的任务"><a href="#总体规划的任务" class="headerlink" title="总体规划的任务"></a>总体规划的任务</h2><p>明确组织远景和使命。<br>确立组织发展战略和目标。<br>明晰组织业务及管理变革策略。<br>识别组织关键成功因素、分析关键性能指标、抽取信息需求。<br>建立总体信息工程框架。<br>提出可行性报告和总体规划方案。</p><h2 id="确定系统的功能范围的步骤如下"><a href="#确定系统的功能范围的步骤如下" class="headerlink" title="确定系统的功能范围的步骤如下:"></a>确定系统的功能范围的步骤如下:</h2><p>1 绘制出系统的总数据流程图。<br>2 根据系统方案的规定和用户的要求，结合现行系统的环境，确定系统的边界范围，并在总信息流程图上圈出。<br>3 有关人员协商讨论。<br>4 确定系统范围，并做出分析说明。</p><h2 id="信息系统工程总体规划应当包括投资概算，它包括以下-4-个方面内容。"><a href="#信息系统工程总体规划应当包括投资概算，它包括以下-4-个方面内容。" class="headerlink" title="信息系统工程总体规划应当包括投资概算，它包括以下 4 个方面内容。"></a>信息系统工程总体规划应当包括投资概算，它包括以下 4 个方面内容。</h2><p>1 计算机系统软、硬件设备投资。<br>2 系统开发费。<br>3 系统安装和维护费用。<br>4 人员培训费。</p><h1 id="四、总体规划的方法论"><a href="#四、总体规划的方法论" class="headerlink" title="四、总体规划的方法论"></a>四、总体规划的方法论</h1><p>制定信息系统工程总体规划需要有效的方法论支持，其方法多种多样，在此主要介绍较为著名的三种:业务系统规划法、关键成功因素法、战略目标集合转化法。</p><h2 id="1-业务系统规划法-Business-Systems-Planning，BSP"><a href="#1-业务系统规划法-Business-Systems-Planning，BSP" class="headerlink" title="1.业务系统规划法(Business Systems Planning，BSP)"></a>1.业务系统规划法(Business Systems Planning，BSP)</h2><h3 id="BSP的概念"><a href="#BSP的概念" class="headerlink" title="BSP的概念"></a>BSP的概念</h3><p>1 信息系统的战略应当表达出企业的各个管理层次的需求。<br>战略计划层:是决定组织目标、达到这些目标所需用的资源，以及获取、分配这些资源的策略的过程;<br>管理控制层:通过这一过程，管理者确认资源的获取及组织的目标是否有效地使用了这些资源;<br>操作控制层:保证有效率地完成具体的任务。</p><p>2 信息系统应该向整个企业提供一致的信息。<br>3 信息系统应该适应组织机构和管理体制的改变。<br>4 信息系统的战略规划，应当从总体信息系统结构中的子系统开始实现。</p><h3 id="BSP-的目标"><a href="#BSP-的目标" class="headerlink" title="BSP 的目标"></a>BSP 的目标</h3><p>BSP 的目标主要是提供信息系统规划，用以支持企业短期的和长期的信息需要。</p><p>归纳如下:<br>为管理者提供一种形式化的、客观的方法，明确建立信息系统的优先顺序，而不考虑部门的 狭隘利益，并避免主观性。<br>为具有较长生命周期系统的建设和投资提供保障。由于系统是基于业务过程的，因而不因机 构变化而失效。<br>为了以最高效率支持企业目标，BSP 提供数据处理和资源管理。<br>增加负责人的信心，使其坚信高效的信息系统能够被实施。<br>通过提供信息系统对用户需求的快速响应，从而改善信息系统管理部门和用户之间的关系。</p><p>BSP 方法的真正价值在于提供了下面的机会:<br>一是创造一种环境和提出初步行动计划，使企 业能依此对未来的系统和优先次序的改变做出反应，不致造成设计的重大失误。<br>二是定义信息系统的职能，并不断完善。</p><p>BSP 方法实施步骤：<br>1 确立项目。<br>2 工作准备。<br>3 主要活动。<br>开始。<br>定义业务过程。<br>定义数据类。<br>分析现存系统支持能力。<br>确定管理部门对系统的要求。<br>提出判断和结论。<br>定义信息总体结构。<br>确定总体结构中的优先顺序。<br>评价信息资源管理工作。<br>制定建议书和开发计划。<br>工作成果报告。</p><h2 id="2-关键成功因素法-Critical-Success-Factors，CSF"><a href="#2-关键成功因素法-Critical-Success-Factors，CSF" class="headerlink" title="2.关键成功因素法(Critical Success Factors，CSF)"></a>2.关键成功因素法(Critical Success Factors，CSF)</h2><p>该方法能够帮助组织找到影响系统成功的关键因 素，进行分析以确定组织的信息需求，从而为管理部门控制信息技术及其处理过程提供实施 指南。</p><p>CSF 的确定关键成功因素的特征如下。<br>内部 CSF:针对机构的内部活动，如改善产品质量、提高工效等。<br>外部 CSF:与机构的对外活动有关，如，满足客户企业的进入标准、获得对方的信贷。<br>监控型 CSF:对现有业务流程等进行监控，如监测零件缺陷百分比。<br>建设型 CSF:适应组织未来变化的有关活动，如改善产品组合。</p><p>CSF 共分 4 层:行业的 CSF、组织的 CSF、部门的 CSF、管理者的 CSF，它们依次相互影响。</p><p>CSF 实施步骤：<br>第一步:了解组织的战略目标。<br>第二步:识别所有成功因素。<br>第三步:确定关键成功因素。<br>第四步:识别绩效指标和标准，以及测量绩效的数据。</p><p>CSF 的优缺点：</p><p>缺点是:<br>数据的汇总和数据分析过程比较随意，缺乏一种专门严格的方法将众多个人的关键成功因素汇总成一个明确的整个组织的成功因素;<br>由于个人和组织的成功因素往往并不一致，两者之间的界限容易被混淆，从而容易使组织的成功因素具有个人倾向性;<br>由于环境和管理经常迅速变化，信息系统也必须做出相应调整，而用 CSF 法开发的系统可能无法适应变化了的环境;<br>CSF 在应用于较低层的管理时，由于不容易找到相应目标的关键成功因子及其关键指标，效率可能会比较低。</p><h2 id="3-战略目标集合转化法-Strategy-Set-Transformation，SST"><a href="#3-战略目标集合转化法-Strategy-Set-Transformation，SST" class="headerlink" title="3.战略目标集合转化法(Strategy Set Transformation，SST)"></a>3.战略目标集合转化法(Strategy Set Transformation，SST)</h2><p>战略目标集合转化法(Strategy Set Transformation，SST)将组织的战略看成一个“信息 集合”，包括使命、目标、战略和其他战略变量，如管理水平、发展趋势以及重要的环境约 束等。战略性系统规划就是把组织的战略集合转化为信息系统的战略集合，而后者由信息系 统的系统目标、环境约束和战略规划组成。</p><h3 id="该方法的步骤如下。"><a href="#该方法的步骤如下。" class="headerlink" title="该方法的步骤如下。"></a>该方法的步骤如下。</h3><h4 id="第一步-识别和阐明组织的战略集合。"><a href="#第一步-识别和阐明组织的战略集合。" class="headerlink" title="第一步:识别和阐明组织的战略集合。"></a>第一步:识别和阐明组织的战略集合。</h4><p>(1)描绘出组织各类人员结构，如卖主、经理、雇员、供应商、顾客、贷款人、政府代理人、地区社团及竞争者等。<br>(2)识别每类人员的目标。<br>(3)对于每类人员识别其使命及战略。</p><h4 id="第二步-将组织的战略集合转化为信息系统战略集合。"><a href="#第二步-将组织的战略集合转化为信息系统战略集合。" class="headerlink" title="第二步:将组织的战略集合转化为信息系统战略集合。"></a>第二步:将组织的战略集合转化为信息系统战略集合。</h4>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-信息系统基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于中间件的开发（一）中间件技术</title>
      <link href="/2021/10/06/%E8%BD%AF%E8%80%83/15%E3%80%81%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8A%80%E6%9C%AF/"/>
      <url>/2021/10/06/%E8%BD%AF%E8%80%83/15%E3%80%81%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p>中间件(middleware)是基础软件的一大类，属于可复用软件的范畴。</p><p>中间件处在操作系统、网络和数据库之上，应用软件的下层(如图 15-1 所示)，也有人认为它应该属于操作系统中的一部分。</p><p><img src="/images/ruankao/7-1.png"></p><h1 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h1><p>中间件发展迅速，但在技术上还处于成长阶段，没有统一的标准和模型。</p><p>中间件要涉及软件的所有标准、规范和技术，它有更多的内涵，因为它包括平台功能，自身具有自治性、自主性、隔离性、社会化、激发性、主动性、并发性、认识能力等特性，是近似于 Agent(代理)的结构。</p><p>中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件 在不同的技术之间共享资源，中间件位于客户机服务器的操作系统之上，管理计算资源和网 络通信。这些服务程序或软件具有标准的程序接口和协议。针对不同的操作系统和硬件平台， 它们可以有符合接口和协议规范的多种实现。中间件为处于其上层的应用软件提供运行与开 发的环境，帮助用户灵活、高效地开发和集成复杂的应用软件。</p><h2 id="中间件应具有如下的一些特-点"><a href="#中间件应具有如下的一些特-点" class="headerlink" title="中间件应具有如下的一些特 点:"></a>中间件应具有如下的一些特 点:</h2><p>满足大量应用的需要;<br>运行于多种硬件和 OS 平台;<br>支持分布计算，提供跨网络、硬件和 OS 平台的透明性的应用或服务的交互;<br>支持标准的协议;<br>支持标准的接口。</p><h2 id="中间件的十大优越性"><a href="#中间件的十大优越性" class="headerlink" title="中间件的十大优越性:"></a>中间件的十大优越性:</h2><p>缩短应用的开发周期;<br>节约应用的开发成本;<br>减少系统初期的建设成本;<br>降低应用开发的失败率;<br>保护已有的投资;<br>简化应用集成;<br>减少维护费用;<br>提高应用的开发质量;<br>保证技术进步的连续性;<br>增强应用的生命力。</p><h1 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类"></a>中间件的分类</h1><h2 id="1-通信处理-消息-中间件"><a href="#1-通信处理-消息-中间件" class="headerlink" title="(1)通信处理(消息)中间件"></a>(1)通信处理(消息)中间件</h2><p>在分布式系统中，人们要建网和制定出通信协议，以保 证系统能在不同平台之间通信，实现分布式系统中可靠的、高效的、实时的跨平台数据传输， 这类中间件称为消息中间件。</p><h2 id="2-事务处理-交易-中间件"><a href="#2-事务处理-交易-中间件" class="headerlink" title="(2)事务处理(交易)中间件"></a>(2)事务处理(交易)中间件</h2><p>在分布式事务处理系统中， 经常要处理大量事务，特别是 OLTP 中，每项事务常常要多台服务器上的程序按顺序协调完 成，一旦中间发生某种故障，不但要完成恢复工作，而且要自动切换系统，达到系统永不停 机，实现高可靠性运行。要使大量事务在多台应用服务器上能实时并发运行，并进行负载平 衡的调度，实现与昂贵的可靠性机和大型计算机系统同等的功能，为了实现这个目标，要求 中间件系统具有监视和调度整个系统的功能。</p><h2 id="3-数据存取管理中间件"><a href="#3-数据存取管理中间件" class="headerlink" title="(3)数据存取管理中间件"></a>(3)数据存取管理中间件</h2><p>在分布式系统中，重要的数据都集中存放在数据服务器中， 它们可以是关系型的、复合文档型、具有各种存放格式的多媒体型，或者是经过加密或压缩 存放的，该中间件将为在网络上虚拟缓冲存取、格式转换、解压等带来方便。</p><h2 id="4-Web-服务器中间件"><a href="#4-Web-服务器中间件" class="headerlink" title="(4)Web 服务器中间件"></a>(4)Web 服务器中间件</h2><p>浏览器图形用户界面已成为公认规范，然而它的会话能力差、 不擅长做数据写入、受 HTTP 协议的限制等，就必须进行修改和扩充，形成了 Web 服务器 中间件。</p><h2 id="5-安全中间件"><a href="#5-安全中间件" class="headerlink" title="(5)安全中间件"></a>(5)安全中间件</h2><p>如防火墙、加密、认证等。<br>产生不安全因素是由操作系统引起的，但必须要用中间件去解决，以适应灵活多变的要求。</p><h2 id="6-跨平台和架构的中间件"><a href="#6-跨平台和架构的中间件" class="headerlink" title="(6)跨平台和架构的中间件"></a>(6)跨平台和架构的中间件</h2><p>在分布式系统中，还需要集成各节点上的不同系统平台上的构件或新老版本的构件，由此产 生了架构中间件。</p><h2 id="7-专用平台中间件"><a href="#7-专用平台中间件" class="headerlink" title="(7)专用平台中间件"></a>(7)专用平台中间件</h2><p>为特定应用领域设计领域参考模式，建立相应架构，配置相应的构件库和中间件，为应用服务器开发和运行特定领域的关键任务(如电子商务、网站等)。</p><h2 id="8-网络中间件"><a href="#8-网络中间件" class="headerlink" title="(8)网络中间件"></a>(8)网络中间件</h2><p>它包括网管、接入、网络测试、虚拟社区、虚拟缓冲等，也是当前最热门的研发项目。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-基于中间件的开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于中间件的开发（三）J2EE</title>
      <link href="/2021/10/06/%E8%BD%AF%E8%80%83/15%E3%80%81%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89J2EE/"/>
      <url>/2021/10/06/%E8%BD%AF%E8%80%83/15%E3%80%81%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%89%EF%BC%89J2EE/</url>
      
        <content type="html"><![CDATA[<p>J2EE 是针对 Web Service、业务对象、数据访问和消息报传送的一组规范。这组应用编 程接口确定了 Web 应用与驻留它们的服务器之间的通信方式。J2EE 注重两件事，一是建 立标准，使 Web 应用的部署与服务器无关;二是使服务器能控制构件的生命周期和其他资 源，以便能够处理扩展、并发、事务处理管理和安全性问题。</p><p>J2EE 规范定义了以下几种构件:应用客户端构件、EJB 构件、Servlets 和 JSP、Applet 构 件。</p><p>J2EE 采用的是多层分布式应用模型，意味着应用逻辑将根据功能分成几个部分， 用户 可以在相同或不同的服务器上安装不同应用构件组成的 J2EE 应用。</p><p><img src="/images/ruankao/7-2.png"></p><h1 id="一、表示层"><a href="#一、表示层" class="headerlink" title="一、表示层"></a>一、表示层</h1><p>J2EE 客户端可以基于 Web，也可以基于 Java。</p><p>分布式企业应用可以同时包括多种客户端，并且这些客户端都可以访问相同的业务逻辑。</p><p><img src="/images/ruankao/7-3.png"></p><h1 id="二、应用服务层"><a href="#二、应用服务层" class="headerlink" title="二、应用服务层"></a>二、应用服务层</h1><p>一般情况下，应用服务层包含表示层请求的表示逻辑和业务逻辑。</p><p>表示层由显示 HTML 页面的 JSP 页面和 Servlets 实现。<br>业务逻辑通过 RMI 对象和 EJB 实现。EJB 依靠容器来 实现事务处理、生命周期和状态管理、资源池、安全等问题，容器是 EJB 运行的环境。</p><h2 id="1-Servlet"><a href="#1-Servlet" class="headerlink" title="1.Servlet"></a>1.Servlet</h2><p>Java Servlets 是指可以扩展 Web 服务器功能的程序。Servlet 从客户端接受请求，动态 生成响应，然后将包含 HTML 或 XML 文档的请求发送给客户端。</p><h2 id="2-JSP"><a href="#2-JSP" class="headerlink" title="2.JSP"></a>2.JSP</h2><p>JSP 页面是基于文本的 Servlet 开发方式。JSP 页面具有 Servlet 的所有优点，如果与 JavaBeans 类结合在一起，可以容易地将内容和显示逻辑分开。这使得无须了解 Java 代码 就能更新页面的外观，更新 Java Beans 类的人也无须深入了解 Web 页面的设计。</p><h2 id="3-EJB"><a href="#3-EJB" class="headerlink" title="3.EJB"></a>3.EJB</h2><p>EJB 构件用于封装业务逻辑，使开发人员无须再担心数据访问、事务处理支持、安全性、 高速缓存和迸发等琐碎任务的编程。在 EJB 规范中，它们由 EJB 容器负责。EJB 包含接口 和类。</p><p>EJB 共有三种类型:EntityBean(实体 Bean)、Session Bean(会话 Bean)和 Message Driven Bean(消息驱动 Bean)</p><h2 id="4-JMS"><a href="#4-JMS" class="headerlink" title="4.JMS"></a>4.JMS</h2><p>JMS 是支持 Java 程序之间信息交换的 J2EE 机制。</p><h2 id="5-JNDI"><a href="#5-JNDI" class="headerlink" title="5.JNDI"></a>5.JNDI</h2><p>由于 J2EE 应用的构件可以独立运行，而且是在不同的设备上运行，因此客户端和应用服务器层代码必须以某种方式查找和参考其他代码和资源。客户端和应用代码使用 JNDI (Java Naming and Directory Interface，Java 命名和目录接口)查找用户定义对象(如 EJB) 和环境实体(Environment Entities)。在 JDBC2.0 中，数据源可以绑定到 JNDI 上，并允许 应用程序访问。</p><h2 id="6-事务处理"><a href="#6-事务处理" class="headerlink" title="6.事务处理"></a>6.事务处理</h2><p>J2EE 事务处理模型可以在部署过程中定义组成一个事务处理的方法之间的联系，以便 事务处理中的所有方法可以作为一个整体存在。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-基于中间件的开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于中间件的开发（二）应用服务器技术</title>
      <link href="/2021/10/06/%E8%BD%AF%E8%80%83/15%E3%80%81%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
      <url>/2021/10/06/%E8%BD%AF%E8%80%83/15%E3%80%81%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p>Web 应用开发大致经历了三个阶段。</p><p>在第一阶段，大家都使用 Web 服务器提供的服 务器扩展接口，使用 C 或者 Perl 等语言进行开发，例如 CGI、API 等。这种方式可以让开 发者自由地处理各种不同的 Web 请求，动态地产生响应页面，实现各种复杂的 Web 系统 要求。但是，这种开发方式的主要问题是对开发者的素质要求很高，往往需要懂得底层的编 程方法，了解 HTTP 协议，此外，这种系统的调试也相当困难。</p><p>在第二阶段，大家开始使用一些服务器端的脚本语言进行开发，主要包括 ASP、PHP、 Livewire 等。其实现方法实质上是在 Web 服务器端放入一个通用的脚本语言解释器，负责 解释各种不同的脚本语言文件。</p><p>第三阶段应用服务器的方式。目前，应用服务器已经成为电子商务应用中一种非常关键的中间件技术。如今，各大主要软件厂商纷纷将应用服务器作为其电子商务平台的基础，如 IBM 的 Websphere，Oracle 的 Internet 应用服务器，Sybase 的 Enterprise 应用服务器等。本节将阐述应用服务器的概念、 相关技术及发展方向，并就目前主流的应用服务器产品进行简单的介绍。</p><h1 id="应用服务器的概念"><a href="#应用服务器的概念" class="headerlink" title="应用服务器的概念"></a>应用服务器的概念</h1><p>在分布式、多层结构及基于构件和服务器端程序设计的企业级应用开发 中，它提供的是一个开发、部署、运行和管理、维护的平台。它可以提供软件“集群” 的 功能，因而可以让多个不同的、异构服务器协同工作、相互备份，以满足企业级应用所需要 的可用性、高性能、可靠性和可伸缩性等。</p><p>应用服务 器可以帮助企业快速架构一个基 Internet 的电子商务系统，而且拥有极高的稳定性、可扩展 性和安全性。</p><p>它能够：<br>(1)更合理地分工企业级应用开发，加快应用的开发速度，减少应用的开发量。<br>(2)应用设计、开发、部署、运行、管理、维护的平台。<br>设计:应用服务器完成底层通信、服务，并屏蔽掉复杂的底层技术细节，向用户提供结 构简单、功能完善的编程接口，让用户可以专心于商务逻辑的设计。<br>开发:应用服务器提供了完全开放的编程语言和应用接口，用户可以用任何自己习惯的 开发工具来工作。另外应用服务器自己也提供快速开发的工具和手段，帮助用户提高开发效 率。<br>部署:应用服务器可以部署在任何硬件平台、任何操作系统上，而且可以分布在异构网 络中，应用服务器帮助用户在复杂的网络环境中配置系统参数，使系统发挥最大的性能，拥 有最好的稳定可靠性。<br>运行:应用服务器采用的是开放技术标准，它提供了一个完整的标准实现，即提供了系 统的运行环境，任何基于同样标准的系统都能很好地运行于这个环境中。在运行中提供应用 系统的名字解析、路由选择、负载平衡、事务控制等服务，并提供系统容错、修复、迁移、 升级扩展等功能。<br>管理:应用服务器让用户通过图形化的界面方便地管理自己的资源，而且在系统运行时 也能动态监控和管理。<br>(3)使得应用与底层平台无关，便于商业逻辑的实现与扩展。<br>(4)为企业应用提供现成的、稳定而强健的、灵活的、成熟的基础架构。</p><p>应用服务器通过分布式体系来保障这一点，表现为:<br>当系统处理能力不够时，可以通过简单地增加硬件来解决;<br>动态调整不同主机间的负载可以最大地利用系统资源，同时提高单机的稳定性;<br>当系统中的某台机器出现故障时，它的工作可由其他机器来承担，不会影响系统整体的运行， 即无单点故障。</p><h1 id="主要的应用服务器"><a href="#主要的应用服务器" class="headerlink" title="主要的应用服务器"></a>主要的应用服务器</h1><h2 id="1-BEA-WebLogic"><a href="#1-BEA-WebLogic" class="headerlink" title="1.BEA WebLogic"></a>1.BEA WebLogic</h2><h2 id="2-IBM-WebSphere"><a href="#2-IBM-WebSphere" class="headerlink" title="2.IBM WebSphere"></a>2.IBM WebSphere</h2><h2 id="3-SUN-iPlanet"><a href="#3-SUN-iPlanet" class="headerlink" title="3.SUN iPlanet"></a>3.SUN iPlanet</h2><h2 id="4-Oracle-Internet-ApplicationServer"><a href="#4-Oracle-Internet-ApplicationServer" class="headerlink" title="4.Oracle Internet ApplicationServer"></a>4.Oracle Internet ApplicationServer</h2><h2 id="5-Sybase-Enterprise-ApplicationServer"><a href="#5-Sybase-Enterprise-ApplicationServer" class="headerlink" title="5.Sybase Enterprise ApplicationServer"></a>5.Sybase Enterprise ApplicationServer</h2>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-基于中间件的开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于中间件的开发（五）企业应用集成</title>
      <link href="/2021/10/06/%E8%BD%AF%E8%80%83/15%E3%80%81%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%94%EF%BC%89%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E9%9B%86%E6%88%90/"/>
      <url>/2021/10/06/%E8%BD%AF%E8%80%83/15%E3%80%81%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%94%EF%BC%89%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>许多企业的信息系统在最初设计时没有考虑多个系统“协同工作”的需要。</p><p>企业信息化建设缺乏一个整体规划。</p><p>企业的信息化往往是从单项业务系统开始的，不同系统的开发方式及对于 开发规范的遵从程度都有所不同，这使得系统间存在很强的孤立性，再加上对企业外部的信 息未予以足够的重视，致使各部门开发出的信息系统最终成为一个个信息孤岛，一个系统很 难与其他系统交换信息。</p><p>EAI(Enterprise ApplicationIntegration，企业应用集成)，可以在一定程度上帮助人们解决这一问题。</p><p>EAI 是指通过将业务流程，应用软件、硬件和各种标准联合起来，对企业中完 成不同业务功能的应用系统进行无缝集成，使它们像一个整体一样进行业务处理和信息共享， 从而提高企业效率，为客户提供灵活的业务服务。</p><p>EAI 可以通过中间件技术来连接企业级各种应用，使异构应用系统之间能够相互“交流” 与“协作”</p><p><img src="/images/ruankao/7-4.png"></p><h1 id="1-应用集成"><a href="#1-应用集成" class="headerlink" title="1.应用集成"></a>1.应用集成</h1><p>应用层次的集成主要为两个以上的应用中的数据和函数提供接近实时的集成。</p><p>应 用层次的集成一般来说是通过处理多个应用系统之间的消息交换，实现系统间的集成</p><h1 id="2-业务过程集成"><a href="#2-业务过程集成" class="headerlink" title="2.业务过程集成"></a>2.业务过程集成</h1><p>业务过程集成需要处理企业范围内的业务过程和把企业存在的应用系统整合到这些业 务过程中。它是一个完全的企业应用集成实现策略，因为它使企业内的一个个分离系统变成 了一个支持业务过程的连续系统，从而满足企业的整个业务过程需求。</p><h1 id="3-数据集成"><a href="#3-数据集成" class="headerlink" title="3.数据集成"></a>3.数据集成</h1><p>要完成应用集成和业务过程集成，必须首先解决数据和数据库的集成问题。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-基于中间件的开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于中间件的开发（六）轻量级架构和重量级架构</title>
      <link href="/2021/10/06/%E8%BD%AF%E8%80%83/15%E3%80%81%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AD%EF%BC%89%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%9E%B6%E6%9E%84%E5%92%8C%E9%87%8D%E9%87%8F%E7%BA%A7%E6%9E%B6%E6%9E%84/"/>
      <url>/2021/10/06/%E8%BD%AF%E8%80%83/15%E3%80%81%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%EF%BC%88%E5%85%AD%EF%BC%89%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%9E%B6%E6%9E%84%E5%92%8C%E9%87%8D%E9%87%8F%E7%BA%A7%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>MVC 模式是一种目前广泛流行的软件设计模式，随着 J2EE 的成熟，它正成为 J2EE 平 台上推荐的一种设计模型，将业务处理与显示分离，将应用分为模型、视图及控制层，增加 了应用的可扩展性。MVC 模式为搭建具有可伸缩性、灵活性、易维护性的 Web 系统提供 了良好的机制。</p><p>轻量 级 Web 架构不仅保持了 J2EE 的优势， 还简化了 Web 的开发。目前主流的轻量级架构是把 Struts、Spring 和 Hibernate 这三种在 业内比较推崇的开源技术基于 MVC 模式相结合，这样在项目开发中不管是从效率上，费用 上，还是易维护上都能达到很好的效果。</p><h1 id="一、Struts-框架"><a href="#一、Struts-框架" class="headerlink" title="一、Struts 框架"></a>一、Struts 框架</h1><p>Struts 是一个基于 SUN J2EE 平台的 MVC 框架，主要是采用 Servlet 和 JSP 技术来实 现的。在 Struts 框架中，模型由实现业务逻辑的 JavaBean 或 EJB 构件构成，控制器由 ActionServlet 和 Action 来实现，视图由一组 JSP 文件构成</p><p><img src="/images/ruankao/7-5.png"></p><p>Struts 把 Servlet、JSP、自定义标签和信息资源整合到一个统一的框架中，开发人员利 用其进行开发时不用自己再编码实现全套 MVC 模式，极大地节省了时间。</p><p>Struts 的工作流程为:<br>首先，JSPview 发起一个以.do 表示的请求;<br>ActionForm 封装用 户请求数据，同时提供验证数据的功能;<br>ActionServlet 根据 struts-config.xml 文件来得到处 理这个请求的 Action 对象，并将请求发送给这个 Action 对象;<br>Action 对象调用 model 去 处理这个请求，将结果返回给 ActionServlet;<br>ActionServlet 决定将结果返回给对应的 view;<br>view 得到结果，并将它显示给用户。</p><h1 id="二、Spring-框架"><a href="#二、Spring-框架" class="headerlink" title="二、Spring 框架"></a>二、Spring 框架</h1><p>Spring Framework是轻量级的 J2EE 应用程序框架，旨在简化 J2EE 的开发，降低 J2EE 项目实施的难度。</p><p>框架包括声 明性事务管理，通过 RMI 或 web services 远程访问业务逻辑，mail 支持工具，以及对于 数据和数据库之间持久层的各种配置的支持。Spring 允许自由选择和组装各部分功能，还 提供和其他软件集成的接口，如与 Hibernate、Struts 的集成。</p><p>Spring 核心本身是个容器,管理物件的生命周期、物件的组态、相依注入等，并可以控 制物件在创建时是以原型(Pro-totype)或单例子(Singleton)的方式来创立。</p><p>Spring 的核心概念是控制反转(Inversionof Control，IoC)，更具体而易懂的名词是依赖 注入(Depen-dency Injection)，使用 Spring，不必自己在程序码中维护物件的依赖关系，只 需在构件中加以设定，Spring 核心容器会自动根据构件将依赖注入指定的物件。</p><p>Spring 的 目标是实现一个全方位的整合框架，在 Spring 框架下实现多个子框架的组合，这些子框架 之间可以彼此独立，也可以使用其他的框架方案加以替代，Spring 成为企业级应用程序一 站式的解决方案。</p><p><img src="/images/ruankao/7-6.png"></p><p>Spring 的核心要点是支持不绑定到特定 J2EE 服务的可重用业务和数据访问对象。 Spring 的 IoC 控件主要服务于利用类、对象和服务去组成一个企业级应用，通过规范的方 式，将各种不同的控件整合成一个完整的应用。</p><h1 id="三、Hibernate-框架"><a href="#三、Hibernate-框架" class="headerlink" title="三、Hibernate 框架"></a>三、Hibernate 框架</h1><p>Hibernate 是一种对象和关系之间映射的框架，是 Java 应用和关系数据库之间的桥梁。可以将数据库资源映射为一个或者多个 POJO。</p><p><img src="/images/ruankao/7-7.png"></p><p><img src="/images/ruankao/7-8.png"></p><h1 id="四、基于-Struts、Spring-和-Hibernate-的轻量级架构"><a href="#四、基于-Struts、Spring-和-Hibernate-的轻量级架构" class="headerlink" title="四、基于 Struts、Spring 和 Hibernate 的轻量级架构"></a>四、基于 Struts、Spring 和 Hibernate 的轻量级架构</h1><p><img src="/images/ruankao/7-9.png"></p><h2 id="1-表示层。"><a href="#1-表示层。" class="headerlink" title="(1)表示层。"></a>(1)表示层。</h2><p>由 Struts 实现，主要完成如下任务:<br>管理用户请求和响应;<br>提供一个控 制器代理以调用业务逻辑和各层的处理;<br>处理从其他层抛给 StrutsAction 的异常;<br>为显示提 供数据模型;<br>借助 Struts Validator 框架帮助完成 Web 层的验证工作。</p><h2 id="2-持久层。"><a href="#2-持久层。" class="headerlink" title="(2)持久层。"></a>(2)持久层。</h2><p>由 Hibernate 实现。它通过一个面向对象的查询语言(Hibernate Query Language，HQL)或正则表达式的 API 来检索对象的相关信息。HQL 类似于 SQL，只是把 SQL 里的表和列用对象和它的字段代替。Hibernate 还负责存储、更新、删除数据库记录。同时 Hibernate 支持大部分主流数据库，且支持父表/子表关系、事务处理、继承和多态。</p><h2 id="3-业务层。"><a href="#3-业务层。" class="headerlink" title="(3)业务层。"></a>(3)业务层。</h2><p>由 Spring 来实现。使用 Spring 的优点是:<br>利用延时注入思想组装代码， 提高了系统扩展性和灵活性，实现插件式编程。<br>利用 AOP 思想，集中处理业务逻辑，减少 重复代码，构建了较理想的解决方案。<br>利用其对 Hibernate 的会话工厂(Session Factory)、 事务管理的封装，可以更简洁地应用 Hibernate。</p><h1 id="五、轻量级架构和重量级架构的探讨"><a href="#五、轻量级架构和重量级架构的探讨" class="headerlink" title="五、轻量级架构和重量级架构的探讨"></a>五、轻量级架构和重量级架构的探讨</h1><p>重量级的开发倒并不是指 EJB 或者是 JNDI，很大意义上，重量级的开发都是需要依赖 一个非常庞大的容器系统进行开发，在 EJB 的开发中，所有开发的内容基本都需要放置在 一个容器系统中进行运行这些容器，因为基本针对大型企业应用，所以体积庞大，占用资源过 多，在开发的过程中效率很低。因为使用大型容器作为开发环境的话，很大一部分时间都用 在了配置、运行这样的过程上，有时候改动一个小小的部分，需要等很长的时间才能看到结 果。</p><p>轻量级框架的优势很大程度上是因为加速了开发的速度，不用部署一个很庞大的容器系 统就可以实现以前需要容器才能实现的功能，可以使用 Spring 代替 EJB 中的无状态的会话 Bean，可以使用 Hibernate 代替 EJB 中的实体 Bean，而且可以直接写一个应用程序运行已 经完成的系统，马上可以看到结果，做单元测试非常简单，不需要做太多的工作就可以构建 系统，这些特性对于开发人员来说非常有吸引力。</p><p>重 量级框架在大规模运行的时候会表现出非常优异的性能，劣势主要是开发效率较低，轻量级 框架正好相反，开发的时候非常迅速，但是在大规模运行的时候，性能与重量级框架相比还 是有差异的。</p><p>不管是轻量级还是重量级框 架，基本解决的是两个问题，一个是事务控制，另一个是持久化控制。</p><p>持久化的开发可以和任何框架没有关系，直接使用 JPA 的标准注解即可，所以开发持久化部分的时候可以使用 JPA 进行注解，开发时期用 Hibernate 作为 JPA 的实现进行开发测试，需要上线运行的时候就可以直接部署到 EJB 的实体 Bean 上，在 EJB 3.0 之后，已经很好进行移植部署了。关于事务控制，现在所有的实现方式都比 较简单，针对方法进行注解事务类型即可，开发的时候可以用一个转换器将这些注解转化为 Spring 的映射，快速地进行开发，在上线运行的时候，直接使用 EJB 的会话 Bean 进行部 署就可以解决，这些方式实现起来并不困难，可以很好地解决“重量级”和“轻量级”之间 的矛盾。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-基于中间件的开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息系统基础知识（四）企业信息化与电子商务</title>
      <link href="/2021/10/06/%E8%BD%AF%E8%80%83/14%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%9B%9B%EF%BC%89%E4%BC%81%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E4%B8%8E%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1/"/>
      <url>/2021/10/06/%E8%BD%AF%E8%80%83/14%E3%80%81%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E5%9B%9B%EF%BC%89%E4%BC%81%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%8C%96%E4%B8%8E%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="一、企业信息化概述"><a href="#一、企业信息化概述" class="headerlink" title="一、企业信息化概述"></a>一、企业信息化概述</h1><h2 id="1-企业信息化的目的"><a href="#1-企业信息化的目的" class="headerlink" title="1.企业信息化的目的"></a>1.企业信息化的目的</h2><p>企业信息化的目的就是要建立一个整体上相当于<br>人的神经系统的数字神经系统。使得企业具有平稳和有效的运作能力， 对紧急情况和商机做出快速反应，为企业内外部用户提供有价值的信息，以提高企业的核心 竞争力。</p><h2 id="2-企业信息化的规划"><a href="#2-企业信息化的规划" class="headerlink" title="2.企业信息化的规划"></a>2.企业信息化的规划</h2><p>首先，企业战略的层面。在规划中必须对企业目前的业务策略和未来的发展方向作深入 分析。<br>其次，业务运作层面。针对企业所确定的业务战略，通过分析获得实现这些目标的关键 业务驱动力和实现这些目标的关键流程。<br>再次，管理运作层面。虽然这一层面从价值链的角度上来说，属于辅助流程，但它对企 业日常管理的科学性、高效性是非常重要的。</p><h2 id="3-企业信息化的方法"><a href="#3-企业信息化的方法" class="headerlink" title="3.企业信息化的方法"></a>3.企业信息化的方法</h2><p>几种常用的企业信息化方法。</p><h3 id="1-业务流程重构方法。"><a href="#1-业务流程重构方法。" class="headerlink" title="(1)业务流程重构方法。"></a>(1)业务流程重构方法。</h3><p>企业业务流程重构的中心思想 是，在信息技术和网络技术迅猛发展的时代，企业必须重新审视企业的生产经营过程，利用 信息技术和网络技术，对企业的组织结构和工作方法进行“彻底的、根本性的”重新设计， 以适应当今市场发展和信息社会的需求。</p><h3 id="2-核心业务应用方法。"><a href="#2-核心业务应用方法。" class="headerlink" title="(2)核心业务应用方法。"></a>(2)核心业务应用方法。</h3><h3 id="3-信息系统建设方法。"><a href="#3-信息系统建设方法。" class="headerlink" title="(3)信息系统建设方法。"></a>(3)信息系统建设方法。</h3><h3 id="4-主题数据库方法。"><a href="#4-主题数据库方法。" class="headerlink" title="(4)主题数据库方法。"></a>(4)主题数据库方法。</h3><p>主题数据库就是面向企业业务主题的数据库，也就是面向企业的核心业务的数据库。</p><h3 id="5-资源管理方法。"><a href="#5-资源管理方法。" class="headerlink" title="(5)资源管理方法。"></a>(5)资源管理方法。</h3><p>资源是企业生存发展的根本保证，一个企业如果离开了资源，那 它是无法生存的。<br>流行的企业信息化的资源管理方法有很多，最常见的有 ERP、 SCM 等。</p><h3 id="6-人力资本投资方法。"><a href="#6-人力资本投资方法。" class="headerlink" title="(6)人力资本投资方法。"></a>(6)人力资本投资方法。</h3><p>人力资本的概念是经济学理论发展的产物。人力资本与人力 资源的主要区别是人力资本理论把一部分企业的优秀员工看作一种资本，能够取得投资收益。 人力资本投资方法特别适用于那些依靠智力和知识而生存的企业，例如，各种咨询服务、软 件开发等企业。</p><h1 id="二、企业资源规划（ERP）"><a href="#二、企业资源规划（ERP）" class="headerlink" title="二、企业资源规划（ERP）"></a>二、企业资源规划（ERP）</h1><p>ERP 是一种融合了企业最佳实践和先进信息技术的新型管理工具。 它扩充了 MIS、MRPII(Manufacturing Resources Planning，制造资源计划)的管理范围， 将供应商和企业内部的采购、生产、销售及客户紧密联系起来，可对供应链上的所有环节进 行有效管理，实现对企业的动态控制和各种资源的集成和优化，提升基础管理水平，追求企 业资源的合理高效利用。</p><p>ERP 被认为是顾客驱动的、基于时间的、面向 整个供应链管理的制造资源计划。</p><p>“企业资源”是指支持企业业务运作和战略运作的事物，既包括人们常说的人、财、物，也包括 人们没有特别关注的信息资源;同时，不仅包括企业的内部资源，还包括企业的各种外部资源。</p><p>ERP 就是一个有效地组织、计划和实施企业的内外部资源的管理系统，它依靠 IT 的技术和手段以保证其信息的集成性、实时性和统一性。</p><h2 id="1-ERP-的结构"><a href="#1-ERP-的结构" class="headerlink" title="1.ERP 的结构"></a>1.ERP 的结构</h2><h3 id="1-ERP-的管理思想"><a href="#1-ERP-的管理思想" class="headerlink" title="(1)ERP 的管理思想"></a>(1)ERP 的管理思想</h3><p>基本思想是将企业的业务流程看作一个紧密连接的供应链， 将企业内部划分成几个相互协同作业的支持子系统，如财务、市场营销、生产制造、质量控 制、服务维护、工程技术等。</p><p>ERP 可以说是 MRPII的一个扩展。<br>第一，它将系统的管理核心从“在正确的时间制造和销售正确的产品” 转移到了“在最佳的时间和地点，获得企业的最大增值”;<br>第二，基于管理核心的转移，其 管理范围和领域也从制造业扩展到了其他行业和企业;<br>第三，在功能和业务集成性方面，都 有了很大加强，特别是商业智能的引入使得以往简单的事务处理系统变成了真正智能化的管 理控制系统。</p><h3 id="2-软件产品"><a href="#2-软件产品" class="headerlink" title="(2)软件产品"></a>(2)软件产品</h3><p>现在，ERP 产品则发展到比较高的阶段。大多 数 ERP 产品供应商都在模块化的基础上，把软件产品和软件服务进行集成，实现软件产品 的技术先进性和个性化设计，为用户提供一体化的解决方案。</p><h3 id="3-管理系统"><a href="#3-管理系统" class="headerlink" title="(3)管理系统"></a>(3)管理系统</h3><p>ERP 是一个集成的信息系统，ERP 承诺建立跨越企业各个部门、各种生产要素和环境的 单一应用原则下处理所有的事务，即意味着集成。这种集成应该包括人力资源、财务、销售、 制造、任务分派和企业供应链等的各项管理业务。</p><p>具体而言，ERP 管理系统主要由六大功能目标组成:<br>一是支持企业整体发展战略经营系统。<br>二是实现全球大市场营销战略与集成化市场营销<br>三是完善企业成本管理机制。<br>四是研究开发管理系统<br>五是建立敏捷的后勤管理系统<br>六是实施准时生产方式</p><h2 id="2-ERP-的主要功能"><a href="#2-ERP-的主要功能" class="headerlink" title="2.ERP 的主要功能"></a>2.ERP 的主要功能</h2><p>一是支持决策的功能<br>二是为处于不同行业的企业提供有针对性的 IT 解决方案<br>三是从企业内部的供应链发展为全行业和跨行业的供应链</p><h2 id="3-ERP-的主要功能模块"><a href="#3-ERP-的主要功能模块" class="headerlink" title="3.ERP 的主要功能模块"></a>3.ERP 的主要功能模块</h2><p>物流、资金流、信息流</p><p><img src="/images/ruankao/7-11.png"></p><h1 id="三、客户关系管理（CRM）"><a href="#三、客户关系管理（CRM）" class="headerlink" title="三、客户关系管理（CRM）"></a>三、客户关系管理（CRM）</h1><p>CRM 在坚持以客户为中心的理念的基础上，重构包括市场营销和客户服务等业务流程。 CRM 的目标不仅要使这些业务流程自动化，而且要确保前台应用系统能够改进客户满意度、 增加客户忠诚度，以达到使企业获利的最终目标。</p><h2 id="1-CRM-的概念"><a href="#1-CRM-的概念" class="headerlink" title="1.CRM 的概念"></a>1.CRM 的概念</h2><p>CRM 集成了信息系统和办公系统等的一整套应用系统，从而确保了客户满意度的提高，以及通过对业务流程的全面管理来降低企业成本。</p><h2 id="2-CRM-的背景"><a href="#2-CRM-的背景" class="headerlink" title="2.CRM 的背景"></a>2.CRM 的背景</h2><p>CRM 的出现体现了两个重要的管理趋势的转变。<br>首先是企业从以产品为中心的模式向以客户为中心的模式的转变。<br>其次，CRM 的出 现还表明了企业管理的视角从“内视型”向“外视型”的转变。</p><p>仅仅依靠 ERP 的“内视型”的管理模式已难以适应激烈的竞争，企业必须转换自己的视角，在向“外向型”转变的过程中整合自己的资源。</p><h2 id="3-CRM-的内容"><a href="#3-CRM-的内容" class="headerlink" title="3.CRM 的内容"></a>3.CRM 的内容</h2><p>(1)客户服务。<br>(2)市场营销。<br>(3)共享的客户资料库。<br>(4)分析能力。</p><h2 id="4-CRM-的解决方案和实施过程"><a href="#4-CRM-的解决方案和实施过程" class="headerlink" title="4.CRM 的解决方案和实施过程"></a>4.CRM 的解决方案和实施过程</h2><p>CRM 的根本要求就是与客户建立起一种互相学习的关系，即从与客户的接触中了解他 们在使用产品中遇到的问题，以及对产品的意见和建议，并帮助他们加以解决。</p><p>一般说来 CRM 由两部分构成，即触发中心和挖掘中心，前者指客户和 CRM 通过电话、 传真、Web、E-mail 等多种方式“触发”进行沟通;挖掘中心则是指对 CRM 记录交流沟通 的信息进行智能分析。</p><p>一个有效的 CRM 解决方案应该具备以下要素:<br>(1)畅通有效的客户交流渠道(触发中心)。<br>(2)对所获信息进行有效分析(挖掘中心)。<br>(3)CRM 必须能与 ERP 很好地集成。</p><h2 id="5-CRM-的价值"><a href="#5-CRM-的价值" class="headerlink" title="5.CRM 的价值"></a>5.CRM 的价值</h2><p>CRM 之所以受欢迎是因为好的客户关系管理对客户和企业都有益。CRM 用户从不断加 强的客户关系管理中明显获益。好的服务不但令人愉快，更能带来巨大价值。带有客户服务 的产品的总价值明显高于产品自身。<br>从另一方面看，企业实施 CRM 并非出于利他原则，而是认识到客户是其真正的财富。</p><p>较高的满意度，使得企业能够保留老客户，并不断增加新客户;<br>识别利润贡献度最高的客户并给以相应的优厚对待;<br>通过有效目标市场定位，来降低营销成本;<br>引导潜在消费至适当的销售渠道;<br>提供正确的产品来增加销售(交叉销售/纵向销售);<br>简化部门工作流程来缩短销售周期;<br>通过集中共同活动以减少多余运作;<br>减少由于多个不协调的客户交互点而产生的差错，节省费用;<br>利用客户喜欢的沟通渠道来增加对客户需求的了解;<br>参照与其他客户的联络记录和经验，与目前的客户进行沟通;<br>根据对以前绩效的分析评估未来的销售、营销和客户服务活动;</p><h1 id="四、产品数据管理（PDM）"><a href="#四、产品数据管理（PDM）" class="headerlink" title="四、产品数据管理（PDM）"></a>四、产品数据管理（PDM）</h1><h2 id="1-PDM-简介"><a href="#1-PDM-简介" class="headerlink" title="1.PDM 简介"></a>1.PDM 简介</h2><p>PDM 是一门用来管理所有与产品相关信息(包括零件信息、配置、文档、计算机辅助设计 文件、结构、权限信息等)和所有与产品相关过程(包括过程定义和管理)的技术。</p><p>PDM 是为企业设计和生产构筑一个并行产品开发环境(由供应、工程设计、制造、采购、 销售与市场、客户构成)的关键技术。一个成熟的 PDM 系统能够使所有参与创建、交流、 维护设计意图的人在整个信息生命周期中自由共享和传递与产品相关的所有异构数据。</p><p>PDM 系统是一种软件框架，利用这个框架可以帮助企业实现对与企业产品相关的数据、开 发过程，以及帮助使用者进行集成与管理，可以实现对设计、制造和生产过程中需要的大量 数据进行跟踪和支持。</p><p>PDM 能够跨越时间和操作环境，实现数据的无缝连接和移动，保证 正确的数据、在正确的时间、以正确的格式、出现在正确的位置，进而推动产品尽快地投入 市场并能有效地平衡生产能力。</p><p>PDM 系统的用户主要有三类:<br>一是信息的使用者，他们要求最简单的用户界面;<br>二是数据的创造者，如机械工程师和电子工程师等，他们希望 PDM 系统能够很好地融入到产品设计应用中;<br>三是系统管理员，他们面对的是最复杂的用户界面。</p><h2 id="2-企业对-PDM-的需求"><a href="#2-企业对-PDM-的需求" class="headerlink" title="2.企业对 PDM 的需求"></a>2.企业对 PDM 的需求</h2><p>一是在企业内部建立起完整的、统一的、共享的数据模型，保证各部门的产品信息一致。<br>二是缩短产品的上市时间。在需要数据的时候立即得到这些数据，加快任务的完成; 支持并行工程;允许授权小组的成员随时访问最新的版本的相关数据。<br>三是适应多品种小批量生产方式。通过产品结构和配置管理为用户提供了系列产品的有效管理方法，并可以快速地响应市场的需求，实现“面向订单”的生产方式。<br>四是提高设计效率和提高生产效率，降低产品成本。<br>五是提高设计与制造的准确性，提高产品质量。<br>六是保护数据完整性。PDM 系统提供权限控制和变更管理确保产品数据的准确和安全。<br>七是更好地控制项目。项目管理功能提供用户对项目的进展情况进行实施监控，确保项目顺利进行和如期完成。<br>八是实现全面的质量管理。PDM 系统可以建立适应 ISO9000 系列验证和全面质量管理<br>的环境，通过在产品全生命周期内的工作流程管理确保了产品的最终质量。<br>九是建立起企业 级的协同工作平台，为最终实现企业的电子商务打下坚实的基础。</p><h2 id="3-PDM-的发展过程"><a href="#3-PDM-的发展过程" class="headerlink" title="3.PDM 的发展过程"></a>3.PDM 的发展过程</h2><p>(1)配合 CAD(Computer Aided Design，计算机辅助设计)使用的早期简单的 PDM 系统。<br>(2)产品数据管理。<br>(3)产品协同商务(Collaborative Product Commerce，CPC)或 PDM 标准化。</p><h2 id="4-PDM-主要功能模块和内容"><a href="#4-PDM-主要功能模块和内容" class="headerlink" title="4.PDM 主要功能模块和内容"></a>4.PDM 主要功能模块和内容</h2><p>(1)数据基库<br>(2)产品配置管理<br>(3)工作流管理<br>(4)分类及检索功能<br>(5)项目管理</p><h1 id="五、企业门户"><a href="#五、企业门户" class="headerlink" title="五、企业门户"></a>五、企业门户</h1><h2 id="1-企业门户的功能"><a href="#1-企业门户的功能" class="headerlink" title="1.企业门户的功能"></a>1.企业门户的功能</h2><p>(1)能够将一个机构现有的互联网址和服务完全合并而且相互兼容。<br>(2)能够支持开放标准和应用编程接口，让平台得以轻易容纳新的应用程序。<br>(3)能够接入一个由支持企业门户网站架构的伙伴和专业服务公司所组成的网络。<br>(4)能够多渠道接入网站，如互联网至公司内联网、话音网络、无线网络等。<br>(5)能够以统一的服务作为企业门户网站各种服务的基础，让用户享有多种便利，如一次登入、个人化接口等。当用户进入门户网站的不同部分时，系统可以记住用户的身份以 提供合适的信息。</p><h2 id="2-企业门户的分类"><a href="#2-企业门户的分类" class="headerlink" title="2.企业门户的分类"></a>2.企业门户的分类</h2><p>信息门户、知识门户和应用门户。</p><h2 id="3-企业门户的要素"><a href="#3-企业门户的要素" class="headerlink" title="3.企业门户的要素"></a>3.企业门户的要素</h2><p>建立互联网服务时应考虑的基本要素:<br>(1)战略性思维<br>(2)为用户所需要的不同类型门户网站建立一个门户网站架构。<br>(3)寻找合适的技术供货商——既能够支持各主要标准，并能够将其基本门户网站架 构与其他供货商的应用程序整合起来。<br>(4)确定所要建立的门户网站类型<br>(5)首先小规模地试办项目，确保有一个可行的工作环境。</p><h1 id="六、企业应用集成（EAI）"><a href="#六、企业应用集成（EAI）" class="headerlink" title="六、企业应用集成（EAI）"></a>六、企业应用集成（EAI）</h1><p>EAI 技术将进程、软件、 标准和硬件联合起来，在两个或更多的企业信息系统之间实现无缝集成，使它们就像一个整 体一样。</p><h2 id="1-EAI-的简要历史"><a href="#1-EAI-的简要历史" class="headerlink" title="1.EAI 的简要历史"></a>1.EAI 的简要历史</h2><h2 id="2-EAI-的内容"><a href="#2-EAI-的内容" class="headerlink" title="2.EAI 的内容"></a>2.EAI 的内容</h2><h3 id="1-企业内的集成"><a href="#1-企业内的集成" class="headerlink" title="(1)企业内的集成"></a>(1)企业内的集成</h3><p>1 界面集成<br>2 平台集成<br>3 数据集成<br>4 应用集成<br>5 过程集成</p><h3 id="2-企业间应用集成"><a href="#2-企业间应用集成" class="headerlink" title="(2)企业间应用集成"></a>(2)企业间应用集成</h3><p>EAI 使得应用集成架构里的客户和业务伙伴，都可以通过集成供应链内的所有应用和数据库实现信息共享。</p><h2 id="3-集成技术的发展"><a href="#3-集成技术的发展" class="headerlink" title="3.集成技术的发展"></a>3.集成技术的发展</h2><p>面向信息的集成技术、面向过程的集成技术和面向服务的集成技术。</p><p>信息集成采用的主要数据处理技术有数据复制、数据聚合和接口集成等。其中，接口集成仍然是一种主流技术。</p><p>基于 SOA 和 Web 服务技术的应用集成是业务集成技术上的一次重要的变化，被认为是新一代的应用集成技术。</p><h1 id="七、供应链管理（Supply-Chain-Management，SCM）"><a href="#七、供应链管理（Supply-Chain-Management，SCM）" class="headerlink" title="七、供应链管理（Supply Chain Management，SCM）"></a>七、供应链管理（Supply Chain Management，SCM）</h1><h2 id="1-供应链管理的定义"><a href="#1-供应链管理的定义" class="headerlink" title="1.供应链管理的定义"></a>1.供应链管理的定义</h2><p>SCM 的核心是供应链。供应链是指一个整体的网络，用来传送产品和服务，从原材料 开始一直到最终客户(消费者)，它凭借一个设计好的信息流、物流和现金流来完成。</p><p>现代 意义的供应链是利用计算机网络技术全面规划供应链中的商流、物流、信息流、资金流等并 进行计划、组织、协调和控制。</p><p>供应链有两层含义，一层含义是任何一个企业内部都有一条或几条供应链，包括从生产 到发货的各个环节;另一层含义是一个企业必定处于市场更长的供应链之中，包括从供应商 的供应商到顾客的顾客的每一个环节。</p><p>供应链是企业赖以生存的商业循环系统，是企业电子 商务中最重要的课题。</p><p>供应链管理至少包括以下六大应用功能:<br>需求管理(预测和协作工具)、<br>供应链计划(多工厂计划)、<br>生产计划、<br>生产调度、<br>配送计划、<br>运输计划。</p><h2 id="2-供应链与物流"><a href="#2-供应链与物流" class="headerlink" title="2.供应链与物流"></a>2.供应链与物流</h2><p>供应链与物流的关系极为密切，而且不可分割。供应链管理是一种管理方法或思想，而 物流是在现实经营活动中的物质运动，供应链管理思想是从物流管理的实践中提取出来的， 管理的对象是物流;物流分为采购物流、生产物流、销售物流，而供应链管理将这些全部纳 入到一个管理体系之中，在供应商、分销商、零销商之间搭建起一个流畅的通道，建立起一 个信息共享的机制，从而优化整个供应链，达到降低成本、提高效率等目的。</p><h2 id="3-供应链管理是一种管理思想"><a href="#3-供应链管理是一种管理思想" class="headerlink" title="3.供应链管理是一种管理思想"></a>3.供应链管理是一种管理思想</h2><p>供应链管理一个重要的前提是信息共享，而各种版本 SCM 产品，其 核心功能其实是信息传递。</p><h2 id="4-供应链管理的运作模式"><a href="#4-供应链管理的运作模式" class="headerlink" title="4.供应链管理的运作模式"></a>4.供应链管理的运作模式</h2><p>供应链中的信息流覆盖了从供应商、制造商到分销商，再到零售商等供应链中的所有环节。其信息流分为需求信息流和供应信息流，这是两个不同流向的信息流。</p><h2 id="5-供应链管理的技术支持体系"><a href="#5-供应链管理的技术支持体系" class="headerlink" title="5.供应链管理的技术支持体系"></a>5.供应链管理的技术支持体系</h2><p>供应链信息系统的建立需要大量信息技术来支持，这是因为供应链管理涉及众多的领域: 产品(服务)设计、生产、市场营销(销售)、客户服务、物流供应等。它是以同步化、集成 化生产计划为指导，通过采用各种不同信息技术来提高这些领域的运作绩效。</p><p>信息技术对供应链的支撑可分为两个层面。<br>第一个层面是由标识代码技术、自动识别与数据采集技术、电子数据交换技术、互联网 技术等基础信息技术构成。<br>第二层面是基于信息技术而开发的支持企业生产。</p><h1 id="八、电子商务概述"><a href="#八、电子商务概述" class="headerlink" title="八、电子商务概述"></a>八、电子商务概述</h1><p>电子商务是一项涉及全球的全新业务和全新服务，是网络化的新型经济活动，它不仅仅 是基于互联网的新型交易或流通方式，还是基于互联网、广播电视网和电信网络等电子信息 网络的生产、流通和消费活动。</p><h2 id="1-什么是电子商务"><a href="#1-什么是电子商务" class="headerlink" title="1.什么是电子商务"></a>1.什么是电子商务</h2><p>电子商务(Electronic Commerce，EC)是指买卖双方利用现代开放的 Internet，按照一 定的标准所进行的各类商业活动。</p><p>电子商务分三个方面:即电子商情广告、电子选购和交易及电子交易凭证的交换、电子 支付与结算以及网上售后服务等。</p><p>参与电子商务的实体有四类:顾客(个人消费者或集团购买)、商户(包括销售商、制 造商、储运商)、银行(包括发卡行、收单行)及认证中心。</p><h2 id="2-电子商务的类型"><a href="#2-电子商务的类型" class="headerlink" title="2.电子商务的类型"></a>2.电子商务的类型</h2><p>(1)企业与消费者之间的电子商务(Business to Customer，B2C)<br>(2)企业与企业之间的电子商务(Business to Business，B2B)<br>(3)消费者与消费者之间的电子商务(Customer to Customer，C2C)<br>(4)O2O 即 Online To Offline(在线离线/线上到线下)</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-信息系统基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于中间件的开发（四）.NET</title>
      <link href="/2021/09/30/%E8%BD%AF%E8%80%83/15%E3%80%81%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89.NET/"/>
      <url>/2021/09/30/%E8%BD%AF%E8%80%83/15%E3%80%81%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89.NET/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-基于中间件的开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构设计（十一）软件架构视图</title>
      <link href="/2021/09/29/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%A7%86%E5%9B%BE/"/>
      <url>/2021/09/29/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、软件视图的分类"><a href="#一、软件视图的分类" class="headerlink" title="一、软件视图的分类"></a>一、软件视图的分类</h1><p>现代软件系统非常复杂，通常在某个具体的时间内只需将注意力集中在某几个结构上，结构是元素本身的集合，而视图则是捕获和表达结构(文档描述)，虽然它 们有区别，但在实际使用时则不严格区分，即从系统体系的角度说是结构，从文档角度说是 视图。</p><p>架构的优势也在于使用视图:每个视图强调系统的某一个方面，同时忽视系统的其他方 面，以便有助于处理或理解当前问题，描述完整的系统架构必须具备完整的视图集，“4+1” 方法就是一类完备视图集。</p><p>软件视图通常分为三种类型:<br>(1)模块视图类型:为系统的主要模块实现单元编档。<br>(2)构件和连接件视图类型:为系统的构件和连接件执行单元编档。<br>(3)分配视图类型:为软件的开发和执行环境之间的关系编档。</p><table><thead><tr><th>组别</th><th>架构风格</th><th>说明</th><th>应用于</th></tr></thead><tbody><tr><td>模块视图类型</td><td>分解</td><td>大模块分解为小模块，小到容易理解</td><td>资源分配、项目结构化和规划；信息隐蔽、封装；配置控制</td></tr><tr><td>↑</td><td>使用</td><td>一个单元的正确性依赖于另一个单元的正确性（如版本）</td><td>设计子集；设计扩展（增量开发）</td></tr><tr><td>↑</td><td>分层</td><td>上层使用下层的服务；实现隐藏细节的抽象</td><td>增量式开发；基于“虚拟机”上的可移植性</td></tr><tr><td>↑</td><td>类或泛化</td><td>“继承自”或“是一个实例”；共享访问方法</td><td>面向对象的设计（使用公共模板）</td></tr><tr><td>构件-连接器视图类型</td><td>客户机-服务器</td><td>构件是客户机和服务器，连接件是协议及共享信息</td><td>分布式操作：关注点分离（支持可修改性）；负载均衡</td></tr><tr><td>↑</td><td>进程或通信进程</td><td>通过通信、同步或排除操作形成进程或线程之间的关联</td><td>调度分析：性能分析</td></tr><tr><td>↑</td><td>并发</td><td>在相同的“逻辑线程”上运行</td><td>确定资源挣用；分析线程</td></tr><tr><td>↑</td><td>共享数据</td><td>运行时产生数据、使用数据（共享数据储存库）</td><td>性能；数据完整性；可修改性</td></tr><tr><td>分配视图类型</td><td>部署</td><td>软件功能分配给软件（进程）、硬件（处理器）和通信路径</td><td>性能、可能性、安全性说明。尤其在分布式或并行系统中</td></tr><tr><td>↑</td><td>实现</td><td>模块映射到开发活动中</td><td>配置控制、集成、测试活动</td></tr><tr><td>↑</td><td>工作分配</td><td>将责任分配到适当得开发小组，特别是公共部分不是每个人趋势线</td><td>项目管理、管理通用性，最好的专业技术安排</td></tr></tbody></table><h1 id="二、模块视图类型及其风格"><a href="#二、模块视图类型及其风格" class="headerlink" title="二、模块视图类型及其风格"></a>二、模块视图类型及其风格</h1><p>模块将遵循某种方式将软件系统分解成可管理的功能单元。架构模块视图是通过文档来枚举系统的主要实现单元或模块，及这些单元之间的关系。</p><p>完整的架构文档必须包含有模块视图，它为源代码提供蓝图。</p><p><img src="/images/ruankao/6-53.png"></p><h2 id="1-分解风格能展示向模块分配责任的方式。"><a href="#1-分解风格能展示向模块分配责任的方式。" class="headerlink" title="(1)分解风格能展示向模块分配责任的方式。"></a>(1)分解风格能展示向模块分配责任的方式。</h2><p><img src="/images/ruankao/6-54.png"></p><h2 id="2-使用风格能展示模块相互依赖的方式。"><a href="#2-使用风格能展示模块相互依赖的方式。" class="headerlink" title="(2)使用风格能展示模块相互依赖的方式。"></a>(2)使用风格能展示模块相互依赖的方式。</h2><p><img src="/images/ruankao/6-55.png"></p><h2 id="3-分层风格能将系统分割成一组虚拟机，通过“允许使用”关系相互关联，分层风-格能帮助实现可移植性和可修改性。"><a href="#3-分层风格能将系统分割成一组虚拟机，通过“允许使用”关系相互关联，分层风-格能帮助实现可移植性和可修改性。" class="headerlink" title="(3)分层风格能将系统分割成一组虚拟机，通过“允许使用”关系相互关联，分层风 格能帮助实现可移植性和可修改性。"></a>(3)分层风格能将系统分割成一组虚拟机，通过“允许使用”关系相互关联，分层风 格能帮助实现可移植性和可修改性。</h2><p><img src="/images/ruankao/6-56.png"></p><h2 id="4-泛化风格能展示一个模块如何成为另一个模块的泛化或特化，从而使模块之间产-生关联。"><a href="#4-泛化风格能展示一个模块如何成为另一个模块的泛化或特化，从而使模块之间产-生关联。" class="headerlink" title="(4)泛化风格能展示一个模块如何成为另一个模块的泛化或特化，从而使模块之间产 生关联。"></a>(4)泛化风格能展示一个模块如何成为另一个模块的泛化或特化，从而使模块之间产 生关联。</h2><p>它广泛应用于面向对象的系统，能展示继承性，并能用来使用模块之间的共性。<br><img src="/images/ruankao/6-57.png"></p><h1 id="三、C-amp-C视图类型及其风格"><a href="#三、C-amp-C视图类型及其风格" class="headerlink" title="三、C&amp;C视图类型及其风格"></a>三、C&amp;C视图类型及其风格</h1><p>C&amp;C 视图能定义由具有某种运行时存在的元素模型，这些元素包括进程、对象、客户 机、服务器及数据存储器等。此外，它还包含作为元素的交互路径，如通信链路和协议、信 息流及共享存储器访问。通常，可利用复杂的基础结构(如中间件框架、分布式通信信道和 进程调度)来执行这些交互操作。<br><img src="/images/ruankao/6-58-1.png"><br><img src="/images/ruankao/6-58-2.png"></p><h2 id="1-管道和过滤器风格中的交互模式表现出数据流连续变换的特征。"><a href="#1-管道和过滤器风格中的交互模式表现出数据流连续变换的特征。" class="headerlink" title="(1)管道和过滤器风格中的交互模式表现出数据流连续变换的特征。"></a>(1)管道和过滤器风格中的交互模式表现出数据流连续变换的特征。</h2><p>数据抵达过滤器 并经过转换后由管理传送给下一个过滤器。</p><p><img src="/images/ruankao/6-59.png"></p><h2 id="2-共享数据风格通过保留持久数据来支配交互模式，持久数据由多个数据存取器和-至少一个储存库保留。"><a href="#2-共享数据风格通过保留持久数据来支配交互模式，持久数据由多个数据存取器和-至少一个储存库保留。" class="headerlink" title="(2)共享数据风格通过保留持久数据来支配交互模式，持久数据由多个数据存取器和 至少一个储存库保留。"></a>(2)共享数据风格通过保留持久数据来支配交互模式，持久数据由多个数据存取器和 至少一个储存库保留。</h2><p><img src="/images/ruankao/6-60.png"></p><h2 id="3-发布-订阅风格用于向一组未知接受者发送事件和消息。"><a href="#3-发布-订阅风格用于向一组未知接受者发送事件和消息。" class="headerlink" title="(3)发布-订阅风格用于向一组未知接受者发送事件和消息。"></a>(3)发布-订阅风格用于向一组未知接受者发送事件和消息。</h2><p>可在不修改生产者的情况 下添加新的接受者(订阅者)。在发布-订阅风格中，构件通过事件发布进行交互。构件可订 阅一组事件。<br><img src="/images/ruankao/6-61.png"></p><h2 id="4-客户机-服务器风格能展示构件通过请求其他构件的服务进行交互的过程，将功能-划分成客户机和服务器后即可基于运行时准则把它们单独分配给各个级。"><a href="#4-客户机-服务器风格能展示构件通过请求其他构件的服务进行交互的过程，将功能-划分成客户机和服务器后即可基于运行时准则把它们单独分配给各个级。" class="headerlink" title="(4)客户机-服务器风格能展示构件通过请求其他构件的服务进行交互的过程，将功能 划分成客户机和服务器后即可基于运行时准则把它们单独分配给各个级。"></a>(4)客户机-服务器风格能展示构件通过请求其他构件的服务进行交互的过程，将功能 划分成客户机和服务器后即可基于运行时准则把它们单独分配给各个级。</h2><h2 id="5-对等连接系统能通过构件之间的直接交换支持服务交换。它是一种调用-返回风格。"><a href="#5-对等连接系统能通过构件之间的直接交换支持服务交换。它是一种调用-返回风格。" class="headerlink" title="(5)对等连接系统能通过构件之间的直接交换支持服务交换。它是一种调用/返回风格。"></a>(5)对等连接系统能通过构件之间的直接交换支持服务交换。它是一种调用/返回风格。</h2><p><img src="/images/ruankao/6-63.png"></p><h2 id="6-通信-进程风格的特征表现在通过各种连接件机制并发执行构件的交互，如通过同-步、消息传递、数据交换、启动和停止等进行交互。"><a href="#6-通信-进程风格的特征表现在通过各种连接件机制并发执行构件的交互，如通过同-步、消息传递、数据交换、启动和停止等进行交互。" class="headerlink" title="(6)通信-进程风格的特征表现在通过各种连接件机制并发执行构件的交互，如通过同 步、消息传递、数据交换、启动和停止等进行交互。"></a>(6)通信-进程风格的特征表现在通过各种连接件机制并发执行构件的交互，如通过同 步、消息传递、数据交换、启动和停止等进行交互。</h2><p><img src="/images/ruankao/6-64.png"></p><h1 id="四、分配视图类型及其风格"><a href="#四、分配视图类型及其风格" class="headerlink" title="四、分配视图类型及其风格"></a>四、分配视图类型及其风格</h1><p>硬件、文件系统和团队结构都会与软件架构进行交互，将软件架构映射到其环境的一般<br>形式称为“分配视图类型”。</p><p><img src="/images/ruankao/6-65.png"></p><p>分配视图类型的三种常见风格为:<br>部置风格:能描述构件和连接件对硬件的映射，硬件是软件执行的场所。<br>实现风格:能描述模块对包含它们的文件系统的映射。<br>工作任务风格:能描述模块对承担模块开发任务的人员、团队或小组的映射。</p><h2 id="1-部置风格体现为-C-amp-C-风格-如通信-进程风格-的元素被分配到执行平台。"><a href="#1-部置风格体现为-C-amp-C-风格-如通信-进程风格-的元素被分配到执行平台。" class="headerlink" title="(1)部置风格体现为 C&amp;C 风格(如通信-进程风格)的元素被分配到执行平台。"></a>(1)部置风格体现为 C&amp;C 风格(如通信-进程风格)的元素被分配到执行平台。</h2><p><img src="/images/ruankao/6-66.png"></p><h2 id="2-实现风格能将模块视图类型中的模块映射到开发基础结构。"><a href="#2-实现风格能将模块视图类型中的模块映射到开发基础结构。" class="headerlink" title="(2)实现风格能将模块视图类型中的模块映射到开发基础结构。"></a>(2)实现风格能将模块视图类型中的模块映射到开发基础结构。</h2><p>实现一个模块总会产 生许多独立文件，必须对这些文件进行组织，以免失去对系统的控制及系统的完整性。通常 利用配置管理技术进行文件管理。</p><p><img src="/images/ruankao/6-67.png"></p><h2 id="3-软件项目的时间和预算估计取决于工作分解结构-WBS-，而工作分解结构则取决-于软件架构。"><a href="#3-软件项目的时间和预算估计取决于工作分解结构-WBS-，而工作分解结构则取决-于软件架构。" class="headerlink" title="(3)软件项目的时间和预算估计取决于工作分解结构(WBS)，而工作分解结构则取决 于软件架构。"></a>(3)软件项目的时间和预算估计取决于工作分解结构(WBS)，而工作分解结构则取决 于软件架构。</h2><p>工作任务风格将软件架构映射到由人组成的团队之中，实现这一项目管理的目 的。</p><p><img src="/images/ruankao/6-68.png"></p><p>工作任务风格与模块分解风格关系密切，它能将模块分解风格用作其分配映射的基础。 这种风格能通过添加与开发工具、测试工具和配置管理系统等对应的模块分解进行扩展。工 作任务风格还通常与其他风格联合使用，例如，团队工作任务可以是模块分解风格中的模块， 可以是分层图中的层，也可以是多进程系统中的任务或进程。</p><h1 id="五、各视图类型间的映射关系"><a href="#五、各视图类型间的映射关系" class="headerlink" title="五、各视图类型间的映射关系"></a>五、各视图类型间的映射关系</h1><p>为了完整地描述一个架构，必须使用多个视图，这些视图必须遵守一定的映射关系。</p><p>(1)模块视图类型中的视图通常会映射到构件和连接件视图类型中的视图。模块实现 单元将映射到运行时构件。</p><p>(2)系统的构件和连接件视图和模块视图之间的关系可能会非常复杂。同样的代码模 块可由 C&amp;C 视图的许多元素执行。反之，C&amp;C 视图的单一构件可执行由许多模块定义的代 码。同样，C&amp;C 构件可能会拥有许多与环境进行交互的点，每个交互点由同一模块接口定 义。</p><p>(3)分配视图类型是为有效地实现软件架构的辅助性视图，它将其他视图类型中的软 件元素映射到软件环境中，即反映其他视图与软件环境之间的关系。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-软件架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构设计（七）软件架构文档化</title>
      <link href="/2021/09/27/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%83%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%96%87%E6%A1%A3%E5%8C%96/"/>
      <url>/2021/09/27/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%83%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%96%87%E6%A1%A3%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>记录软件架构的活动就是架构编档过程，也就是架构的文档化。它包含两个方面:一是 过程，编档过程能促使架构设计师进一步思考，使得架构更加完善;二是结果，描述架构的 文档将作为架构开发的成果，供项目关系人使用。</p><h1 id="1-架构文档的使用者"><a href="#1-架构文档的使用者" class="headerlink" title="1.架构文档的使用者"></a>1.架构文档的使用者</h1><p>架构文档的使用者是架构的项目关系人。编写技术文档(尤其是软件架构文档)最基本 的原则之一是要从读者的角度来编写，易于编写但很难阅读的文档是不受欢迎的。</p><p>架构的主要用途是充当项目关系人之间进行交流的工具，文档则促进了这种交流—— 架 构项目关系人希望从架构文档中获得自己所关心的架构信息。</p><h1 id="2-编档规则"><a href="#2-编档规则" class="headerlink" title="2.编档规则"></a>2.编档规则</h1><p>合理的编档规则编写架构文档和编写其他文档一样，必须遵守一些基本规则，这里 将任何软件编档(包括软件架构编档)的规则归纳为 7 条:</p><p>(1)从读者的角度编写文档。<br>(2)避免出现不必要的重复。<br>(3)避免歧义。<br>(4)使用标准结构。<br>(5)记录基本原理。<br>(6)使文档保持更新，但更新频率不要过高。<br>(7)针对目标的适宜性对文档进行评审。</p><h1 id="3-视图编档"><a href="#3-视图编档" class="headerlink" title="3.视图编档"></a>3.视图编档</h1><p>视图的 概念为架构设计师提供了进行软件架构编档的基本原则。架构文档化就是将相关视图编成文 档，并补充多个视图的关联关系。</p><p><img src="/images/ruankao/6-48.png"></p><p>(1)视图概述:对系统进行概括性的描述，包含视图的主要元素和元素间的关系。<br>主要表示可用多个形式:图形、表 格、文本，通常用图形形式，使用 UML 语言来描述。</p><p>(2)元素目录:对主要表示中所描述的元素及其关系进行详细描述，包括:元素及其 属 性、关系及其属性、元素接口、元素行为。<br>对元素及其协同工作的行为进行编档，如用 UML 的顺序图和状态图描述行为;<br>对接口进行编档如题<br><img src="/images/ruankao/6-49.png"></p><p>(3)上下文图:用图形展示系统如何与其环境相关。</p><p>(4)可变性指南:描述架构的可变化点，如在软件产品线中，产品线架构通过变化， 适用于多个系统，因此，文档中应包含这些变化点，如各系统要做出选择的选项、做出选择 的时间。</p><p>(5)架构背景:为架构的合理性提供足够的、令人信服的论据。包括:基本原理、分 析结果及设计中所反映的假定。</p><p>(6)术语表:对文档中每个术语进行简要说明。</p><p>(7)其他信息:描述不属于架构方面的必要信息，如管理信息(创作者、配置控制数 据及变更历史)。</p><h1 id="4-跨视图文档"><a href="#4-跨视图文档" class="headerlink" title="4.跨视图文档"></a>4.跨视图文档</h1><p>软件架构由多个视图文档来反映，按前面所述的要求完成每个视图的文档后，需要对这 些文档进行一个整体的“打包”工作，这就是跨视图文档。它包括如下内容:<br>(1)文档有哪些内容，它们是如何组织的:视图目录(含哪些视图);视图模板(即前 面描述的视图文档，企业可以通过规范化来定义统一的、公共的视图模板)。<br>(2)架构概述:它描述系统的目的、视图之间的关联、元素表及索引、项目词汇。<br>(3)为什么架构是这样的(基本原理):跨视图基本原理解释了整体架构实际上是其需 求的一个解决方案。即解释了做出决策的原因、方案的限制、改变决策时的影响及意义。</p><h1 id="5-使用-UML"><a href="#5-使用-UML" class="headerlink" title="5.使用 UML"></a>5.使用 UML</h1><p>UML 已经成为对软件架构进行文档化的事实上的标准表示法。在视图文档的组织结构 中，UML 主要用于表示元素或元素组的行为。</p><h1 id="6-软件架构重构"><a href="#6-软件架构重构" class="headerlink" title="6.软件架构重构"></a>6.软件架构重构</h1><p>前面已论述了架构编档，即在架构设计时完成编档工作。但是还有另外一种情况:系统<br>已经存在，但不知其架构，即架构没有通过文档很好地保留下来(文档的缺失/失效)。如何 维护这样的系统并管理其演变?其关键就是要找到软件架构，软件架构重构就是研究解决这 一问题的方法，它是反向工程之一。</p><p>软件架构重构由以下活动组成，这些活动以迭代方式进行。</p><p><img src="/images/ruankao/6-50.png"></p><p>(1)信息提取(View Extraction)。可以使用各种工具进行信息提取，如解析器、语法 分析器等;可以利用 build 和 makefile 文件中关于模块的依赖关系;可以从源代码、编译 时制品和设计制品中提取静态信息;可以使用分析工具提取动态信息。</p><p>(2)数据库构造(Database Construction):将提取的信息转化为标准的形式，并置于 数据库中。</p><p>(3)视图融合(View Fusion):将数据库中的信息组合在一起，生成该架构的一个内聚 的视图。</p><p>(4)重构(Reconstruction):构建数据抽象和各种表示以生成架构表示，主要由两个活动组成:可视化和交互、模式定义和识别。最后生成需要的架构文档(Documentation)。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-软件架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构设计（九）架构及其复用</title>
      <link href="/2021/09/27/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B9%9D%EF%BC%89%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E5%A4%8D%E7%94%A8/"/>
      <url>/2021/09/27/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B9%9D%EF%BC%89%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%85%B6%E5%A4%8D%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>常见的构件(component，组件)的定义如下：</p><p>定义 1:构件是指软件系统中可以明确辨识的构成成分。而可复用构件(reusable component)是指具有相对独立的功能和可复用价值的构件。<br>定义 2:构件是一个组装单元，它具有约定式规范的接口及明确的依赖环境。<br>定义 3:构件是软件系统中具有相对独立功能、可以明确辨识、接口由契约指定、和语 境有明显依赖关系、可独立部署的可组装软件实体。</p><h1 id="一、商用构件标准规范"><a href="#一、商用构件标准规范" class="headerlink" title="一、商用构件标准规范"></a>一、商用构件标准规范</h1><h2 id="1-CORBA"><a href="#1-CORBA" class="headerlink" title="1.CORBA"></a>1.CORBA</h2><p>CORBA(Common ObjectRequest Broker Architecture，公共对象请求代理架构)主要分为 3 个层次:对象请求代理、公共对象服务和公共设施。</p><p>CORBA CCM(CORBA ComponentModel，CORBA 构件模型)是 OMG 组织制定的一个用 于开发和配置分布式应用的服务器端构件模型规范，它主要包括如下 3 项内容。<br>(1)抽象构件模型:用以描述服务器端构件结构及构件间互操作的结构。<br>(2)构件容器结构:用以提供通用的构件运行和管理环境，并支持对安全、事务、持 久状态等系统服务的集成。<br>(3)构件的配置和打包规范:CCM 使用打包技术来管理构件的二进制、多语言版本的 可执行代码和配置信息，并制定了构件包的具体内容和文档内容标准。</p><h2 id="2-J2EE"><a href="#2-J2EE" class="headerlink" title="2.J2EE"></a>2.J2EE</h2><p>在分布式互操作协议上，J2EE 同时支持 RMI(Remote Method Invocation，远程方法调用) 和 IIOP(Internet Inter-ORB Protocol，互联网内部对象请求代理协议)，而在服务器端分布式 应用的构造形式，则包括了 Java Servlet、JSP、EJB 等多种形式，以支持不同的业务需求， 而且 Java 应用程序具有跨平台的特性，使得 J2EE 技术在发布计算领域得到了快速发展。</p><h2 id="3-DNA-2000"><a href="#3-DNA-2000" class="headerlink" title="3.DNA 2000"></a>3.DNA 2000</h2><p>Microsoft DNA 2000 是 Microsoft 在推出 Windows 2000 系列操作系统平台的基础上， 在扩展了分布计算模型，以及改造 Back Office 系列服务器端分布计算产品后发布的新的分 布计算架构和规范。在服务器端，DNA 2000 提供了 ASP、COM、Cluster 等的应用支持。</p><h1 id="二、应用系统簇与构件系统"><a href="#二、应用系统簇与构件系统" class="headerlink" title="二、应用系统簇与构件系统"></a>二、应用系统簇与构件系统</h1><p>除专门开发构件的企业外，开发应用系统的企业也会发展自己的构件应用体系:通常是 随着企业的不断成熟，逐步从已开发的应用系统中整理出来一些构件，反过来，将这些构件 复用到优化与整合已有应用系统中或复用于开发新的应用系统。</p><p>应用系统和构件系统都是系统产品(而不是工作产品)。它们都可以采用模型和结构的 类型定义出来。一般情况下，构件系统只在开发单位内部使用，而应用系统提供给外部客户， 与应用系统相比，构件系统具有通用性，可复用性，这就要求构件系统的开发过程应当实施 更为严格的工程规范。</p><p>应用系统可以向构件系统输入构件(构件的需求源于应用系统或应用系统中的模块)，反 过来，构件系统向应用系统输出构件。这就是构件系统如何获得构件和如何提供构件的方式。</p><h1 id="三、基于复用开发的组织结构"><a href="#三、基于复用开发的组织结构" class="headerlink" title="三、基于复用开发的组织结构"></a>三、基于复用开发的组织结构</h1><p>基于复用的开发组织与传统的开发组织结构不同，它需要有一部分用于开发可复用资产 的资源，这部分资源应同具体应用系统的开发资源分开，以确保不被占用。</p><p>一种较平衡的组织结构如图所示，它有三类职能部门:一是构件系统开发部门， 它开发可复用资产;二是应用系统项目开发部(多个)，它复用资产;三是支持部门，这个 部门是可选的，它进一步隔离上述两主体部门，虽然牺牲了一些效率，但保证了构件的规范 性。它的主要职责是对构件开发部门所提供的可复用资产进行确认、对构件库进行分类编目、 向开发应用系统的工程师们发通告和分发可复用资产、提供必要的文档、从复用者处收集反 馈信息和缺陷报告。<br><img src="/images/ruankao/6-51.png"><br>一方面，构件开发者应当尽量接近应用开发者，以使其开发出的构件能尽量符合实际需 要;另一方面，构件开发者与应用开发者分属两个并列的部门，使构件开发者能摆脱应用项 目的日常压力，保证可复用资产的开发和持续改进。复用经理应当在构件开发和应用 项目开发利益之间进行权衡，保证长期目标不受近期项目压力的影响。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-软件架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构设计（八）软件架构评估</title>
      <link href="/2021/09/27/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%85%AB%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/"/>
      <url>/2021/09/27/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%85%AB%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AF%84%E4%BC%B0/</url>
      
        <content type="html"><![CDATA[<p>软件架构评估是在对架构分析、评估的基础上，对架构策略的选取进行决策。它也可以灵活地运用于对软件架构进行评审等工作中。</p><h1 id="一、软件架构评估的方法"><a href="#一、软件架构评估的方法" class="headerlink" title="一、软件架构评估的方法"></a>一、软件架构评估的方法</h1><p>业界已开发出多种软件架构评估的方法，按基于的技术手段来看，可以分为三类:基于调查问卷或检查表的方式、基于场景的方式和基于度量的方式。</p><h2 id="1-基于调查问卷或检查表的方式"><a href="#1-基于调查问卷或检查表的方式" class="headerlink" title="(1)基于调查问卷或检查表的方式"></a>(1)基于调查问卷或检查表的方式</h2><p>该方式的关键是要设计好问卷或检查表，它充分 利用系统相关人员的经验和知识，获得对架构的评估。其缺点是在很大程度上依赖于评估人 员的主观推断。</p><h2 id="2-基于场景的方式"><a href="#2-基于场景的方式" class="headerlink" title="(2)基于场景的方式"></a>(2)基于场景的方式</h2><p>基于场景的方式由 SEI 首先提出并应用在架构权衡分析法 (Architecture Tradeoff Analysis Method，ATAM)和软件架构分析方法(Software Architecture Analysis Method，SAAM)中。它是通过分析软件架构对场景(也就是对系统的使用或修改 活动)的支持程度，从而判断该架构对这一场景所代表的质量需求的满足程度。</p><h2 id="3-基于度量的方式"><a href="#3-基于度量的方式" class="headerlink" title="(3)基于度量的方式"></a>(3)基于度量的方式</h2><p>它是建立在软件架构度量的基础上的，涉及三个基本活动，首 先需要建立质量属性和度量之间的映射原则，即确定怎样从度量结果推出系统具有什么样的 质量属性;然后从软件架构文档中获取度量信息;最后根据映射原则分析推导出系统的质量 属性。它能提供更为客观和量化的质量评估，但它对评估人员及其使用的技术有较高 的要求。ATAM 中也使用了度量的思想(度量效用)。</p><h1 id="二、架构的权衡分析法"><a href="#二、架构的权衡分析法" class="headerlink" title="二、架构的权衡分析法"></a>二、架构的权衡分析法</h1><p>从技术角度对软件架构进行评估，旨在通过分析来预见软件的质量;通过分析来创建、 选择、评估与比较不同的架构。</p><p>ATAM 方法不但能够揭示架构如何满足特定的质量需求(例如，性能和可修改性)，而且还 提供了分析这些质量需求之间交互作用的方法。使用 ATAM 方法评价一个软件架构的目的 是理解架构设计满足系统质量需求的结果。</p><p>ATAM 产生如下结果。<br>(1)一个简洁的架构表述:ATAM 的一个要求是在一小时内表述架构，这样就得到了 一个简洁、可理解的、面向普通项目关系人的架构表述。它是从架构文档中提炼形成的。<br>(2)表述清楚的业务目标。<br>(3)用场景集合捕获质量需求。<br>(4)架构决策到质量需求的映射。<br>(5)所确定的敏感点和权衡点集合。<br>(6)有风险决策和无风险决策。<br>(7)风险主题的集合。<br>(8)产生一些附属结果。<br>(9)还产生一些无形结果，如能够使项目关系人产生“团队感”，提供了一个交流平台和沟通渠道，使大家更好地理解架构(优势及弱点)。</p><p>ATAM 的 9 个步骤如下。<br>(1)ATAM 方法的表述:评估负责人向参加会议的项目代表介绍 ATAM(简要描述 ATAM步骤和评估的结果)。<br>(2)商业动机的表述。<br>(3)架构的表述。<br>(4)对架构方法进行分类。<br>(5)生成质量属性效用树。<br>根——质量属性——属性求精(细分)——场景(叶)。修剪这棵树，保留重要场景(不超过 50 个)，再对场景按重要性给定 优先级(用 H/M/L 的形式)，再按场景实现的难易度来确定优先级(用 H/M/L 的形式)， 这样对所选定的每个场景就有一个优先级对(重要度，难易度)，如(H，L)表示该场景重要且易实现。<br>(6)分析架构方法。<br>评估小组按优先级对上述效用树的场景进行分析(小组成员提问，设计师回答、解释)，探查实现场景的架构方法。<br>(7)集体讨论并确定场景的优先级。<br>(8)分析架构方法。<br>(9)结果的表述。</p><p>结果的表述包括：<br>已编写了文档的架构方法;<br>经过讨论得到的场景集合及其优先级;<br>效用树;<br>所发现的有风险决策;<br>已编成文档的无风险决策;<br>所发现的敏感点和权衡点。</p><h1 id="三、成本效益分析法"><a href="#三、成本效益分析法" class="headerlink" title="三、成本效益分析法"></a>三、成本效益分析法</h1><p>成本效益分析法(the Cost Benefit Analysis Method，CBAM)是在 ATAM 上构建，用来对架构设计决策的成本和收益进行建模，是优 化此类决策的一种手段。CBAM 的思想就是架构策略影响系统的质量属性，反过来这些质量 属性又会为系统的项目关系人带来一些收益(称为“效用”)，CBAM 协助项目关系人根据其 投资回报(ROI)选择架构策略。CBAM 在 ATAM 结束时开始，它实际上使用了 ATAM 评 估的结果。</p><p>CBAM 的步骤如下。</p><h2 id="1-整理场景。"><a href="#1-整理场景。" class="headerlink" title="(1)整理场景。"></a>(1)整理场景。</h2><p>整理 ATAM 中获取的场景，根据商业目标确定这些场景的优先级，并 选取优先级最高的 1/3 的场景进行分析。</p><h2 id="2-对场景进行求精。"><a href="#2-对场景进行求精。" class="headerlink" title="(2)对场景进行求精。"></a>(2)对场景进行求精。</h2><p>为每个场景获取最坏情况、当前情况、期望情况和最好情况的 质量属性响应级别。</p><h2 id="3-确定场景的优先级。"><a href="#3-确定场景的优先级。" class="headerlink" title="(3)确定场景的优先级。"></a>(3)确定场景的优先级。</h2><p>项目关系人对场景进行投票，其投票是基于每个场景“所期 望的”响应值，根据投票结果和票的权值，生成一个分值(场景的权值)。</p><h2 id="4-分配效用。"><a href="#4-分配效用。" class="headerlink" title="(4)分配效用。"></a>(4)分配效用。</h2><p>对场景的响应级别(最坏情况、当前情况、期望情况和最好情况)确 定效用表。</p><h2 id="5-策略—场景—响应级别"><a href="#5-策略—场景—响应级别" class="headerlink" title="(5)策略—场景—响应级别"></a>(5)策略—场景—响应级别</h2><p>架构策略涉及哪些质量属性及响应级别，形成相关的策略—场景—响应级别的对 应关系。</p><h2 id="6-确定“期望的”效用表"><a href="#6-确定“期望的”效用表" class="headerlink" title="(6)确定“期望的”效用表"></a>(6)确定“期望的”效用表</h2><p>使用内插法确定“期望的”质量属性响应级别的效用。即根据第 4 步的效用表以 及第 5 步的对应关系，确定架构策略及其对应场景的效用表。</p><h2 id="7-计算各架构策略的总收益。"><a href="#7-计算各架构策略的总收益。" class="headerlink" title="(7)计算各架构策略的总收益。"></a>(7)计算各架构策略的总收益。</h2><p>根据第 3 步的场景的权值及第 6 步的架构策略效用 表，计算出架构策略的总收益得分。</p><h2 id="8-确定选取策略的优先级"><a href="#8-确定选取策略的优先级" class="headerlink" title="(8)确定选取策略的优先级"></a>(8)确定选取策略的优先级</h2><p>根据受成本限制影响的 ROI(Return On Investment，投资报酬率)选择架构策略。 根据开发经验估算架构策略的成本，结合第 7 步的收益，计算出架构策略的 ROI，按 ROI 排 序，从而确定选取策略的优先级。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-软件架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构设计（十）产品线及系统演化</title>
      <link href="/2021/09/27/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%8D%81%EF%BC%89%E4%BA%A7%E5%93%81%E7%BA%BF%E5%8F%8A%E7%B3%BB%E7%BB%9F%E6%BC%94%E5%8C%96/"/>
      <url>/2021/09/27/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%8D%81%EF%BC%89%E4%BA%A7%E5%93%81%E7%BA%BF%E5%8F%8A%E7%B3%BB%E7%BB%9F%E6%BC%94%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>软件企业追求长远的发展，通常采用产品线模型及系统演化策略，它实质上是用架构技 术构建产品线，并在此基础上借助复用技术持续演化，不断地推出新产品，满足市场追求产 品升级换代的需求。</p><h1 id="一、复用与产品线"><a href="#一、复用与产品线" class="headerlink" title="一、复用与产品线"></a>一、复用与产品线</h1><p>软件产品线是指一组软件密集型系统，它们共享一个公共的、可管理的特性集，满足某 个特定市场或任务的具体需要，是以规定的方式用公共的核心资产集成开发出来的。即围绕 核心资产库进行管理、复用、集成新的系统。</p><p>核心资产库包括软件架构及其可剪裁的元素， 更广泛地，它还包括设计方案及其文档、用户手册、项目管理的历史记录(如预算和进度)、 软件测试计划和测试用例。</p><p>可复用的资 产非常广，包括以下几点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">需求</span><br><span class="line">架构设计</span><br><span class="line">元素:元素复用不只是简单的代码复用，它旨在捕获并复用设计中的可取之处，避免(不要 重复)设计失败的地方。</span><br><span class="line">建模与分析</span><br><span class="line">测试：如测试用例、测试数据、测试工具，甚至 测试计划、过程、沟通渠道都可以得到复用。</span><br><span class="line">项目规划：利用经验对项目的成本、预算、进度及开发小组的安排等进行预测，即不必每次 都建立工作分解结构。</span><br><span class="line">过程、方法和工具</span><br><span class="line">人员</span><br><span class="line">样本系统:将已部署(投产)的产品作为高质量的演示原型和工程设计原型。</span><br><span class="line">缺陷消除:产品线开发中积累的缺陷消除活动，可使新系统受益</span><br></pre></td></tr></table></figure><h1 id="二、基于产品线的架构"><a href="#二、基于产品线的架构" class="headerlink" title="二、基于产品线的架构"></a>二、基于产品线的架构</h1><p>软件产品线架构是针对一系列产品而设计的通用架构，并在此基础上，进一步将系列产 品共用的模块事先实现，供直接重用;将架构用框架的形式予以实现，供定制使用。这就是 通常所说的“平台”。</p><p>产品线架构较之单个产品架构，有如下三点特别之处:<br>(1)产品线架构必须考虑一系列明确许可的变化;<br>(2)产品线架构一定要文档化;<br>(3)产品线架构必须提供“产品创建者指南”(开发指南)，描述架构的实例化过程。</p><p>产品线的软件架构应将不变的方面提出来，同时， 识别允许的变化，并提供实现它们的机制。通常应考虑三个方面。<br>(1)确定变化点<br>(2)支持变化点<br>(3)对产品线架构的适宜性进行评估。</p><h1 id="三、产品线的开发模型"><a href="#三、产品线的开发模型" class="headerlink" title="三、产品线的开发模型"></a>三、产品线的开发模型</h1><p>开发(确定)产品线的方法有两种模型:<br>(1)“前瞻性”产品线:利用在应用领域的经验、对市场和技术发展趋势的了解及商业 判断力等进行产品线设计，它反映了企业的战略决策。通常是自上而下地采用产品线方法。<br>(2)“反应性”模型:企业根据以前的产品构建产品家族，并随着新产品的开发，扩展<br>架构和设计方案，它的核心资产库是根据“已经证明”为共有、而非“预先计划”为共有的 元素构建的。通常是自下而上地采用产品线方法。</p><h1 id="四、特定领域软件架构"><a href="#四、特定领域软件架构" class="headerlink" title="四、特定领域软件架构"></a>四、特定领域软件架构</h1><p>架构的本质在于其抽象性。它包括两个方面的抽象:业务抽象和技术抽象。其中业务抽 象面向特定的应用领域。</p><p>特定领域软件架构(Domain Specific Software Architecture，DSSA)可以看做开发产品线 的一个方法(或理论)，它的目标就是支持在一个特定领域中有多个应用的生成。</p><p>DSSA 的 必备特征有:<br>(1)一个严格定义的问题域或解决域;<br>(2)具有普遍性，使其可以用于领域中某个特定应用的开发;<br>(3)对整个领域的合适程度的抽象;<br>(4)具备该领域固定的、典型的在开发过程中的可复用元素。</p><p>从功能覆盖的范围角度理解 DSSA 中领域的含义有两种方法:<br>(1)垂直域。定义了一个特定的系统族，导出在该领域中可作为系统的可行解决方案的一个通用软件架构。<br>(2)水平域。定义了在多个系统和多个系统族中功能区域的共有部分，在子系统级上涵盖多个系统(族)的特定部分功能。</p><p>DSSA 的活动阶段如下。<br>(1)领域分析:主要目标是获得领域模型。即通过分析领域中系统的需求(领域需求)，确定哪些需求是被领域中的系统广泛共享的，从而建立领域模型。<br>(2)领域设计:这个阶段的目标是获得 DSSA，它是一个能够适应领域多个系统的需求的一个高层次的设计。由于领域模型中的领域需求具有一定的变化性，DSSA 也要相应地 具有变化性，它可以通过表示多选一的、可选的解决方案等来做到这一点。<br>(3)领域实现:主要目标是依据领域模型和 DSSA 开发与组织可复用信息。这些复用 信息可以是从现有系统中提取得到的，也可能通过新的开发得到。这个阶段可以看作复用基 础设施的实现阶段。</p><p>领域模型的主要作用如下:<br>(1)领域模型为需求定义了领域知识和领域词汇，这较之单一的项目需求更有较好的 大局观;<br>(2)软件界面的设计往往和领域模型关系密切;<br>(3)领域模型的合理性将严重影响软件系统的可扩展性;<br>(4)在分层架构的指导下，领域模型精化后即成为业务层的骨架;<br>(5)领域模型也是其数据模型的基础;<br>(6)领域模型是团队交流的基础，因为它规定了重要的领域词汇表，并且这些词汇的定义是严格的、大家共同认可的。</p><h1 id="五、架构及系统演化"><a href="#五、架构及系统演化" class="headerlink" title="五、架构及系统演化"></a>五、架构及系统演化</h1><p>架构虽然为系统的变化提供了一定的自由度，但是系统的较大变化必然导致架构的改变。 架构(系统)演化是指向既定的方向、可控地改变。架构(系统)演化可以形成产品线，反 过来，架构(系统)可以在规划的产品线中进行演化。</p><p>架构(系统)演化过程包含 7 个步骤：<br>(1)需求变动归类。首先，必须对用户需求的变化进行归类，使变化的需求与已有构 件对应。对找不到对应构件的变动，也要做好标记，在后续工作中，将创建新的构件，以对 应这部分变化的需求。<br>(2)制订架构演化计划。在改变原有结构之前，开发组织必须制订一个周密的架构演 化计划，作为后续演化开发工作的指南。<br>(3)修改、增加或删除构件。在演化计划的基础上，开发人员可根据在第(1)步得到 的需求变动的归类情况，决定是否修改或删除存在的构件、增加新构件。最后，对修改和增 加的构件进行功能性测试。<br>(4)更新构件的相互作用。随着构件的增加、删除和修改，构件之间的控制流必须得 到更新。<br>(5)构件组装与测试。通过组装支持工具把这些构件的实现体组装起来，完成整个软 件系统的连接与合成，形成新的架构。然后，对组装后的系统整体功能和性能进行测试。<br>(6)技术评审。对以上步骤进行确认，进行技术评审。评审组装后的架构是否反映需 求变动，符合用户需求。如果不符合，则需要在第(2)到第(6)步之间进行迭代。<br>(7)产生演化后的架构。在原来系统上所作的所有修改必须集成到原来的架构中，完 成一次演化过程。</p><p><img src="/images/ruankao/6-52.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-软件架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构设计（三）软件架构风格</title>
      <link href="/2021/09/26/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%89%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/"/>
      <url>/2021/09/26/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%89%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>软件架构设计的一个核心问题是能否使用重复的软件架构模式，即能否达到架构级别的 软件重用。</p><p>架构风格反映了领域中众多系统所共有的结构和语义特性，并指导如何将各个模块和子系统有效地组织成一个完整的系统。</p><p>只要系统是使用常用的、规范的方法来组织，就可使别的设计者很容易地理解系统的架构。</p><h1 id="一、软件架构风格分类"><a href="#一、软件架构风格分类" class="headerlink" title="一、软件架构风格分类"></a>一、软件架构风格分类</h1><p>架构风格的最关键的四要素内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">提供一个词汇表</span><br><span class="line">定义一套配置规则</span><br><span class="line">定义一套语义解释原则</span><br><span class="line">定义对基于这种风格的系统所进行的分析</span><br></pre></td></tr></table></figure><h1 id="二、数据流风格"><a href="#二、数据流风格" class="headerlink" title="二、数据流风格"></a>二、数据流风格</h1><p>批处理序列;管道/过滤器。</p><p>这样的架构下，所有的数据按照流的形式在执行过程中前进，不存在结构的反复和重构。</p><p>在流动过程中，数据经过序列间的数据处理组件进行处理，然后将处理结果向后传送，最后进行输出。</p><h2 id="1-批处理序列"><a href="#1-批处理序列" class="headerlink" title="1. 批处理序列"></a>1. 批处理序列</h2><p>批处理风格的每一步处理都是独立的，并且每一步是顺序执行的。只有当前一步处理完，后一步处理才能开始。数据传送在步与步之间作为一个整体。(组件为一系列固定顺序的计 算单元，组件间只通过数据传递交互。每个处理步骤是一个独立的程序，每一步必 须在前一步结束后才能开始，数据必须是完整的，以整体的方式传递)</p><p>批处理的典型应用:<br>(1)经典数据处理;<br>(2)程序开发;<br>(3)Windows 下的 BAT 程序就是这种应用的典型实例。</p><h2 id="2-管道和过滤器"><a href="#2-管道和过滤器" class="headerlink" title="2. 管道和过滤器"></a>2. 管道和过滤器</h2><p>在管道/过滤器风格的软件架构中，每个构件都有一组输入和输出，构件读输入的数据流，经过内部处理，然后产生输出数据流。这个过程通常通过对输入流的变换及增量计算来 完成，所以在输入被完全消费之前，输出便产生了。</p><p>管道/过滤器架构的例子:<br>(1)以 UNIX shell 编写的程序；<br>(2)传统的编译器。</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>(1)使得软构件具有良好的隐蔽性和高内聚、低耦合的特点;<br>(2)允许设计者将整个系统的输入/输出行为看成是多个过滤器的行为的简单合成;<br>(3)支持软件重用<br>(4)系统维护和增强系统性能简单<br>(5)允许对一些如吞吐量、死锁等属性的分析;<br>(6)支持并行执行</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>(1)通常导致进程成为批处理的结构<br>(2)不适合处理交互的应用<br>(3)因为在数据传输上没有通用的标准，每个过滤器都增加了解析和合成数据的工作， 这样就导致了系统性能下降，并增加了编写过滤器的复杂性。</p><h2 id="3-批处理序列风格与管道过滤器风格对比"><a href="#3-批处理序列风格与管道过滤器风格对比" class="headerlink" title="3.批处理序列风格与管道过滤器风格对比"></a>3.批处理序列风格与管道过滤器风格对比</h2><p>共同点:把任务分成一系列固定顺序的计算单元(组件)。组件间只通过数据传递交互。</p><p>区别:批处理是全部的、高潜伏性的，输入时可随机存取，无合作性、无交互性。而管道过滤器是递增的，数据结果延迟小，输入时处理局部化，有反馈、可交互。批处理强调数据传送在步与步之间作为一个整体，而管理过滤器无此要求。</p><h1 id="三、调用-返回风格"><a href="#三、调用-返回风格" class="headerlink" title="三、调用/返回风格"></a>三、调用/返回风格</h1><p>主程序/子程序;面向对象风格;层次结构。</p><p>利用调用-返回实际上是一种分而治之的策略，其主要思想是将一个复杂的大系统分解为一些子系统，以便降低复杂度，并且增加可修改性。</p><h2 id="1-主程序-子程序"><a href="#1-主程序-子程序" class="headerlink" title="1. 主程序/子程序"></a>1. 主程序/子程序</h2><p>主程序/子程序风格是结构化开发时期的经典架构风格。这种风格一般采用单线程控制，把问题划分为若干处理步骤，构件即为主程序和子程序。</p><h2 id="2-面向对象风格"><a href="#2-面向对象风格" class="headerlink" title="2. 面向对象风格"></a>2. 面向对象风格</h2><p>这种风格建立在数据抽象和面向对象的基础上，数据的表示方法和它们的相应操作封装在一个抽象数据类型或对象中。这种风格的构件是对象，或者说是抽象数据类型的实例。</p><p>这种风格的两个重要特征为:<br>(1)对象负责维护其表示的完整性;<br>(2)对象的表示对其他对象而言是隐蔽的。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>(1)因为对象对其他对象隐藏它的表示，所以可以改变一个对象的表示，而不影响其他的对象;<br>(2)设计者可将一些数据存取操作的问题分解成一些交互的代理程序的集合。</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>(1)为了使一个对象和另一个对象通过过程调用等进行交互，必须知道对象的标识。只要一个对象的标识改变了，就必须修改所有其他明确调用它的对象;<br>(2)必须修改所有显式调用它的其他对象，并消除由此带来的一些副作用。例如，如果 A 使用了对象 B，C 也使用了对象 B，那么，C 对 B 的使用所造成的对 A 的影响可能是料想不到的。</p><h3 id="3-层次结构风格"><a href="#3-层次结构风格" class="headerlink" title="3. 层次结构风格"></a>3. 层次结构风格</h3><p>层次系统组织成一个层次结构，每一层为上层服务，并作为下层客户。在一些层次系统中，除了一些精心挑选的输出函数外，内部的层只对相邻的层可见。</p><p>这种风格支持基于可增加抽象层的设计。允许将一个复杂问题分解成一个增量步 骤序列的实现。由于每一层最多只影响两层，同时只要给相邻层提供相同的接口，允许每层 用不同的方法实现，同样为软件重用提供了强大的支持。</p><p>层次系统最广泛的应用是分层通信协议。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>(1)支持基于抽象程度递增的系统设计，使设计者可以把一个复杂系统按递增的步骤进行分解;<br>(2)支持功能增强，因为每一层至多和相邻的上下层交互，因此功能的改变最多影响相邻的上下层;<br>(3)支持重用。只要提供的服务接口定义不变，同一层的不同实现可以交换使用。这样，就可以定义一组标准的接口，而允许各种不同的实现方法。</p><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>(1)并不是每个系统都可以很容易地划分为分层的模式，甚至即使一个系统的逻辑结构是层次化的，出于对系统性能的考虑，系统设计师不得不把一些低级或高级的功能综合起来;<br>(2)很难找到一个合适的、正确的层次抽象方法。</p><h1 id="四、独立构件风格"><a href="#四、独立构件风格" class="headerlink" title="四、独立构件风格"></a>四、独立构件风格</h1><p>进程通信;事件系统。</p><p>独立构件风格主要强调系统中的每个构件都是相对独立的个体，它们之间不直接通信，以降低耦合度，提升灵活性。</p><h2 id="1-进程通信架构风格"><a href="#1-进程通信架构风格" class="headerlink" title="1. 进程通信架构风格"></a>1. 进程通信架构风格</h2><p>构件是独立的过程，连接件是消息传递。这 种风格的特点是构件通常是命名过程，消息传递的方式可以是点到点、异步和同步方式及远 过程调用等。</p><h2 id="2-事件系统风格"><a href="#2-事件系统风格" class="headerlink" title="2. 事件系统风格"></a>2. 事件系统风格</h2><p>基于事件的隐式调用风格的思想是构件不直接调用一个过程，而是触 发或广播一个或多个事件。系统中的其他构件中的过程在一个或多个事件中注册，当一个事 件被触发，系统自动调用在这个事件中注册的所有过程。</p><p>基于事件的隐式调用风格的主要特点是事件的触发者并不知道哪些构件会被这些事件影响。</p><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><p>(1)为软件重用提供了强大的支持。当需要将一个构件加入现存系统中时，只需将它注册到系统的事件中。<br>(2)为改进系统带来了方便。当用一个构件代替另一个构件时，不会影响到其他构件的接口。</p><h3 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h3><p>(1)构件放弃了对系统计算的控制。一个构件触发一个事件时，不能确定其他构件是否会响应它。而且即使它知道事件注册了哪些构件的过程，它也不能保证这些过程被调用的顺序。<br>(2)数据交换的问题。有时数据可被一个事件传递，但另一些情况下，基于事件的系统必须依靠一个共享的仓库进行交互。在这些情况下，全局性能和资源管理便成了问题。<br>(3)既然过程的语义必须依赖于被触发事件的上下文约束，关于正确性的推理存在问题。</p><h1 id="五、虚拟机风格"><a href="#五、虚拟机风格" class="headerlink" title="五、虚拟机风格"></a>五、虚拟机风格</h1><p>解释器;基于规则的系统。</p><p>虚拟机风格的基本思想是人为构建一个运行环境，在这个环境之上，可以解析与运行自定义的一些语言，这样来增加架构的灵活性。</p><h2 id="1-解释器"><a href="#1-解释器" class="headerlink" title="1.解释器"></a>1.解释器</h2><p>一个解释器通常包括完成解释工作的解释引擎，一个包含将被解释的代码的存储区，一 个记录解释引擎当前工作状态的数据结构，以及一个记录源代码被解释执行进度的数据结构。</p><p>解释器通常被用来建立一种虚拟机以弥合程序语义与硬件语义之间的差异。其缺点是执行效率较低。</p><h2 id="2-规则为中心"><a href="#2-规则为中心" class="headerlink" title="2. 规则为中心"></a>2. 规则为中心</h2><p>基于规则的系统包括规则集、规则解释器、规则/数据选择器及工作内存。</p><h1 id="六、仓库风格"><a href="#六、仓库风格" class="headerlink" title="六、仓库风格"></a>六、仓库风格</h1><p>数据库系统;超文本系统;黑板系统。</p><h2 id="1-数据库系统"><a href="#1-数据库系统" class="headerlink" title="1.数据库系统"></a>1.数据库系统</h2><p>数据库架构是库风格最常见的形式。构件主要有两大类，一个是中央共享数据源，保存当前系统的数据状态;另一个是多个独立处理元素，处理元素对数据元素进行操作。</p><h2 id="2-超文本系统"><a href="#2-超文本系统" class="headerlink" title="2.超文本系统"></a>2.超文本系统</h2><p>超文本系统的典型代表，就是早期的静态网页。</p><h2 id="3-黑板系统"><a href="#3-黑板系统" class="headerlink" title="3.黑板系统"></a>3.黑板系统</h2><p>黑板系统是一种问题求解模型，是组织推理的步骤、控制状态数据和问题求解之领域知识的概念框架，它将问题的解空间组织成一个或多个应用相关的分级结构。分级结构的每一层信息由一个唯一的词汇来描述，它代表了问题的部分解。<br><img src="/images/ruankao/6-38.png"></p><p>黑板系统主要由三部分组成:<br>(1)知识源。知识源中包含独立的、与应用程序相关的知识，知识源之间不直接进行 通信，它们之间的交互只通过黑板来完成。<br>(2)黑板数据结构。黑板数据是按照与应用程序相关的层次来组织的解决问题的数据， 知识源通过不断地改变黑板数据来解决问题。<br>(3)控制。控制完全由黑板的状态驱动，黑板状态的改变决定使用的特定知识。</p><hr><p><img src="/images/ruankao/6-39.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-软件架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构设计（六）架构设计</title>
      <link href="/2021/09/26/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%85%AD%EF%BC%89%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/09/26/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%85%AD%EF%BC%89%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>架构模式也称为架构风格，它是适当地选取战术的结果，这些固定的结果(模式)在高 层抽象层次上具有普遍实用性和复用性。</p><p>通过架构模式，架构设计师可以借鉴和复用他人的经验，看看类似的问题别人是如何解 决的。但不要把模式看成是一个硬性的解决方法，它只是一种解决问题的思路。</p><p>“模式和业务构件的区别就在于模式会引发你的思考。”</p><h1 id="1-演变交付生命周期"><a href="#1-演变交付生命周期" class="headerlink" title="1.演变交付生命周期"></a>1.演变交付生命周期</h1><p><img src="/images/ruankao/6-47.png"></p><p>在生命周期模型中，架构设计就是从初步的需求分析开始逐步进行循环迭代。即:一方面在了解系统需求前，不能开始设计架构;另一方 面，刚开始进行设计架构时并不需要等到全部需求都收集到。</p><p>架构由少数关键需 求决定并在循环迭代中处于基本稳定状态，它作为演变的基础设施。</p><h1 id="2-属性驱动设计法"><a href="#2-属性驱动设计法" class="headerlink" title="2.属性驱动设计法"></a>2.属性驱动设计法</h1><p>模型强调先建立软件架构，再把架构作为骨架，在骨架上循环迭代，逐步长出有血 有肉的系统之躯。</p><p>属性驱动设计法(Attribute-Driven Design，ADD)就是一种定义软件架构 的方法，该方法将分解过程建立在软件必须满足的质量属性之上。</p><p>ADD 的输入为:功能需 求(一般表示为用例)、限制条件和质量需求(一组特定于系统的质量场景)。</p><p>ADD 的步骤如下：<br>(1)选择要分解的模块。<br>(2)根据如下步骤对模块进行求精:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">从具体的质量场景和功能需求集合中选择架构驱动因素。</span><br><span class="line">选择满足架构驱动因素的架构模式，根据前面的战术创建(或选择)模式。</span><br><span class="line">实例化模块并根据用例分配功能，使用多个视图进行表示。</span><br><span class="line">定义子模块的接口。</span><br><span class="line">验证用例和质量场景，并对其进行求精，使它们成为子模式的限制。</span><br></pre></td></tr></table></figure><p>(3)对需要进一步分解的每个模块重复上述步骤。</p><h1 id="3-按架构组织开发团队"><a href="#3-按架构组织开发团队" class="headerlink" title="3.按架构组织开发团队"></a>3.按架构组织开发团队</h1><p>像软件系统一样，开发小组也应该努力做到松耦合、高内聚。</p><p>项目计划在架构确定之后可以结合分工进一步明细化，特别要规划好接口提供的 时间点，保证项目开发的整体协调性。</p><h1 id="4-开发骨架系统"><a href="#4-开发骨架系统" class="headerlink" title="4.开发骨架系统"></a>4.开发骨架系统</h1><p>演变交付生命周期模型中有两个循环，第一个循环是通过迭代的方式开发出软件架构， 第二个循环是在架构的基础上通过迭代的方式开发出交付的最终版本。开发骨架系统就是第 二个循环的第一步。</p><h1 id="5-利用商用构件进行开发"><a href="#5-利用商用构件进行开发" class="headerlink" title="5.利用商用构件进行开发"></a>5.利用商用构件进行开发</h1><p>模式本来就是针对特定问题的解，因此，针对需求的特点，也可以选用相应的模式来设 计架构，并利用对应于该模式的商用构件进行软件开发。例如可以使用 J2EE/EJB 进行开发 面向对象的分布式系统。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-软件架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构设计（四）层次系统架构风格</title>
      <link href="/2021/09/26/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%9B%9B%EF%BC%89%E5%B1%82%E6%AC%A1%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/"/>
      <url>/2021/09/26/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%9B%9B%EF%BC%89%E5%B1%82%E6%AC%A1%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="一、二层及三层-C-S-架构风格"><a href="#一、二层及三层-C-S-架构风格" class="headerlink" title="一、二层及三层 C/S 架构风格"></a>一、二层及三层 C/S 架构风格</h1><h2 id="二层架构"><a href="#二层架构" class="headerlink" title="二层架构"></a>二层架构</h2><p>C/S 架构是基于资源不对等，且为实现共享而提出来的，是 20 世纪 90 年代成熟起来 的技术，C/S 结构将应用一分为二，服务器(后台)负责数据管理，客户机(前台)完成与 用户的交互任务。</p><h3 id="二层架构优点"><a href="#二层架构优点" class="headerlink" title="二层架构优点"></a>二层架构优点</h3><p>具有强大的数据操作和事务处理能力，模型思想简单，易于人们理解和接受</p><h3 id="二层架构缺点"><a href="#二层架构缺点" class="headerlink" title="二层架构缺点"></a>二层架构缺点</h3><p>单一服务器且以局域网为中心<br>软、硬件的组合及集成能力有限;<br>服务器的负荷太重，难以管理大量的客户机，系统的性能容易变坏;<br>数据安全性不好。</p><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>三层 C/S 结构是 将应用功能分成表示层、功能层和数据层三个部分。</p><p><img src="/images/ruankao/6-40.png"></p><h1 id="二、B-S架构风格"><a href="#二、B-S架构风格" class="headerlink" title="二、B/S架构风格"></a>二、B/S架构风格</h1><p>浏览器/服务器(Browser/Server，简称 B/S)风格就是上述三层应用结构的一种实现方 式，其具体结构为:浏览器/Web 服务器/数据库服务器。</p><p>在 B/S 结构中，除了数据库服务器外，应用程序以网页形式存放于 Web 服务器上，用户运行某个应用程序时只需在客户端上的浏览器中键入相应的网址，调用 Web 服务器上 的应用程序并对数据库进行操作完成相应的数据处理工作，最后将结果通过浏览器显示给用 户。可以说，在 B/S 模式的计算机应用系统中，应用(程序)在一定程度上具有集中特征。</p><h2 id="B-S架构优点"><a href="#B-S架构优点" class="headerlink" title="B/S架构优点"></a>B/S架构优点</h2><p>B/S 架构主要是利用不断成熟的 WWW 浏览器技术，结合浏览器的多种脚本语言，用 通用浏览器就实现了原来需要复杂的专用软件才能实现的强大功能，并节约了开发成本。</p><h2 id="B-S架构缺点"><a href="#B-S架构缺点" class="headerlink" title="B/S架构缺点"></a>B/S架构缺点</h2><p>与 C/S 架构相比，B/S 架构也有许多不足之处，例如:<br>(1)B/S 架构缺乏对动态页面的支持能力，没有集成有效的数据库处理功能。<br>(2)采用 B/S 架构的应用系统，在数据查询等响应速度上，要远远地低于 C/S 架构。<br>(3)B/S 架构的数据提交一般以页面为单位，数据的动态交互性不强，不利于在线事 务处理(OnLine Transaction Processing，简称 OLTP)应用。</p><h1 id="三、MVC-架构风格"><a href="#三、MVC-架构风格" class="headerlink" title="三、MVC 架构风格"></a>三、MVC 架构风格</h1><p>MVC 全名是 Model ViewController，是模型(model)-视图(view)-控制器(controller)的 缩写，它是分层架构风格的一种。</p><p>MVC 提出的基本思想是进行关注点分 离。一个典型的人机交互应用具有三个主要的关注点:数据在可视化界面上的呈现、UI 处 理逻辑和业务逻辑。</p><p>传统的自治视图模式(即将与 UI 相关的逻辑都定义在针对视图 的相关元素的事件上)，将三者混合在一起会带来一下问题：</p><p>(1)业务逻辑是与 UI 无关的，应该最大限度地被重用。由于业务逻辑定义在自治视 图中，相当于完全与视图本身绑定在一定，如果我们能够将 UI 的行为抽象出来，基于抽象 化 UI 的处理逻辑也是可以被共享的。但是定义在自治视频中的 UI 处理逻辑完全丧失了重 用的可能。<br>(2)业务逻辑具有最强的稳定性，UI 处理逻辑次之，而可视化界面上的呈现最差(比如我们经常会为了更好地呈现效果来调整 HTML)。如果将具有不同稳定性的元素融为一体，那么具有最差稳定性的元素决定了整体的稳定性。<br>(3)任何涉及 UI 的组件都不易测试。UI 是呈现给人看的，并且用于人机交互，用机 器来模拟活生生的人来对组件实施自动化测试不是一件容易的事，自治视图严重损害了组件 的可测试性。</p><p><img src="/images/ruankao/6-41.png"></p><h1 id="四、MVP-架构风格"><a href="#四、MVP-架构风格" class="headerlink" title="四、MVP 架构风格"></a>四、MVP 架构风格</h1><p>MVP 是从经典的模式 MVC 演变而来。</p><p>MVC 模式中元素之间“混乱”的交互主要体现在允许 View 和 Model 直接进行“交流”，这在 MVP 模式中是不允许的。</p><p>MVP 不仅仅避免了 View 和 Model 之间的耦合，还进一步降低了 Presenter 对 View 的依赖。</p><p><img src="/images/ruankao/6-42.png"></p><h2 id="MVP-的优点"><a href="#MVP-的优点" class="headerlink" title="MVP 的优点"></a>MVP 的优点</h2><p>(1)模型与视图完全分离，我们可以修改视图而不影响模型。 (2)可以更高效地使用模型，因为所有的交互都发生在一个地方—Presenter 内部。<br>(3)我们可以将一个 Presenter 用于多个视图，而不需要改变 Presenter 的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁。<br>(4)如果我们把逻辑放在 Presenter 中，那么我们就可以脱离用户接口来测试这些逻辑(单元测试)。</p><h2 id="MVP-的缺点"><a href="#MVP-的缺点" class="headerlink" title="MVP 的缺点"></a>MVP 的缺点</h2><p>（1）由于对视图的渲染放在了 Presenter 中，所以视图和 Presenter 的交互会过于频繁。<br>（2）如果 Presenter 过多地渲染了视图，往往会使得它与特定的视图的联系过 于紧密。一旦视图需要变更，那么 Presenter 也需要变更了。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-软件架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构设计（五）面向服务的架构</title>
      <link href="/2021/09/26/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%94%EF%BC%89%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9E%B6%E6%9E%84/"/>
      <url>/2021/09/26/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%94%EF%BC%89%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>迄今为止，对于面向服务的架构(Service-Oriented Architecture，SOA)还没有一个公认 的定义。许多组织从不同的角度和不同的侧面对 SOA 进行了描述，较为典型的有以下三个:</p><p>(1)W3C 的定义:SOA 是一种应用程序架构，在这种架构中，所有功能都定义为独 立的服务，这些服务带有定义明确的可调用接口，能够以定义好的顺序调用这些服务来形成 业务流程。</p><p>(2)Service-architecture.com 的定义:服务是精确定义、封装完善、独立于其他服务 所处环境和状态的函数。SOA 本质上是服务的集合，服务之间彼此通信，这种通信可能是 简单的数据传送，也可能是两个或更多的服务协调进行某些活动。服务之间需要某些方法进 行连接。</p><p>(3)Gartner 的定义:SOA 是一种 C/S 架构的软件设计方法，应用由服务和服务使用 者组成，SOA 与大多数通用的 C/S 架构模型不同之处，在于它着重强调构件的松散耦合， 并使用独立的标准接口。</p><h1 id="一、SOA概述"><a href="#一、SOA概述" class="headerlink" title="一、SOA概述"></a>一、SOA概述</h1><p>SOA 是一种在计算环境中设计、开发、部署和管理离散逻辑单元(服务)模型的方法。 SOA 并不是一个新鲜事物，而只是面向对象模型的一种替代。虽然基于 SOA 的系统并不排 除使用 OOD 来构建单个服务，但是其整体设计却是面向服务的。由于 SOA 考虑到了系统 内的对象，所以虽然 SOA 是基于对象的，但是作为一个整体，它却不是面向对象的。</p><p><img src="/images/ruankao/6-43.png"></p><p>在 SOA 模型中，所有的功能都定义成了独立的服务。服务之间通过交互和协调完成业 务的整体逻辑。所有的服务通过服务总线或流程管理器来连接。这种松散耦合的架构使得各 服务在交互过程中无需考虑双方的内部实现细节，以及部署在什么平台上。</p><h2 id="1-服务的基本结构"><a href="#1-服务的基本结构" class="headerlink" title="1. 服务的基本结构"></a>1. 服务的基本结构</h2><p><img src="/images/ruankao/6-44.png"></p><p>服务模型的表示层从逻辑层分离出来，中间增加了服务对外的接 口层。通过服务接口的标准化描述，使得服务可以提供给在任何异构平台和任何用户接口使 用。这允许并支持基于服务的系统成为松散耦合、面向构件和跨技术实现，服务请求者很可 能根本不知道服务在哪里运行、是由哪种语言编写的，以及消息的传输路径，而是只需要提 出服务请求，然后就会得到答案。</p><h2 id="2-SOA-设计原则"><a href="#2-SOA-设计原则" class="headerlink" title="2.SOA 设计原则"></a>2.SOA 设计原则</h2><p>在 SOA 架构中，继承了来自对象和构件设计的各种原则。</p><p>关于服务，一些常见的设计原则如下:</p><h3 id="1-明确定义的接口。"><a href="#1-明确定义的接口。" class="headerlink" title="(1)明确定义的接口。"></a>(1)明确定义的接口。</h3><p>服务请求者依赖于服务规约来调用服务，因此，服务定义必须 长时间稳定，一旦公布，不能随意更改;服务的定义应尽可能明确，减少请求者的不适当使 用;不要让请求者看到服务内部的私有数据。</p><h3 id="2-自包含和模块化。"><a href="#2-自包含和模块化。" class="headerlink" title="(2)自包含和模块化。"></a>(2)自包含和模块化。</h3><p>服务封装了那些在业务上稳定、重复出现的活动和构件，实现 服务的功能实体是完全独立自主的，独立进行部署、版本控制、自我管理和恢复。</p><h3 id="3-粗粒度。"><a href="#3-粗粒度。" class="headerlink" title="(3)粗粒度。"></a>(3)粗粒度。</h3><p>服务数量不应该太多，依靠消息交互而不是远程过程调用，通常消息量 比较大，但是服务之间的交互频度较低。</p><h3 id="4-松耦合。"><a href="#4-松耦合。" class="headerlink" title="(4)松耦合。"></a>(4)松耦合。</h3><p>服务请求者可见的是服务的接口，其位置、实现技术、当前状态和私有 数据等，对服务请求者而言是不可见的。</p><h3 id="5-互操作性、兼容和策略声明。"><a href="#5-互操作性、兼容和策略声明。" class="headerlink" title="(5)互操作性、兼容和策略声明。"></a>(5)互操作性、兼容和策略声明。</h3><p>为了确保服务规约的全面和明确，策略成为一个越 来越重要的方面。</p><h2 id="3-服务构件与传统构件"><a href="#3-服务构件与传统构件" class="headerlink" title="3. 服务构件与传统构件"></a>3. 服务构件与传统构件</h2><p>服务构件架构(Service Component Architecture，SCA)是基于 SOA 的思想描述服务之间组合和协作的规范，它描述用于使用 SOA 构建应用程序和系统的模型。它可简化使用 SOA 进行的应用程序开发和实现工作。SCA 提供了构建粗粒度构件的机制，这些粗粒度构 件由细粒度构件组装而成。SCA 将传统中间件编程从业务逻辑分离出来，从而使程序员免 受其复杂性的困扰。它允许开发人员集中精力编写业务逻辑，而不必将大量的时间花费在更 为底层的技术实现上。</p><p>SCA 服务构件与传统构件的主要区别在于，服务构件往往是粗粒度的，而传统构件以 细粒度居多;服务构件的接口是标准的，主要是服务描述语言接口，而传统构件常以具体 API 形式出现;服务构件的实现与语言是无关的，而传统构件常绑定某种特定的语言;服务构件 可以通过构件容器提供 QoS 的服务，而传统构件完全由程序代码直接控制。</p><h1 id="二、SOA-的关键技术"><a href="#二、SOA-的关键技术" class="headerlink" title="二、SOA 的关键技术"></a>二、SOA 的关键技术</h1><p>SOA 是一种全新的架构，为了支持其各种特性，相关的技 术规范不断推出。与 SOA 紧密相关的技术主要有 UDDI、WSDL、SOAP 和 REST 等，而这 些技术都是以 XML 为基础而发展起来的。</p><h2 id="1-UDDI"><a href="#1-UDDI" class="headerlink" title="1. UDDI"></a>1. UDDI</h2><p>UDDI(Universal DescriptionDiscovery and Integration，统一描述、发现和集成)提供了 一种服务发布、查找和定位的方法，是服务的信息注册规范，以便被需要该服务的用户发现 和使用它。UDDI 规范描述了服务的概念，同时也定义了一种编程接口。通过 UDDI 提供的 标准接口，企业可以发布自己的服务供其他企业查询和调用，也可以查询特定服务的描述信 息，并动态绑定到该服务上。</p><p>UDDI包括：<br>(1)数据模型。UDDI 数据模型是一个用于描述业务组织和服务的 XML Schema。<br>(2)API。UDDI API 是一组用于查找或发布 UDDI 数据的方法，UDDI API 基于 SOAP。<br>(3)注册服务。UDDI 注册服务是 SOA 中的一种基础设施，对应着服务注册中心的角<br>色。</p><h2 id="2-WSDL"><a href="#2-WSDL" class="headerlink" title="2.WSDL"></a>2.WSDL</h2><p>WSDL(Web ServiceDescription Language，Web 服务描述语言)是对服务进行描述的语言，它有一套基于 XML 的语法定义。WSDL 描述的重点是服务，它包含服务实现定义和服 务接口定义。</p><p><img src="/images/ruankao/6-45.png"><br>服务实现定义描述了给定服务提供者如何实现特定的服务接口。服务实现定义中包含服 务和端口描述。一个服务往往会包含多个服务访问入口，而每个访问入口都会使用一个端口 元素来描述，端口描述的是一个服务访问入口的部署细节，例如，通过哪个地址来访问，应 当使用怎样的消息调用模式来访问等。</p><h2 id="3-SOAP"><a href="#3-SOAP" class="headerlink" title="3.SOAP"></a>3.SOAP</h2><p>SOAP(Simple ObjectAccess Protocol，简单对象访问协议)定义了服务请求者和服务提 供者之间的消息传输规范。SOAP 用 XML 来格式化消息，用 HTTP 来承载消息。通过 SOAP， 应用程序可以在网络中进行数据交换和远程过程调用(Remote Procedure Call， RPC)</p><p>SOAP 主要包括以下四个部分:</p><p>(1)封装。SOAP 封装定义了一个整体框架，用来表示消息中包含什么内容，谁来处 理这些内容，以及这些内容是可选的还是必需的。<br>(2)编码规则。SOAP 编码规则定义了一种序列化的机制，用于交换系统所定义的数 据类型的实例。<br>(3)RPC 表示。SOAP RPC 表示定义了一个用来表示远程过程调用和应答的协议。<br>(4)绑定。SOAP 绑定定义了一个使用底层传输协议来完成在节点之间交换 SOAP 封 装的约定。</p><p>SOAP 消息包括以下三个部分:</p><p>(1)封装(信封)。封装的元素名是 Envelope，在表示消息的 XML 文档中，封装是顶 层元素，在 SOAP 消息中必须出现。<br>(2)SOAP 头。SOAP 头的元素名是 Header，提供了向 SOAP 消息中添加关于这条 SOAP 消息的某些要素的机制。<br>(3)SOAP 体。SOAP 体的元素名是 Body，是包含消息的最终接收者想要的信息的容 器。</p><h2 id="4-REST"><a href="#4-REST" class="headerlink" title="4.REST"></a>4.REST</h2><p>REST(RepresentationalState Transfer，表述性状态转移)是一种只使用 HTTP 和 XML 进 行基于 Web 通信的技术，可以降低开发的复杂性，提高系统的可伸缩性。它的简单性和缺 少严格配置文件的特性，使它与 SOAP 很好地隔离开来，REST 从根本上来说只支持几个操 作(POST、GET、PUT 和 DELETE)，这些操作适用于所有的消息。</p><p>REST 提出了如下一些设 计概念和准则:<br>(1)网络上的所有事物都被抽象为资源。<br>(2)每个资源对应一个唯一的资源标识。<br>(3)通过通用的连接件接口对资源进行操作。<br>(4)对资源的各种操作不会改变资源标识。<br>(5)所有的操作都是无状态的。</p><h1 id="三、SOA-的实现方法"><a href="#三、SOA-的实现方法" class="headerlink" title="三、SOA 的实现方法"></a>三、SOA 的实现方法</h1><p>SOA 只是一种概念和思想，需要借助于具体的技术和方法来实现它。从本质上来看， SOA 是用本地计算模型来实现一个分布式的计算应用，也有人称这种方法为“本地化设计，分布式工作”模型。CORBA、DCOM 和 EJB 等都属于这种解决方式。</p><p>从逻辑上和高层抽象来看，目前，实现 SOA 的方法也比较多，其中主流方式有 Web Service、企业服务总线和服务注册表。</p><h2 id="1-Web-Service"><a href="#1-Web-Service" class="headerlink" title="1.Web Service"></a>1.Web Service</h2><p>在 Web Service(Web 服务)的解决方案中，一共有三种工作角色，其中服务提供者和 服务请求者是必需的，服务注册中心是一个可选的角色。</p><p><img src="/images/ruankao/6-46.png"></p><p>在采用 Web Service 作为 SOA 的实现技术时，应用系统大致可以分为六个层次，分别 是底层传输层、服务通信协议层、服务描述层、 服务层、业务流程层和服务注册层。</p><h3 id="1-底层传输层。"><a href="#1-底层传输层。" class="headerlink" title="(1)底层传输层。"></a>(1)底层传输层。</h3><p>底层传输层主要负责消息的传输机制，HTTP、JMS(Java Messaging Service，Java 消息服务)和 SMTP 都可以作为服务的消息传输协议，其中 HTTP 使用最广。</p><h3 id="2-服务通信协议层。"><a href="#2-服务通信协议层。" class="headerlink" title="(2)服务通信协议层。"></a>(2)服务通信协议层。</h3><p>服务通信协议层的主要功能是描述并定义服务之间进行消息传 递所需的技术标准，常用的标准是 SOAP 和 REST 协议。</p><h3 id="3-服务描述层。"><a href="#3-服务描述层。" class="headerlink" title="(3)服务描述层。"></a>(3)服务描述层。</h3><p>服务描述层主要以一种统一的方式描述服务的接口与消息交换方式， 相关的标准是 WSDL。</p><h3 id="4-服务层。"><a href="#4-服务层。" class="headerlink" title="(4)服务层。"></a>(4)服务层。</h3><p>服务层的主要功能是将遗留系统进行包装，并通过发布的 WSDL 接口描 述被定位和调用。</p><h3 id="5-业务流程层。"><a href="#5-业务流程层。" class="headerlink" title="(5)业务流程层。"></a>(5)业务流程层。</h3><p>业务流程层的主要功能是支持服务发现，服务调用和点到点的服务 调用，并将业务流程从服务的底层调用抽象出来。</p><h3 id="6-服务注册层"><a href="#6-服务注册层" class="headerlink" title="(6)服务注册层"></a>(6)服务注册层</h3><p>服务注册层的主要功能是使服务提供者能够通过 WSDL 发布服务定义，并支持服 务请求者查找所需的服务信息。相关的标准是 UDDI。</p><h2 id="2-服务注册表"><a href="#2-服务注册表" class="headerlink" title="2. 服务注册表"></a>2. 服务注册表</h2><p>服务注册表(service registry)虽然也具有运行时的功能，但主要在 SOA 设计时使用。</p><p>服务注册表可以包括有关服务和相关构件的配置、依从性和 约束文件。</p><p>大多数商用服务注册产品支持服务注册、服务位置和服务绑定功能。</p><h2 id="3-企业服务总线ESB"><a href="#3-企业服务总线ESB" class="headerlink" title="3. 企业服务总线ESB"></a>3. 企业服务总线ESB</h2><p>ESB 是由中间件技术实现并支持 SOA 的一组基础架构，是传统中间件技术与 XML、 Web Service 等技术结合的产物，是在整个企业集成架构下的面向服务的企业应用集成机制。</p><p>ESB 具有以下功能:<br>(1)支持异构环境中的服务、消息和基于事件的交互，并且具有适当的服务级别和可 管理性。<br>(2)通过使用 ESB，可以在几乎不更改代码的情况下，以一种无缝的非侵入方式使现 有系统具有全新的服务接口，并能够在部署环境中支持任何标准。<br>(3)充当缓冲器的 ESB(负责在诸多服务之间转换业务逻辑和数据格式)与服务逻辑 相分离，从而使不同的系统可以同时使用同一个服务，不用在系统或数据发生变化时，改动 服务代码。<br>(4)在更高的层次，ESB 还提供诸如服务代理和协议转换等功能。允许在多种形式下 通过像 HTTP、SOAP 和 JMS 总线的多种传输方式，主要是以网络服务的形式，为发表、注 册、发现和使用企业服务或界面提供基础设施。<br>(5)提供可配置的消息转换翻译机制和基于消息内容的消息路由服务，传输消息到不 同的目的地。<br>(6)提供安全和拥有者机制，以保证消息和服务使用的认证、授权和完整性。</p><p>与现存的、专有的集成解决方案相比，ESB 具有以下优势:</p><p>(1)扩展的、基于标准的连接。ESB 形成一个基于标准的信息骨架，使得在系统内部<br>和整个价值链中可以容易地进行异步或同步数据交换。ESB 通过使用 XML、SOAP 和其他标 准，提供了更强大的系统连接性。<br>(2)灵活的、服务导向的应用组合。基于 SOA，ESB 使复杂的分布式系统(包括跨多 个应用、系统和防火墙的集成方案)能够由以前开发测试过的服务组合而成，使系统具有高 度可扩展性。<br>(3)提高复用率，降低成本。按照 SOA 方法构建应用，提高了复用率，简化了维护 工作，进而减少了系统总体成本。<br>(4)减少市场反应时间，提高生产率。ESB 通过构件和服务复用，按照 SOA 的思想 简化应用组合，基于标准的通信、转换和连接来实现这些优点。</p><h1 id="四、微服务"><a href="#四、微服务" class="headerlink" title="四、微服务"></a>四、微服务</h1><p>它属于面向服务架构的一种。<br>微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小 的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进 程中，服务与服务间采用轻量级的通信机制互相沟通(通常是基于 HTTP 协议的 RESTful API)。每个服务都围绕着具体业务进行构建，并且能够被独立的部署到生产环境、类生产环 境等。</p><p>另外，应当尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根 据业务上下文，选择合适的语言、工具对其进行构建。</p><p>所以总结起来，微服务的核心特点为:小, 且专注于做一件事情、轻量级的通信机制、松耦合、独立部署。</p><h2 id="1-微服务的优势"><a href="#1-微服务的优势" class="headerlink" title="1.微服务的优势"></a>1.微服务的优势</h2><h3 id="1-技术异构性"><a href="#1-技术异构性" class="headerlink" title="(1)技术异构性"></a>(1)技术异构性</h3><p>在微服务架构中，每个服务都是一个相对独立的个体，每个服务都可以选择适合于自身 的技术来实现。</p><p>同时，在应用新技术时，微服务架构也提供了更好的试验场。</p><h3 id="2-弹性"><a href="#2-弹性" class="headerlink" title="(2)弹性"></a>(2)弹性</h3><p>弹性主要讲的是系统中一部分出现故障会引起多大问题。<br>微服务架构中，每个服务可以内置可用性的解决方 案 与功能降级方案，所以比单块系统强。</p><h3 id="3-扩展"><a href="#3-扩展" class="headerlink" title="(3)扩展"></a>(3)扩展</h3><p>在微服务架构中，可以针对单个服务进行扩展。</p><h3 id="4-简化部署"><a href="#4-简化部署" class="headerlink" title="(4)简化部署"></a>(4)简化部署</h3><p>在大型单块系统中，即使修改一行代码，也需要重新部署整个应用系统。<br>微服务架构中，每个服务的部署都是独立的，这样就可以更快地对特定部分的代码进行部署。</p><h3 id="5-与结织结构相匹配"><a href="#5-与结织结构相匹配" class="headerlink" title="(5)与结织结构相匹配"></a>(5)与结织结构相匹配</h3><p>微服务架构可以将架构与组织结构相匹配，避免出现过大的代码库，从而获得 理想的团队大小及生产力。服务的所有权也可以在团队之 间迁移，从而避免异地团队的出 现。</p><h3 id="6-可组合性"><a href="#6-可组合性" class="headerlink" title="(6)可组合性"></a>(6)可组合性</h3><p>在微服务架构中，系统会开放很多接口供外部使用。当情况发生改变时，可以使用不同的方式构建应用，而整体化应用程序只能提供一个非常粗粒度的接口供外部使用。</p><h3 id="7-对可替代性的优化"><a href="#7-对可替代性的优化" class="headerlink" title="(7)对可替代性的优化"></a>(7)对可替代性的优化</h3><p>在微服务架构中，我们可以在需要时轻易地重写服务， 或者删除不再使用的服务。</p><h2 id="2-微服务面临的挑战"><a href="#2-微服务面临的挑战" class="headerlink" title="2. 微服务面临的挑战"></a>2. 微服务面临的挑战</h2><h3 id="1-分布式系统的复杂度"><a href="#1-分布式系统的复杂度" class="headerlink" title="(1)分布式系统的复杂度"></a>(1)分布式系统的复杂度</h3><p>使用微服务实现分布式系统的复杂度要比单块系统高。</p><h3 id="2-运维成本"><a href="#2-运维成本" class="headerlink" title="(2)运维成本"></a>(2)运维成本</h3><p>在微服务架构下，随着服务数量的增多，每个服务都需要独立的配置、部署、 监控、日志收集等，因此成本呈指数级增长。</p><h3 id="3-部署自动化"><a href="#3-部署自动化" class="headerlink" title="(3)部署自动化"></a>(3)部署自动化</h3><p>传统单块系统手动部署是 可以满足需求的。<br>对于微服务架构而言，如何有效地构建自 动化部署流水线，降低部署成本、提高部署频率，是微服务架构下需要面临的一个挑战。。</p><h3 id="4-DevOps-与组织结构"><a href="#4-DevOps-与组织结构" class="headerlink" title="(4)DevOps 与组织结构"></a>(4)DevOps 与组织结构</h3><p>传统单块架构中，团队通常是按技能划分，并通过项目的 方式协作，完成系统交付。</p><p>在微服务架构的实施过程中，除了如上所述的交付、运维上存 在的挑战，在组织或者团队层面，如何传递 DevOps 文化的价值，让团队理解 DevOps 文化的价值，并构建全功能团队，也是一个不小的挑战。</p><h3 id="5-服务间依赖测试"><a href="#5-服务间依赖测试" class="headerlink" title="(5)服务间依赖测试"></a>(5)服务间依赖测试</h3><p>在服务数量较多的情况下，如何有效地保证服务之间能有效按照接口的约定正常工作， 成为微服务实施过程中必须面临的巨大挑战。</p><h3 id="6-服务间依赖管理"><a href="#6-服务间依赖管理" class="headerlink" title="(6)服务间依赖管理"></a>(6)服务间依赖管理</h3><p>随着微服 务个数的增多，如何清晰有效地展示服务之间的依赖关系，成为了一个挑战。</p><h2 id="3-微服务与-SOA"><a href="#3-微服务与-SOA" class="headerlink" title="3.微服务与 SOA"></a>3.微服务与 SOA</h2><p>微服务可以讲是 SOA 的一种，但他们也有一些差异。</p><table><thead><tr><th>微服务</th><th>SOA</th></tr></thead><tbody><tr><td>能拆分的就拆分</td><td>是整体的，服务能放一起的就放一起</td></tr><tr><td>纵向业务划分</td><td>水平分多层</td></tr><tr><td>单一组织负责</td><td>按层次划分不同部门的组织负责</td></tr><tr><td>细粒度</td><td>粗粒度</td></tr><tr><td>两句话可以解释明白</td><td>几百字是相当于SOA的目录</td></tr><tr><td>独立的子公司</td><td>类似大公司里面划分了一些业务单元</td></tr><tr><td>组件小</td><td>存在较复杂的组件</td></tr><tr><td>业务逻辑存在于每一个服务中</td><td>业务逻辑很卡多个业务领域</td></tr><tr><td>使用轻量级的通信方式</td><td>ESB充当了服务之间通信的角色</td></tr></tbody></table><p>实现方面的差异：</p><table><thead><tr><th>微服务架构实现</th><th>SOA实现</th></tr></thead><tbody><tr><td>团队级，自底向上开展实施</td><td>企业级，自顶向下开展实施</td></tr><tr><td>一个系统被拆分成多个服务，粒度细</td><td>服务由多个子系统组成，粒度大</td></tr><tr><td>无集中式总线，松散的服务架构</td><td>企业服务总线，集中式的服务架构</td></tr><tr><td>集成方式简单</td><td>集成方式复杂</td></tr><tr><td>服务能独立部署</td><td>单块架构系统，互相依赖，部署复杂</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-软件架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构设计（一）软件架构概述</title>
      <link href="/2021/09/25/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/09/25/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>通俗地讲，软件架构设计就是软件系统的“布局谋篇”。</p><p>软件架构的研究内容主要涉及软件架构描述、软件架构设计、软件架构风格、软件架构评价和软件架构的形成方法等。</p><p>软件设计人员学习软件架构知识旨在站在较高的层面上整体地解决好软件的设计、复用、质量和维护等方面的实际问题。</p><hr><p>软件架构是软件抽象发展到一定阶段的产物，从编程的角度，可以清晰地看到软件抽象 层次和表达工具的发展历史。</p><p>20 世纪 60 年代是子程序的年代:出现了原始的软件架构，即子程序，并以程序间的调用为连接关系。</p><p>20 世纪 70 年代是模块化的年代:出现了数据流分析、实体—关系图(E-R 图)、信息隐藏等工具和方法，软件的抽象层次发展到了模块级。</p><p>20 世纪 80 年代是面向对象的年代:基于模块化的编程语言进一步发展成面向对象的语言，继承性地增加了一种新元素之间的连接关系。</p><p>20 世纪 90 年代是框架的年代:标准的基于对象的架构以框架的形式出现了。如电子数据表、文档、图形图像、音频剪辑等可互换的黑箱对象，可以相互嵌入。</p><p>当前(最近 10 年来):中间件和 IT 架构作为标准平台出现，用可购买可复用的元素来构建系统，同时，基于架构的开发方法和理论不断成熟。</p><table><thead><tr><th>年代</th><th>60</th><th>70</th><th>80</th><th>90</th><th>当前</th></tr></thead><tbody><tr><td>发展状况</td><td>子程序</td><td>模块化</td><td>面向对象</td><td>框架</td><td>中间件和IT架构</td></tr></tbody></table><h1 id="一、软件架构的定义"><a href="#一、软件架构的定义" class="headerlink" title="一、软件架构的定义"></a>一、软件架构的定义</h1><p>软件架构仍在不断发展中，还没有形成一个统一的、公认的定义，这里仅举出几个较权威的定义。</p><p>定义 1:软件或计算机系统的软件架构是该系统的一个(或多个)结构，而结构由软件元素、元素的外部可见属性及它们之间的关系组成。</p><p>定义 2:软件架构为软件系统提供了一个结构、行为和属性的高级抽象，由构成系统的元素的描述、这些元素的相互作用、指导元素集成的模式及这些模式的约束组成。</p><p>定义 3:软件架构是指一个系统的基础组织，它具体体现在:系统的构件，构件之间、构件与环境之间的关系，以及指导其设计和演化的原则上。(IEEE1471- 2000)</p><p>(1)架构是对系统的抽象，它通过描述元素、元素的外部可见属性及元素之间的关系来反映这种抽象。因此，仅与内部具体实现有关的细节是不属于架构的，即定义强调元素的 “外部可见”属性。</p><p>(2)架构由多个结构组成，结构是从功能角度来描述元素之间的关系的，具体的结构传达了架构某方面的信息，但是个别结构一般不能代表大型软件架构。</p><p>(3)任何软件都存在架构，但不一定有对该架构的具体表述文档。即架构可以独立于架构的描述而存在。如文档已过时，则该文档不能反映架构。</p><p>(4)元素及其行为的集合构成架构的内容。体现系统由哪些元素组成，这些元素各有哪些功能(外部可见)，以及这些元素间如何连接与互动。即在两个方面进行抽象:在静态方面，关注系统的大粒度(宏观)总体结构(如分层);在动态方面，关注系统内关键行为的共同特征。</p><p>(5)架构具有“基础”性:它通常涉及解决各类关键的重复问题的通用方案(复用性)，以及系统设计中影响深远(架构敏感)的各项重要决策(一旦贯彻，更改的代价昂贵)。</p><p>(6)架构隐含有“决策”，即架构是由架构设计师根据关键的功能和非功能性需求(质量属性及项目相关的约束)进行设计与决策的结果。不同的架构设计师设计出来的架构是不一样的，为避免架构设计师考虑不周，重大决策应经过评审。特别是架构设计师自身的水平是一种约束，不断学习和积累经验才是摆脱这种约束走向自由王国的必经之路。</p><p>在设计软件架构时也必须考虑硬件特性和网络特性，因此，软件架构与系统架构二者间的区别其实不大。但是，在大多情况下，架构设计师在软件方面的选择性较之硬件方面，其自由度大得多。因此，使用“软件架构”这一术语，也表明了一个观点:架构设计师通常将架构的重点放在软件部分。</p><p>(1)影响架构的因素。软件系统的项目干系人(客户、用户、项目经理、程序员、测试人员、市场人员等)对软件系统有不同的要求、开发组织(项目组)有不同的人员知识结构、架构设计师的素质与经验、当前的技术环境等方面都是影响架构的因素。这些因素通过功能性需求、非功能性需求、约束条件及相互冲突的要求，影响架构设计师的决策，从而影响架构。</p><p>(2)架构对上述诸因素具有反作用，例如，影响开发组织的结构。架构描述了系统的大粒度(宏观)总体结构，因此可以按架构进行分工，将项目组为几个工作组，从而使开发有序;影响开发组织的目标，即成功的架构为开发组织提供了新的商机，这归功于:系统的示范性、架构的可复用性及团队开发经验的提升，同时，成功的系统将影响客户对下一个系统的要求等。这种反馈机制构成了架构的商业周期。</p><h1 id="二、软件架构的重要性"><a href="#二、软件架构的重要性" class="headerlink" title="二、软件架构的重要性"></a>二、软件架构的重要性</h1><h2 id="1-项目关系人之间交流的平台。"><a href="#1-项目关系人之间交流的平台。" class="headerlink" title="(1)项目关系人之间交流的平台。"></a>(1)项目关系人之间交流的平台。</h2><p>软件系统的项目关系人分别关注系统的不同特性， 而这些特性都由架构所决定，因此，架构提供了一个共同语言(公共的参考点)，项目关系 人以此作为彼此理解、协商、达成共识或相互沟通的基础。架构分析既依赖于又促进了这个 层次上的交流。</p><h2 id="2-早期设计决策。"><a href="#2-早期设计决策。" class="headerlink" title="(2)早期设计决策。"></a>(2)早期设计决策。</h2><p>从软件生命周期来看，软件架构是所开发系统的最早设计决策的体现。</p><p>架构明确了对系统实现的约束条件:架构是架构设计师对系统实现的各方面进行权衡的结果， 是总体设计的体现，因此，在具体实现时必须按架构的设计进行。</p><p>架构影响着系统的质量属性:要保证系统的高质量，具有完美的架构是必要的(虽然不充分)。 架构可以用来预测系统的质量，例如，可以根据经验对该架构的质量(如性能)作定性的判 断。</p><p>架构为维护的决策提供根据。在架构层次上能为日后的更改决策提供推理、判断的依据。一个富有生命力的架构，应该是在最有可能更改的地方有所考虑(架构的柔性)，使其在此点 最容易进行更改。</p><p>架构有助于原型开发。可以按架构构造一个骨架系统(原型)，例如，在早期实现一个可执 行的特例，确定潜在的性能问题。</p><p>借助于架构进行成本与进度的估计。</p><h2 id="3-在较高层面上实现软件复用。"><a href="#3-在较高层面上实现软件复用。" class="headerlink" title="(3)在较高层面上实现软件复用。"></a>(3)在较高层面上实现软件复用。</h2><p>软件架构作为系统的抽象模型，可以在多个系统间传递(复用)，特别是比较容易地应用到具有相似质量属性和功能需求的系统中。产品线通 常共享一个架构。产品线的架构是开发组织的核心资产之一，利用架构及其范例进行多系统 的开发，在开发时间、成本、生产率和产品质量方面具有极大的回报。基于架构的开发强调 对各元素的组合或装配。系统开发还可以使用其他组织开发的元素，例如购买商业构件。</p><h2 id="4-架构对开发的指导与规范意义不容忽略。"><a href="#4-架构对开发的指导与规范意义不容忽略。" class="headerlink" title="(4)架构对开发的指导与规范意义不容忽略。"></a>(4)架构对开发的指导与规范意义不容忽略。</h2><p>架构作为系统的总体设计，它指导后续 的详细设计和编码。架构使基于模板的开发成为可能，有利于开发的规范化和一致性，减少 开发与维护成本。架构可以作为培训的基础，有利于培养开发团队和培训相关人员。</p><p><img src="/images/ruankao/6-20.png"></p><h1 id="三、架构的模型"><a href="#三、架构的模型" class="headerlink" title="三、架构的模型"></a>三、架构的模型</h1><p>软件架构作为一个有机的整体，可以分解成多个侧面来认识，每个侧面强调它的不同方 面的特征，从而使架构设计师能整体地把握它的重点。我们可以将软件架构归纳成 5 种模 型:结构模型、框架模型、动态模型、过程模型和功能模型。最常用的是结构模型和动态模 型。</p><h2 id="1-结构模型。"><a href="#1-结构模型。" class="headerlink" title="(1)结构模型。"></a>(1)结构模型。</h2><p>这是一个最直观、最普遍的建模方法。这种方法以架构的构件、连接 件和其他概念来刻画结构，并力图通过结构来反映系统的重要语义内容，包括系统的配置、 约束、隐含的假设条件、风格、性质。研究结构模型的核心是架构描述语言。</p><h2 id="2-框架模型。"><a href="#2-框架模型。" class="headerlink" title="(2)框架模型。"></a>(2)框架模型。</h2><p>框架模型与结构模型类似，但它不太侧重描述结构的细节而更侧重于 整体的结构。框架模型主要以一些特殊的问题为目标建立只针对和适应该问题的结构。</p><h2 id="3-动态模型。"><a href="#3-动态模型。" class="headerlink" title="(3)动态模型。"></a>(3)动态模型。</h2><p>动态模型是对结构或框架模型的补充，研究系统“大颗粒”的行为性质。例如，描述系统的重新配置或演化。动态可能指系统总体结构的配置、建立或拆除通信 通道或计算的过程。</p><h2 id="4-过程模型。"><a href="#4-过程模型。" class="headerlink" title="(4)过程模型。"></a>(4)过程模型。</h2><p>过程模型研究构造系统的步骤和过程。因而结构是遵循某些过程脚本的结果。</p><h2 id="5-功能模型。"><a href="#5-功能模型。" class="headerlink" title="(5)功能模型。"></a>(5)功能模型。</h2><p>该模型认为架构由一组功能构件按层次组成，且下层向上层提供服务。 它可以看作是一种特殊的框架模型。</p><h2 id="“4-1”的视图模型"><a href="#“4-1”的视图模型" class="headerlink" title="“4+1”的视图模型"></a>“4+1”的视图模型</h2><p>4+1” 视 图模型从 5 个不同的视角包括逻辑视图、进程视图、物理视图、开发视图和场景视图来描 述软件架构。每一个视图只关心系统的一个侧面，5 个视图结合在一起才能反映系统的软件 架构的全部内容。</p><p><img src="/images/ruankao/6-21.png"></p><h3 id="1-逻辑视图"><a href="#1-逻辑视图" class="headerlink" title="(1)逻辑视图"></a>(1)逻辑视图</h3><p>主要支持系统的功能需求，即系统提供给最终用户的服务。</p><p>在面向对象技术中，通过抽象、封装和继承，可以用对象模型来代表逻辑视图，用类图来描述逻辑视图。逻辑视图中使用的风格为面向对象的风格。</p><h3 id="2-开发视图"><a href="#2-开发视图" class="headerlink" title="(2)开发视图"></a>(2)开发视图</h3><p>也称为模块视图，主要侧重于软件模块的组织和管理。</p><p>开发视图要考虑软件内部的需求，如软件开发的容易性、软件的重用和软件的通用性，要充分考虑由于具体开发工具的不同而带来的局限性。开发视图通过系统输入输出关系的模型图和子系统图来描述。</p><h3 id="3-进程视图"><a href="#3-进程视图" class="headerlink" title="(3)进程视图"></a>(3)进程视图</h3><p>侧重于系统的运行特性，主要关注一些非功能性的需求，例如系统的性能和可用性。</p><p>进程视图强调并发性、分布性、系统集成性和容错能力，以及逻辑视图中的 主要抽象的进程结构。它也定义逻辑视图中的各个类的操作具体是在哪一个线程中被执行的。 进程视图可以描述成多层抽象，每个级别分别关注不同的方面。</p><h3 id="4-物理视图"><a href="#4-物理视图" class="headerlink" title="(4)物理视图"></a>(4)物理视图</h3><p>主要考虑如何把软件映射到硬件上，它通常要考虑到解决系统拓扑结 构、系统安装、通信等问题。</p><p>当软件运行于不同的节点上时，各视图中的构件都直接或间接 地对应于系统的不同节点上。因此，从软件到节点的映射要有较高的灵活性，当环境改变时， 对系统其他视图的影响最小。</p><h3 id="5-场景"><a href="#5-场景" class="headerlink" title="(5)场景"></a>(5)场景</h3><p>可以看作是那些重要系统活动的抽象，它使四个视图有机地联系起来，从某种意义上说，场景是最重要的需求抽象。</p><p>在开发架构时，它可以帮助设计者找到架构的构件和它们之间的作用关系。同时，也可以用场景来分析一个特定的视图，或描述不同视图构件间是如何相互作用的。场景可以用文本表示，也可以用图形表示。</p><p><img src="/images/ruankao/6-22.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-软件架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构设计（二）架构需求与软件质量属性</title>
      <link href="/2021/09/25/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89%E6%9E%B6%E6%9E%84%E9%9C%80%E6%B1%82%E4%B8%8E%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7/"/>
      <url>/2021/09/25/%E8%BD%AF%E8%80%83/9%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89%E6%9E%B6%E6%9E%84%E9%9C%80%E6%B1%82%E4%B8%8E%E8%BD%AF%E4%BB%B6%E8%B4%A8%E9%87%8F%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>架构的基本需求主要是在满足功能属性的前提下，关注软件质量属性，架构设计则是为满足架构需求(质量属性)寻找适当的“战术”。</p><p>软件属性包括功能属性和质量属性，但是，软件架构(及软件架构设计师)重点关注的是质量属性。</p><p>在大量的可能结构中，可以使用不同的结构来实现同样的功能性，即功 能性在很大程度上是独立于结构的，架构设计师面临着决策(对结构的选择)，而功能性所 关心的是它如何与其他质量属性进行交互，以及它如何限制其他质量属性。</p><h1 id="一、软件质量属性"><a href="#一、软件质量属性" class="headerlink" title="一、软件质量属性"></a>一、软件质量属性</h1><p>《GB/T16260-1996(idt ISO/IEC9126:1991)信息技术软件产品评价质量特性及其使用指南》中描述的软件质量特性包括功能性、可靠性、易用性、效率、可维护性、可移植性等 6 个方面，每个方面都包含若干个子特性。 </p><table><thead><tr><th>软件质量特性</th><th>子特性</th></tr></thead><tbody><tr><td>功能性</td><td>适合性、准确性、互操作性、依从性、安全性</td></tr><tr><td>可靠性</td><td>成熟性、容错性、易恢复性</td></tr><tr><td>易用性</td><td>易理解性、易学性、易操作性</td></tr><tr><td>效率</td><td>时间特性、资源特性</td></tr><tr><td>可维护性</td><td>易分析性、易改变性、稳定性、易测试性</td></tr><tr><td>可移植性</td><td>适应性、易安装性、遵循性、易替换性</td></tr></tbody></table><h2 id="1-运行期质量属性"><a href="#1-运行期质量属性" class="headerlink" title="1.运行期质量属性"></a>1.运行期质量属性</h2><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>性能是指软件系统及时提供相应服务的能力。包括速度、吞吐量和持续高速性三方面的要求。</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><p>指软件系统同时兼顾向合法用户提供服务，以及阻止非授权使用的能力。</p><h3 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h3><p>指软件系统易于被使用的程度。</p><h3 id="可伸缩性"><a href="#可伸缩性" class="headerlink" title="可伸缩性"></a>可伸缩性</h3><p>指当用户数和数据量增加时，软件系统维持高服务质量的能力。例如，通过增加服务器来提高能力。</p><h3 id="互操作性"><a href="#互操作性" class="headerlink" title="互操作性"></a>互操作性</h3><p>指本软件系统与其他系统交换数据和相互调用服务的难易程度。</p><h3 id="持续可用性"><a href="#持续可用性" class="headerlink" title="持续可用性"></a>持续可用性</h3><p>指系统长时间无故障运行的能力。与可靠性相关联，常将其纳入可靠性中。</p><h3 id="鲁棒性"><a href="#鲁棒性" class="headerlink" title="鲁棒性"></a>鲁棒性</h3><p>是指软件系统在一些非正常情况(如用户进行了非法操作、相关的软硬件系统发生了故障等)下仍能够正常运行的能力。也称健壮性或容错性。</p><h2 id="2-开发期质量属性"><a href="#2-开发期质量属性" class="headerlink" title="2.开发期质量属性"></a>2.开发期质量属性</h2><h3 id="易理解性"><a href="#易理解性" class="headerlink" title="易理解性"></a>易理解性</h3><p>指设计被开发人员理解的难易程度。</p><h3 id="可扩展性"><a href="#可扩展性" class="headerlink" title="可扩展性"></a>可扩展性</h3><p>软件因适应新需求或需求变化而增加新功能的能力。也称为灵活性。</p><h3 id="可重用性"><a href="#可重用性" class="headerlink" title="可重用性"></a>可重用性</h3><p>指重用软件系统或某一部分的难易程度。</p><h3 id="可测试性"><a href="#可测试性" class="headerlink" title="可测试性"></a>可测试性</h3><p>对软件测试以证明其满足需求规范的难易程度。</p><h3 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h3><p>当需要修改缺陷、增加功能、提高质量属性时，定位修改点并实施修改的难易程度;</p><h3 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h3><p>将软件系统从一个运行环境转移到另一个不同的运行环境的难易程度。</p><p><img src="/images/ruankao/6-23.png"></p><h1 id="二、6-个质量属性及实现"><a href="#二、6-个质量属性及实现" class="headerlink" title="二、6 个质量属性及实现"></a>二、6 个质量属性及实现</h1><p>如何描述质量属性需求呢?<br><img src="/images/ruankao/6-24.png"></p><h2 id="1-可用性及其实现战术"><a href="#1-可用性及其实现战术" class="headerlink" title="1.可用性及其实现战术"></a>1.可用性及其实现战术</h2><h3 id="1-可用性的描述。"><a href="#1-可用性的描述。" class="headerlink" title="(1)可用性的描述。"></a>(1)可用性的描述。</h3><p><img src="/images/ruankao/6-25.png"></p><h3 id="2-可用性战术。"><a href="#2-可用性战术。" class="headerlink" title="(2)可用性战术。"></a>(2)可用性战术。</h3><p>可用性战术的目标是阻止错误发展成故障，至少能够把错误的影响 限制在一定范围内，从而使修复成为可能。战术分为:错误检测、错误恢复、错误预防。</p><h4 id="①错误检测"><a href="#①错误检测" class="headerlink" title="①错误检测"></a>①错误检测</h4><p>命令/响应:一个构件发出一个命令，并希望在预定义的时间内收到一个来自审查构件的响 应，例如远程错误的检测。<br>心跳(计时器):一个构件定期发出一个心跳消息，另一个构件收听到消息，如果未收到心 跳消息，则假定构件失败，并通知错误纠正构件。<br>异常:当出现异常时，异常处理程序开发执行。</p><h4 id="②错误恢复"><a href="#②错误恢复" class="headerlink" title="②错误恢复"></a>②错误恢复</h4><p>表决:通过冗余构件(或处理器)与表决器连接，构件按相同的输入及算法计算输出值交给 表决器，由表决器按表决算法(如多数规则)确定是否有构件出错，表决通常用在控制系统中。</p><p>主动冗余(热重启、热备份):所有的冗余构件都以并行的方式对事件做出响应。它们都处 在相同的状态，但仅使用一个构件的响应，丢弃其余构件的响应。错误发生时通过切换的方 式使用另一个构件的响应。</p><p>被动冗余(暧重启/双冗余/三冗余):一个构件(主构件)对事件做出响应，并通知其他构 件(备用的)必须进行的状态更新(同步)。当错误发生时，备用构件从最新同步点接替主 构件的工作。</p><p>备件:备件是计算平台配置用于更换各种不同的故障构件。</p><p>状态再同步:主动和被动冗余战术要求所恢复的构件在重新提供服务前更新其状态。更新方 法取决于可以承受的停机时间、更新的规模及更新的内容多少。</p><p>检查点/回滚:检查点就是使状态一致的同步点，它或者是定期进行，或者是对具体事件做 出响应。当在两检查点之间发生故障时，则以这个一致状态的检查点(有快照)和之后发生 的事务日志来恢复系统(数据库中常使用)。</p><h4 id="③错误预防"><a href="#③错误预防" class="headerlink" title="③错误预防"></a>③错误预防</h4><p>从服务中删除:如删除进程再重新启动，以防止内存泄露导致故障的发生。</p><p>事务:使用事务来保证数据的一致性，即几个相关密切的步骤，要么全成功，要么都不成功。</p><p>进程监视器:通过监视进程来处理进程的错误。</p><p><img src="/images/ruankao/6-26.png"></p><h2 id="2-可修改性及其实现战术"><a href="#2-可修改性及其实现战术" class="headerlink" title="2.可修改性及其实现战术"></a>2.可修改性及其实现战术</h2><h3 id="1-可修改性的描述"><a href="#1-可修改性的描述" class="headerlink" title="(1)可修改性的描述"></a>(1)可修改性的描述</h3><p><img src="/images/ruankao/6-27.png"></p><h3 id="2-可修改性战术。"><a href="#2-可修改性战术。" class="headerlink" title="(2)可修改性战术。"></a>(2)可修改性战术。</h3><p>包括局部化修改、防止连锁反应、推迟绑定时间。</p><h4 id="①局部化修改"><a href="#①局部化修改" class="headerlink" title="①局部化修改"></a>①局部化修改</h4><p>在设计期间为模块分配责任，以便把预期的变更限制在一定的范围内，从而降低修改的成本。</p><p>维持语义的一致性:语义的一致性指的是模块中责任之间的关系，使这些责任能够协同工作， 不需要过多地依赖其他模块。耦合和内聚指标反映一致性，应该根据一组预期的变更来度量 语义一致性。使用“抽象通用服务”(如应用框架的使用和其他中间软件的使用)来支持可 修改性是其子战术。</p><p>预期期望的变更:通过对变更的预估，进行预设、准备，从而使变更的影响最小。</p><p>泛化该模块:使一个模块更通用、更广泛的功能。</p><p>限制可能的选择:如在更换某一模块(如处理器)时，限制为相同家族的成员。</p><h4 id="②防止连锁反应。"><a href="#②防止连锁反应。" class="headerlink" title="②防止连锁反应。"></a>②防止连锁反应。</h4><p>由于模块之间有各种依赖性，因此，修改会产生连锁反应。防止连锁反应的战术如下。</p><p>信息隐藏:就是把某个实体的责任分解为更小的部分，并选择哪些信息成为公有的，哪些成 为私有的，通过接口获得公有责任。</p><p>维持现有的接口:尽可能维持现有接口的稳定性。例如通过添加接口(通过新的接口提供新 的服务)可以达到这一目的。</p><p>限制通信路径:限制与一个给定的模块共享数据的模块。这样可以减少由于数据产生/使用引入的连锁反应。</p><p>仲裁者的使用:在具有依赖关系的两个模块之间插入一个仲裁者，以管理与该依赖相关的活 动。仲裁者有很多种类型，例如:桥、调停者、代理等就是可以提供把服务的语法从一种形 式转换为另一种形式的仲裁者。</p><h4 id="③推迟绑定时间。"><a href="#③推迟绑定时间。" class="headerlink" title="③推迟绑定时间。"></a>③推迟绑定时间。</h4><p>系统具备在运行时进行绑定并允许非开发人员进行修改(配置)。</p><p>运行时注册:支持即插即用。</p><p>配置文件:在启动时设置参数。</p><p>多态:在方法调用的后期绑定。</p><p>构件更换:允许载入时绑定。<br><img src="/images/ruankao/6-29.png"></p><h2 id="3-性能及其实现战术"><a href="#3-性能及其实现战术" class="headerlink" title="3.性能及其实现战术"></a>3.性能及其实现战术</h2><h3 id="1-性能的描述。"><a href="#1-性能的描述。" class="headerlink" title="(1)性能的描述。"></a>(1)性能的描述。</h3><p><img src="/images/ruankao/6-28.png"></p><h3 id="2-性能战术。"><a href="#2-性能战术。" class="headerlink" title="(2)性能战术。"></a>(2)性能战术。</h3><p>性能与时间相关，影响事件的响应时间有两个基本因素。</p><p>资源消耗:事件到达后进入一系列的处理程序，每一步处理都要占用资源，而且在处理过程 中消息在各构件之间转换，这些转换也需要占用资源。</p><p>闭锁时间:指对事件处理时碰到了资源争用、资源不可用或对其他计算的依赖等情况，就产 生了等待时间。</p><h4 id="①资源需求"><a href="#①资源需求" class="headerlink" title="①资源需求"></a>①资源需求</h4><p>减少处理事件流所需的资源:提高计算效率(如改进算法)、减少计算开销(如在可修改性与性能之间权衡，减少不必要的代理构件)。</p><p>减少所处理事件的数量:管理事件率、控制采样频率。</p><p>控制资源的使用:限制执行时间(如减少迭代次数)、限制队列大小。</p><h4 id="②资源管理"><a href="#②资源管理" class="headerlink" title="②资源管理"></a>②资源管理</h4><p>引入并发:引入并发对负载平衡很重要。</p><p>维持数据或计算的多个副本:C/S 结构中客户机 C 就是计算的副本，它能减少服务器计算的压力;高速缓存可以存放数据副本(在不同速度的存储库之间的缓冲)。</p><p>增加可用资源:在成本允许时，尽量使用速度更快的处理器、内存和网络。</p><h4 id="③资源仲裁"><a href="#③资源仲裁" class="headerlink" title="③资源仲裁"></a>③资源仲裁</h4><p>通过如下调度策略来实现：</p><p>先进/先出(FIFO);</p><p>固定优先级调度:先给事件分配特定的优先级，再按优先级高低顺序分配资源;</p><p>动态优先级调度:轮转调度、时限时间最早优先;</p><p>静态调度:可以离线确定调度。</p><p><img src="/images/ruankao/6-30.png"></p><h2 id="4-安全性及其实现战术"><a href="#4-安全性及其实现战术" class="headerlink" title="4.安全性及其实现战术"></a>4.安全性及其实现战术</h2><h3 id="1-安全性的描述。"><a href="#1-安全性的描述。" class="headerlink" title="(1)安全性的描述。"></a>(1)安全性的描述。</h3><p><img src="/images/ruankao/6-31.png"></p><h3 id="2-安全性战术"><a href="#2-安全性战术" class="headerlink" title="(2)安全性战术"></a>(2)安全性战术</h3><p>包括抵抗攻击、检测攻击和从攻击中恢复。</p><h4 id="①抵抗攻击"><a href="#①抵抗攻击" class="headerlink" title="①抵抗攻击"></a>①抵抗攻击</h4><p>对用户进行身份验证:包括动态密码、一次性密码、数字证书及生物识别等;</p><p>对用户进行授权:即对用户的访问进行控制管理;</p><p>维护数据的机密性:一般通过对数据和通信链路进行加密来实现;</p><p>维护完整性:对数据添加校验或哈希值;</p><p>限制暴露的信息;</p><p>限制访问:如用防火墙、DMZ 策略。</p><h4 id="②检测攻击"><a href="#②检测攻击" class="headerlink" title="②检测攻击"></a>②检测攻击</h4><p>一般通过“入侵检测”系统进行过滤、比较通信模式与历史基线等方法。</p><h4 id="③从攻击中恢复"><a href="#③从攻击中恢复" class="headerlink" title="③从攻击中恢复"></a>③从攻击中恢复</h4><p>恢复:与可用性中的战术相同;</p><p>识别攻击者:作为审计追踪，用于预防性或惩罚性目的。</p><p><img src="/images/ruankao/6-32.png"></p><h2 id="5-可测试性及其实现战术"><a href="#5-可测试性及其实现战术" class="headerlink" title="5.可测试性及其实现战术"></a>5.可测试性及其实现战术</h2><h3 id="1-可测试性的描述"><a href="#1-可测试性的描述" class="headerlink" title="(1)可测试性的描述"></a>(1)可测试性的描述</h3><p><img src="/images/ruankao/6-33.png"></p><h3 id="2-可测试性战术"><a href="#2-可测试性战术" class="headerlink" title="(2)可测试性战术"></a>(2)可测试性战术</h3><p>包括输入/输出和内部监控。</p><h4 id="①输入-输出"><a href="#①输入-输出" class="headerlink" title="①输入/输出"></a>①输入/输出</h4><p>记录/回放:指捕获跨接口的信息，并将其作为测试专用软件的输入;</p><p>将接口与实现分离:允许使用实现的替代(模拟器)来支持各种测试目的;</p><p>优化访问线路/接口:用测试工具来捕获或赋予构件的变量值。</p><h4 id="②内部监控"><a href="#②内部监控" class="headerlink" title="②内部监控"></a>②内部监控</h4><p>当监视器处于激活状态时，记录事件(如通过接口的信息)。<br><img src="/images/ruankao/6-34.png"></p><h2 id="6-易用性及其实现战术"><a href="#6-易用性及其实现战术" class="headerlink" title="6.易用性及其实现战术"></a>6.易用性及其实现战术</h2><h3 id="1-易用性的描述"><a href="#1-易用性的描述" class="headerlink" title="(1)易用性的描述"></a>(1)易用性的描述</h3><p><img src="/images/ruankao/6-35.png"></p><h3 id="2-易用性战术"><a href="#2-易用性战术" class="headerlink" title="(2)易用性战术"></a>(2)易用性战术</h3><p>包括运行时战术、设计时战术和支持用户主动操作。</p><h4 id="①运行时战术"><a href="#①运行时战术" class="headerlink" title="①运行时战术"></a>①运行时战术</h4><p>任务的模型:维护任务的信息，使系统了解用户试图做什么，并提供各种协助;</p><p>用户的模型:维护用户的信息，例如使系统以用户可以阅读页面的速度滚动页面;</p><p>系统的模型:维护系统的信息，它确定了期望的系统行为，并向用户提供反馈。</p><h4 id="②设计时战术"><a href="#②设计时战术" class="headerlink" title="②设计时战术"></a>②设计时战术</h4><p>将用户接口与应用的其余部分分离开来，预计用户接口会频繁发生变化，因此，单独维护用户接口代码将实现变更局部化。这与可修改性相关。</p><h4 id="③支持用户主动操作"><a href="#③支持用户主动操作" class="headerlink" title="③支持用户主动操作"></a>③支持用户主动操作</h4><p>支持用户的主动操作，如支持“取消”、“撤销”、“聚合”和 “显<br>示多个视图”。</p><p><img src="/images/ruankao/6-36.png"></p><hr><p><img src="/images/ruankao/6-37.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-软件架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统分析与设计方法（七）简单分布式计算机应用系统的设计</title>
      <link href="/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%83%EF%BC%89%E7%AE%80%E5%8D%95%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%83%EF%BC%89%E7%AE%80%E5%8D%95%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>分布式计算背景：<br>单台计算机的功能仍然十分有限。<br>升级到更强的服务器的费用常常远远高于购买多台档次稍低的机器。</p><p>解决方案：<br>利用联网的计算机协同工作，共同完成复杂的工作成为相对成本较低的选择，而且可以完成单台计算机所无法完成的任务。</p><p>存在问题：<br>网络本质上并不可靠，特别是远程通信。<br>分布式系统还带来了并发和同步的问题。</p><h1 id="基于实例的协作"><a href="#基于实例的协作" class="headerlink" title="基于实例的协作"></a>基于实例的协作</h1><p>所有的实例都处理自己范围内的数据，这些对象实例的地位是相同的，当一个对象实例必须要处理不属于它自己范围的数据时，它必须和数据归宿的对象实例通信，请求另外一个对象实例进行处理。<br>请求对象实例可以启动对象、调用远程对象的方法，以及停止运行远程实例。</p><p>基于实例的协作适用于比较小范围内网络情况良好的环境中，这种环境常常被称为近连接。这种情况下对对象的生存周期管理所带来不寻常的网络流量是可以容忍的。</p><p>基于实例的协作常常使用被称为“代理”的方法。</p><h1 id="基于服务的协作"><a href="#基于服务的协作" class="headerlink" title="基于服务的协作"></a>基于服务的协作</h1><p>只提供远程对象的接口，用户可以调用这些方法，却无法远程创建和销毁远程对象实例。</p><p>基于服务的协作适用于跨平台的网络，网络响应较慢的情况，这种环境常称为远连接。这时，简化交互性更为重要，而频繁的网络交换数据会带来难以容忍的延时。</p><p>基于服务的协作往往采用分层次的结构，高层次的应用依赖于低层次的对象，而低层次对象实例的实现细节则没有必要暴露给高层次对象。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-系统分析与设计方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统分析与设计方法（三）结构化分析与设计</title>
      <link href="/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%93%E6%9E%84%E5%8C%96%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%93%E6%9E%84%E5%8C%96%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>结构化分析与设计方法是一种面向数据流的需求分析和设计方法。</p><p>它适用于分析和设计大型数据处理系统，是一种简单、实用的方法。</p><h1 id="一、结构化分析"><a href="#一、结构化分析" class="headerlink" title="一、结构化分析"></a>一、结构化分析</h1><p>结构化分析方法的基本思想史自顶向下逐层分解。<br>分解和抽象是控制问题复杂性的两种基本手段。<br>把一个大问题分解成若干个小问题，每个小问题在分解成更小的问题，让每个最底层的问题都足够简单、容易解决，这个过程就是分解过程。</p><p>结构化分析与面向对象分析方法之间最大的差别是：<br>面向对象方法把系统看成一个相互影响的对象集。<br>结构化分析方法把系统看作一个过程的集合体，包括人完成的和电脑完成的。特点是利用数据流图帮助人们理解问题，对问题进行分析。<br>结构化分析一般包括以下工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数据流图（Data Flow Diagram，DFD）</span><br><span class="line">数据字段（Data Dictionary，DD）</span><br><span class="line">结构化语言</span><br><span class="line">判定表</span><br><span class="line">判定树</span><br></pre></td></tr></table></figure><h2 id="1、结构化分析的工作步骤"><a href="#1、结构化分析的工作步骤" class="headerlink" title="1、结构化分析的工作步骤"></a>1、结构化分析的工作步骤</h2><h3 id="（1）研究“物质环境”"><a href="#（1）研究“物质环境”" class="headerlink" title="（1）研究“物质环境”"></a>（1）研究“物质环境”</h3><p>首先应该画出当前系统的数据流图，说明系统的输入、输出数据流，说明系统的数据流情况，经历了那些处理过程。</p><h3 id="（2）简历系统逻辑模型"><a href="#（2）简历系统逻辑模型" class="headerlink" title="（2）简历系统逻辑模型"></a>（2）简历系统逻辑模型</h3><p>在物理模型建立完成之后，接下来就是画出相对于真实系统的等价逻辑数据流图。<br>在前一步简历的数据流图的基础上，将所有自然数据流都转成等价的逻辑流。<br>比如将现实世界中的“送往总经理办公室”改成“报送表格”。</p><h3 id="（3）划清人机界限"><a href="#（3）划清人机界限" class="headerlink" title="（3）划清人机界限"></a>（3）划清人机界限</h3><p>确定在系统逻辑模型中，哪些通过系统自动化完成，哪些手工操作。</p><h2 id="2、数据流图DFD"><a href="#2、数据流图DFD" class="headerlink" title="2、数据流图DFD"></a>2、数据流图DFD</h2><p>DFD是一种图形化的系统模型，主要在图中展示主要需求，包括输入、输出、处理、数据存储等过程。<br>DFD包括以下几个基础元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">过程：也称为加工，一步步地执行指令，完成输入到输出的转换。</span><br><span class="line">外部实体：也称为源/宿，系统之外的数据源或目的。</span><br><span class="line">数据存储：也称为文件，存放数据的地方，一般是文件、数据库。</span><br><span class="line">数据流：从一处到另一处的数据流向。</span><br><span class="line">实时链接：当过程执行时，外部实体与过程之间的来回通信。</span><br></pre></td></tr></table></figure><p><img src="/images/ruankao/6-1.png"></p><h3 id="1-数据流图的层次"><a href="#1-数据流图的层次" class="headerlink" title="(1)数据流图的层次"></a>(1)数据流图的层次</h3><p>结构化的思路是依赖于数据流图自顶向下分析。<br>因为系统通常比较复杂，很难在一张图上将所有的数据流和加工描述清楚。<br>因此数据流图分为高层次和低层次的图，由高层次逐步分解。<br><img src="/images/ruankao/6-2.png"></p><h3 id="（2）Context图"><a href="#（2）Context图" class="headerlink" title="（2）Context图"></a>（2）Context图</h3><p>系统上下文范围关系图。是系统最高层结构的DFD图。<br>特点是将待开发的系统表示成一个过程，将所有外部实体和进出系统的数据流都花在一张图中。<br><img src="/images/ruankao/6-3.png"></p><h3 id="（3）逐级分解"><a href="#（3）逐级分解" class="headerlink" title="（3）逐级分解"></a>（3）逐级分解</h3><p><img src="/images/ruankao/6-4.png"><br>保持输入、输出不变，由于是对过程0分解进行分解，所以叫DFD0层图。<br>对DFD1层图进行分解，其编号就是1.1，1.2……</p><h3 id="（4）如何画DFD。"><a href="#（4）如何画DFD。" class="headerlink" title="（4）如何画DFD。"></a>（4）如何画DFD。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">画系统的输入和输出</span><br><span class="line">画数据流图的内部</span><br><span class="line">为每个数据流命名</span><br><span class="line">为加工命名</span><br></pre></td></tr></table></figure><h2 id="3、细化记录DFD部件"><a href="#3、细化记录DFD部件" class="headerlink" title="3、细化记录DFD部件"></a>3、细化记录DFD部件</h2><p>数据字典是很适用和有效的细化手段。他对所有和系统相关的数据元素进行明确的定义。<br>数据字典的每一个条目中包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">名称</span><br><span class="line">何处使用/如何使用</span><br><span class="line">内容描述</span><br><span class="line">补充信息</span><br></pre></td></tr></table></figure><p>内容描述的符号包括</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">= 由xxx组成</span><br><span class="line">+ 和，表示顺序链接</span><br><span class="line">[|] 或</span><br><span class="line">&#123;&#125;* n次重复</span><br><span class="line">() 可选的数据项</span><br><span class="line">*...* 特定限制</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">客户信息=客户编号+客户名称+身份证号+手机</span><br><span class="line">客户编号=&#123;0...9&#125;8</span><br><span class="line">客户名称=&#123;字&#125;4</span><br><span class="line">身份证号=[&#123;0...9&#125;15|&#123;0...9&#125;18]</span><br></pre></td></tr></table></figure><h1 id="二、结构化设计"><a href="#二、结构化设计" class="headerlink" title="二、结构化设计"></a>二、结构化设计</h1><p>结构化设计包括架构设计、接口设计、数据设计、过程设计等。<br>是面向数据流的设计，自顶向下、逐步求精、模块化的过程。</p><h2 id="1、概要设计与详细设计的主要任务"><a href="#1、概要设计与详细设计的主要任务" class="headerlink" title="1、概要设计与详细设计的主要任务"></a>1、概要设计与详细设计的主要任务</h2><h3 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h3><p>概要设计阶段的主要任务是设计软件的结构、确定系统由哪些模块组成，每个模块之间的关系。<br>整个过程包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">复查基本系统模型</span><br><span class="line">复查并精化数据流图</span><br><span class="line">确定数据流图的信息流类型</span><br><span class="line">根据刘类型分别实施变换分析或事务分析</span><br><span class="line">根据软件设计原则对得到的软件结构图进一步细化</span><br></pre></td></tr></table></figure><h3 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h3><p>详细设计阶段的主要任务是确定应该如何具体地实现所要求的的系统，得出对目标系统的精确描述。<br>采用自顶向下、逐步求精的设计方式，单入口单出口的控制结构。<br>常用工具包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">流程图</span><br><span class="line">盒图</span><br><span class="line">问题分析图PAD</span><br><span class="line">程序设计语言PDL</span><br></pre></td></tr></table></figure><h2 id="2、结构图"><a href="#2、结构图" class="headerlink" title="2、结构图"></a>2、结构图</h2><p>结构图包括模块、调用、和数据<br><img src="/images/ruankao/6-5.png"><br>结构图是在数据流图的基础上进一步设计，将DFD中的信息流分成交换流和事务流。</p><h3 id="交换流"><a href="#交换流" class="headerlink" title="交换流"></a>交换流</h3><p>信息沿着输入通路进入系统，将其转换为内部表示，然后通过交换中心（加工）的处理，再验证输出转换为外部形式离开系统。</p><h3 id="事务流"><a href="#事务流" class="headerlink" title="事务流"></a>事务流</h3><p>信息沿着输入通道进入系统，事务中心根据输入信息的类型在若干活动流选择一个执行。</p><h2 id="3、流程图和盒图"><a href="#3、流程图和盒图" class="headerlink" title="3、流程图和盒图"></a>3、流程图和盒图</h2><p>流程图和盒图都是描述程序的细节逻辑。<br>流程图的特点是简单、直观、医学，缺点是由于其随意性使画出来的流程图容易变成费及饿哦固化的流程图。<br>盒图是为了解决这一问题设计的。<br>盒图的主要特点是功能域明确、无法任意转移控制、容易确定全局数据和局部数据的作用域、容易表示嵌套关系、可以表示模块的层次结构。<br>盒图的缺点是修改相对比较困难。<br><img src="/images/ruankao/6-6.png"></p><h2 id="4、PAD和PDL"><a href="#4、PAD和PDL" class="headerlink" title="4、PAD和PDL"></a>4、PAD和PDL</h2><p>问题分析图PAD，能够方便的转换成程序语言的源程序代码。<br>语言描述工具PDL，伪代码，形式化语言，其控制结构和描述是确定的，但内部的描述语言是不确定的。</p><h1 id="三、模块设计"><a href="#三、模块设计" class="headerlink" title="三、模块设计"></a>三、模块设计</h1><p>在模块化方法中，将软件分解成若干小的模块，每个模块可独立开发、测试。<br>模块设计时，最重要的原则是实现信息隐蔽和模块独立。</p><h2 id="1、信息隐蔽原则"><a href="#1、信息隐蔽原则" class="headerlink" title="1、信息隐蔽原则"></a>1、信息隐蔽原则</h2><p>将难的决策、可能修改的决策、数据结构的内部链接以及对他所做的操作细节、内部特征码、与计算机硬件有关的细节隐藏起来。<br>可以提高软件的可修改性、可测试性和可移植性。</p><h2 id="2、模块独立性原则"><a href="#2、模块独立性原则" class="headerlink" title="2、模块独立性原则"></a>2、模块独立性原则</h2><p>每个模块完成一个相对独立的特定子功能，并与其他模块之间的联系最简单。<br>设计的目标是高内聚、低耦合。</p><p>从高到低对7种内聚类型排序：</p><table><thead><tr><th>内聚类型</th><th>描述</th></tr></thead><tbody><tr><td>功能内聚</td><td>完成一个单一功能，各个部分协同工作，缺一不可</td></tr><tr><td>顺序内聚</td><td>处理元素相关，而且必须顺序执行</td></tr><tr><td>通信内聚</td><td>所有处理元素居中在一个数据结构的区域上</td></tr><tr><td>过程内聚</td><td>处理元素相关，而且必须按特定的次序执行</td></tr><tr><td>瞬时内聚</td><td>所包含的任务必须在同一时间间隔内执行，如初始化模块</td></tr><tr><td>逻辑内聚</td><td>完成逻辑上相关的一组任务</td></tr><tr><td>偶然内聚</td><td>完成一组没有关系或松散关系的任务</td></tr></tbody></table><p>从低到高7种耦合类型排序：</p><table><thead><tr><th>耦合类型</th><th>描述</th></tr></thead><tbody><tr><td>非直接耦合</td><td>没有直接联系，互相不依赖对方</td></tr><tr><td>数据耦合</td><td>借助参数表传递简单数据</td></tr><tr><td>标记耦合</td><td>一个数据结构的一部分借助于模块接口来传递</td></tr><tr><td>控制耦合</td><td>模块间传递的信息中包括用于控制模块内部逻辑的信息</td></tr><tr><td>外部耦合</td><td>与软件意外的环境有关</td></tr><tr><td>公共耦合</td><td>多个模块引用同一个全局数据区</td></tr><tr><td>内容耦合</td><td>一个模块访问另一个模块的内部数据</td></tr><tr><td>-</td><td>一个模块不通过正常入口转到另一个模块的内部</td></tr><tr><td>-</td><td>两个模块有一部分程序代码重叠</td></tr><tr><td>-</td><td>一个模块有多个入口</td></tr></tbody></table><p>系统设计时，除了保持信息隐蔽和模块独立性之外，还需要考虑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">保持模块大小适中</span><br><span class="line">尽可能减少调用深度</span><br><span class="line">直接调用该模块的个数应该尽量大</span><br><span class="line">调用其他模块的个数不宜过大</span><br><span class="line">保证模块是单入口、单出口</span><br><span class="line">模块的作用于应该在控制域之内</span><br><span class="line">功能应该是可预测的</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-系统分析与设计方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统分析与设计方法（九）系统过渡计划</title>
      <link href="/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%B9%9D%EF%BC%89%E7%B3%BB%E7%BB%9F%E8%BF%87%E6%B8%A1%E8%AE%A1%E5%88%92/"/>
      <url>/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%B9%9D%EF%BC%89%E7%B3%BB%E7%BB%9F%E8%BF%87%E6%B8%A1%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>如果同时运行两个系统，会给客户造成多大的开销;<br>如果直接运行新系统，客户面对的风险有多大;<br>对新系统试运行时的查错和纠错，以及出现严重错误而导致停止运行时的应急措施;<br>客户运行新系统将面临的不利因素有哪些;<br>人员的培训。</p><h1 id="1-直接过渡"><a href="#1-直接过渡" class="headerlink" title="1.直接过渡"></a>1.直接过渡</h1><p>这是一种快速的系统过渡方式，当新系统运行时，立即关闭原来的系统。这种过渡方式非常简单，没有后勤保障的问题，也不要消耗很多资源。同时，它也意味着大风险，目标系统的特性决定了风险的大小。设计者主要要权衡当新系统失败时，系统停止运行或者勉强运行给客户带来的损失有多大。由于这种过渡方式简单而费用低廉，对于可以容忍停机一段时间的系统的实践者，可以采用这种方式。</p><h1 id="2-并行过渡"><a href="#2-并行过渡" class="headerlink" title="2.并行过渡"></a>2.并行过渡</h1><p>设计者采用并行过渡方式，让新系统和旧系统在一段时间里同时运行，通过这样的旧系统作为新系统的备份，可以大大降低系统过渡的风险。可是并行过渡显然比直接过渡要消耗更多的资源:现有的硬件资源必须保证能同时跑两套系统，这常常意味着增加服务器和额外的存储空间，需要增加人员来同时使用两套系统，或者增加现有员工的工作量，让他们同时操作两套系统。这种方式同时也增加了管理和后勤保障的复杂度。</p><p>有些系统无法使用并行过渡的方式，主要是客户没有足够的资源来维持两个系统同时运行，另外一种情况是新、旧系统差别太大，旧系统的数据无法为新系统采用。当客户无法使用并行过渡，又想尽可能地减少风险，设计者可以使用部分并行过渡的策略，使并行的开销减少到客户能够接受的范围内。</p><h1 id="3-阶段过渡"><a href="#3-阶段过渡" class="headerlink" title="3.阶段过渡"></a>3.阶段过渡</h1><p>通常在系统非常复杂、过于庞大以至于无法一次性进行过渡时采用，也适用于分阶段开发的系统。设计者需要设计一系列步骤和过程来完成整个系统的过渡，这种过渡方式和系统的复杂程度相关，随着系统的不同往往有很大的不同。和并行过渡一样，阶段过渡也能够减少风险，显然局部的失败要比全体的失败更容易接受，带来的损失更小。阶段过渡也带来了复杂性，有时候比并行过渡更加复杂。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-系统分析与设计方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统分析与设计方法（五）用户界面设计</title>
      <link href="/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>接口设计主要包括三个方面的内容:一是设计软件构件间的接口;二是设计模块和其他非人的信息生产者和消费者(如外部实体)的接口;三是人(如用户)和计算机间界面设计。</p><h1 id="一、用户界面设计的原则"><a href="#一、用户界面设计的原则" class="headerlink" title="一、用户界面设计的原则"></a>一、用户界面设计的原则</h1><p>用户界面设计必须考虑软件使用者的体力和脑力，设计时必须遵从三个黄金法则。</p><h2 id="1、置用户于控制之下"><a href="#1、置用户于控制之下" class="headerlink" title="1、置用户于控制之下"></a>1、置用户于控制之下</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">以不强迫用户进入不必要的或不希望的动作的方式来定义交互模式</span><br><span class="line">提供灵活的交互</span><br><span class="line">允许用户交互可以被中断和撤销</span><br><span class="line">当技能级别增长时可以使交互流水化并允许定制交互</span><br><span class="line">使用户隔离内部技术细节</span><br><span class="line">设计应允许用户和出现在屏幕上的对象直接交互</span><br></pre></td></tr></table></figure><h2 id="2、减少用户的记忆负担"><a href="#2、减少用户的记忆负担" class="headerlink" title="2、减少用户的记忆负担"></a>2、减少用户的记忆负担</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">减少对短期记忆的要求</span><br><span class="line">建立有意义的默认</span><br><span class="line">定义直觉性的捷径</span><br><span class="line">界面的视觉布局应该基于对真实世界的隐喻</span><br><span class="line">以不断进展的方式提示信息</span><br></pre></td></tr></table></figure><h2 id="3、保持界面的一致"><a href="#3、保持界面的一致" class="headerlink" title="3、保持界面的一致"></a>3、保持界面的一致</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">允许用户将当前任务放入有意义的语境</span><br><span class="line">在应用系列内保持一致性，如果过去的交互模型已经建立了用户期望，除非有不得已的理由，否则不要改变它</span><br></pre></td></tr></table></figure><p>除此之外，还应该考虑表所示的设计原则。</p><p><img src="/images/ruankao/6-18.png"></p><h1 id="二、用户界面设计过程"><a href="#二、用户界面设计过程" class="headerlink" title="二、用户界面设计过程"></a>二、用户界面设计过程</h1><p><img src="/images/ruankao/6-19.png"></p><h2 id="1-用户、任务和环境分析"><a href="#1-用户、任务和环境分析" class="headerlink" title="(1)用户、任务和环境分析"></a>(1)用户、任务和环境分析</h2><p>着重于分析将和系统交互的用户的特点。记录下技术级别、业务理解及对新系统的一般感悟，并定义不同的用户类别。然后对用户将要完成什么样的任务进行详细的标识和描述。最后对用户的物理工作环境进行了解与分析。</p><h2 id="2-界面设计"><a href="#2-界面设计" class="headerlink" title="(2)界面设计"></a>(2)界面设计</h2><p>主要包括建立任务的目标和意图，为每个目标或意图制定特定的动作序列，按在界面上执行的方式对动作序列进行规约，指明系统状态，定义控制机制，指明控制机制如何影响系统状态，指明用户如何通过界面上的信息来解释系统状态。</p><h2 id="3-实现"><a href="#3-实现" class="headerlink" title="(3)实现"></a>(3)实现</h2><p>就是根据界面设计进行实现，前期可以通过原型工具来快速实现，减少返工的工作量。</p><h2 id="4-界面确认"><a href="#4-界面确认" class="headerlink" title="(4)界面确认"></a>(4)界面确认</h2><p>界面实现后就可以进行一些定性和定量的数据收集，以进行界面的评估，以调整界面的设计。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-系统分析与设计方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统分析与设计方法（八）系统运行环境的集成与设计</title>
      <link href="/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E5%85%AB%EF%BC%89%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E7%9A%84%E9%9B%86%E6%88%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E5%85%AB%EF%BC%89%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%E7%9A%84%E9%9B%86%E6%88%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>在设计一个新的系统时，设计者必须考虑目标系统的运行环境问题。软件的运行环境是指系统运行的设备、操作系统和网络配置。</p><h1 id="1-集中式系统"><a href="#1-集中式系统" class="headerlink" title="1.集中式系统"></a>1.集中式系统</h1><p>所有的操作都集中于一台主机中。</p><p>集中式系统常见于银行、保险、证券行业，它们含有大规模的处理应用。</p><p>在现代的系统中，集中式系统通常是某个分布式系统的一个环节。</p><p>集中式系统由以下几个部分组成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1)单计算机结构:这种结构简单、容易维护，但是处理能力受到限制。 </span><br><span class="line">(2)集群结构:由多个计算机组成，这些计算机具有类似的硬件平台、操作系统等。通常采用负载均衡、资源共享等方式实现更大的处理能力和容量。 </span><br><span class="line">(3)多计算机结构:由多个计算机组成，这些计算机之间操作环境可能不同。适用于当系统可以分解成多个不同的子系统时。</span><br></pre></td></tr></table></figure><h1 id="2-分布式系统"><a href="#2-分布式系统" class="headerlink" title="2.分布式系统"></a>2.分布式系统</h1><p>分布式系统由于网络的普遍延伸，费用的不断降低而越来越成为大型系统的首选环境。分布式系统必须基于网络，这个网络可以是在一个地域内的局域网，也可以是跨越不同城市乃至国家的广域网。对比集中式的计算机环境，分布式系统有着多种多样的形式。这也给设计者在确定系统运行环境时带来一定的烦恼。</p><h1 id="3-C-S-结构"><a href="#3-C-S-结构" class="headerlink" title="3.C/S 结构"></a>3.C/S 结构</h1><p>由提供服务的服务器和发起请求、接受结果的客户机构成。</p><h1 id="4-多层结构"><a href="#4-多层结构" class="headerlink" title="4.多层结构"></a>4.多层结构</h1><p>C/S 结构的扩展。</p><p>典型的分为由存储数据的数据库服务器作为数据层、实现商业规则的程序作为逻辑层、管理用户输入输出的视图层所组成的三层结构。</p><p>多层结构形式复杂，功能多样。实现多层结构常常需要来实现不同层次间通信的专门程序——管件，也称为中间件。中间件大多数实现远程程序调用、对象请求调度等功能。</p><h1 id="5-Internet、Intranet-和-Extranet"><a href="#5-Internet、Intranet-和-Extranet" class="headerlink" title="5.Internet、Intranet 和 Extranet"></a>5.Internet、Intranet 和 Extranet</h1><p>Internet 是全球的网络集合，使用通用的 TCP/IP 协议来相互连接。Internet 提供电子邮件、文件传输、远程登录等服务。</p><p>Intranet 是私有网络，只限于内部使用，也使用 TCP/IP 协议。</p><p>Extranet 是一个扩展的 Intranet。它包括企业之外的和企业密切相关合作的其他企业。 Extranet 允许分离的组织交换信息并进行合作，这样就形成了一个虚拟组织。</p><p>现在的 VPN 技术允许在公用网络上架构只对组织内部开发服务。</p><p>Web 同样基于 C/S 结构，实际上 Web 接口是一个通用的接口，不是只能使用浏览器 的协议，它同样能够在普通的程序中使用。</p><p>Internet 和 Web 已经给设计者提供了一个非常富有吸引力的选择方案。它的优势在于:它们已经成为网络的事实上的标准，支持它们的软件已经广泛地存在于全世界的计算机中，而且通信费用已经下降到很有竞争力的水平。</p><p>采用 Internet 时，必须考虑其不利的一面。 Internet 的安全性过去、现在、以后都是设计者头痛的问题。其他诸如可靠性、系统吞吐量、不断发展的技术和标准都是影响系统选择它们作为运行环境的不利因素。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-系统分析与设计方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统分析与设计方法（六）工作流设计</title>
      <link href="/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E5%85%AD%EF%BC%89%E5%B7%A5%E4%BD%9C%E6%B5%81%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E5%85%AD%EF%BC%89%E5%B7%A5%E4%BD%9C%E6%B5%81%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>现实中的流程存在大量的不确定性。</p><h1 id="一、工作流设计概述"><a href="#一、工作流设计概述" class="headerlink" title="一、工作流设计概述"></a>一、工作流设计概述</h1><p>工作流是一类能够完全或者部分自动执行的经营过程，根据一系列过程规则、文档、信息或任务在不同的执行者之间 传递、执行。</p><h2 id="1-工作流"><a href="#1-工作流" class="headerlink" title="(1)工作流"></a>(1)工作流</h2><p>工作流是现实中的具体工作从开始到结束过程的抽象和概括。这个过程包括了众多因素:任务顺序、路线规则、时间时限约束等。</p><h2 id="2-流程定义"><a href="#2-流程定义" class="headerlink" title="(2)流程定义"></a>(2)流程定义</h2><p>流程定义是指对业务过程的形式化表示，它定义了过程运行中的活动和所涉及的各种信息。这些信息包括</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">过程的开始和完成条件</span><br><span class="line">构成过程的活动及进行活动间导航的规则</span><br><span class="line">用户所需要完成的任务</span><br><span class="line">可能被调用的应用</span><br><span class="line">工作流间的引用关系</span><br><span class="line">工作流数据的定义</span><br></pre></td></tr></table></figure><h2 id="3-流程实例"><a href="#3-流程实例" class="headerlink" title="(3)流程实例"></a>(3)流程实例</h2><p>也称为工作，是一个流程定义的运行实例。</p><h2 id="4-工作流管理系统"><a href="#4-工作流管理系统" class="headerlink" title="(4)工作流管理系统"></a>(4)工作流管理系统</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">存储流程的定义</span><br><span class="line">按照所使用的流程定义来触发流程状态的改变</span><br><span class="line">推动流程的运转</span><br></pre></td></tr></table></figure><p>这个推动的依据常常称为工作流引擎。</p><h2 id="5-流程定义工具"><a href="#5-流程定义工具" class="headerlink" title="(5)流程定义工具"></a>(5)流程定义工具</h2><p>使用流程定义工具来完成流程定义的工作</p><h2 id="6-参与者"><a href="#6-参与者" class="headerlink" title="(6)参与者"></a>(6)参与者</h2><p>可以是具体的人或者角色(企业内部有特别共同作用的多个人)，也可以是自动化系统，甚至是其他系统。</p><h2 id="7-活动"><a href="#7-活动" class="headerlink" title="(7)活动"></a>(7)活动</h2><p>活动是流程定义中的一个元素，一次活动可能改变流程处理数据的内容、流程的状态，并可能将流程推动到其他活动中去。活动可以由人来完成，也可以是系统自动的处理过程。</p><h2 id="8-活动所有者"><a href="#8-活动所有者" class="headerlink" title="(8)活动所有者"></a>(8)活动所有者</h2><p>决定该活动是否结束</p><h2 id="9-工作所有者"><a href="#9-工作所有者" class="headerlink" title="(9)工作所有者"></a>(9)工作所有者</h2><p>有权整体控制流程实例执行过程的参与者</p><h2 id="10-工作项"><a href="#10-工作项" class="headerlink" title="(10)工作项"></a>(10)工作项</h2><p>流程实例中活动的参与者将要执行的工作</p><h1 id="二、工作流管理系统"><a href="#二、工作流管理系统" class="headerlink" title="二、工作流管理系统"></a>二、工作流管理系统</h1><p>在工作流形式化表示的驱动下，通过软件的执行而完成工作流定义、管理及执行的系统。<br>主要目标是对业务过程中各活动发生的先后次序及与活动相关的相应人力或信息资源的调用进行管理，而实现业务过程的自动化。</p><p>工作流管理系统的6个最基本组成：</p><h2 id="1-流程定义工具"><a href="#1-流程定义工具" class="headerlink" title="(1)流程定义工具"></a>(1)流程定义工具</h2><p>提供图形化或者其他方式的界面给设计者。由设计者将实际工作流程进行抽象，并将设计者提交的流程定义转换为形式化语言描述，提供给计算机工作流执行服务进行流程实例处理的依据。</p><h2 id="2-工作流执行服务"><a href="#2-工作流执行服务" class="headerlink" title="(2)工作流执行服务"></a>(2)工作流执行服务</h2><p>1、使用一种或者多种数据流引擎，对流程定义进行解释，激活有效的流程实例，推动流程实例在不同的活动中运转。<br>2、和客户应用程序、其他工作流服务执行程序及其他应用程序进行交互，从而完成流程实例的创建、执行和管理工作。<br>3、为每个用户维护一个活动列表，告诉用户当前必须处理的任务。<br>4、通过电子邮件甚至是短消息的形式提醒用户任务的到达。</p><h2 id="3-其他工作流执行服务"><a href="#3-其他工作流执行服务" class="headerlink" title="(3)其他工作流执行服务"></a>(3)其他工作流执行服务</h2><p>大型的企业工作流应用，往往包括多个工作流管理系统。这就需要这些工作流管理系统之间进行有效的交互，避免画地为牢、信息孤岛的现象出现。</p><h2 id="4-客户应用程序"><a href="#4-客户应用程序" class="headerlink" title="(4)客户应用程序"></a>(4)客户应用程序</h2><p>最终用户的界面，用户通过使用这部分软件对工作流的数据进行必要的处理，如果用户是当前活动的拥有者，还可通过客户应用程序改变流程实例的活动，将流程实例推动到另外一个活动中。</p><h2 id="5-被调用应用程序"><a href="#5-被调用应用程序" class="headerlink" title="(5)被调用应用程序"></a>(5)被调用应用程序</h2><p>对工作流所携带数据的处理程序。</p><h2 id="6-管理和监控工具"><a href="#6-管理和监控工具" class="headerlink" title="(6)管理和监控工具"></a>(6)管理和监控工具</h2><p>对流程实例的状态查询、挂起、恢复、销毁等操作，同时提供系统参数、系统运行情况统计等数据。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-系统分析与设计方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统分析与设计方法（四）面向对象的分析与设计</title>
      <link href="/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/09/24/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>面向对象方法以客观世界中的对象为中心，其分析和设计思想符合人们的思维方式，分析和设计的结构与客观世界的实际比较接近。</p><p>面向对象方法中，分析和设计的界面并不明显，他们采用的相同的符号表示，能方便的从分析阶段平滑过渡到设计阶段。</p><p>在显示生活中，用户的需求经常会发生变化，但是客观世界的对象集对象间的关系比较稳定，因此用面向对象方法分析和设计的结构也相对比较稳定。</p><h1 id="一、面向对象的基本概念"><a href="#一、面向对象的基本概念" class="headerlink" title="一、面向对象的基本概念"></a>一、面向对象的基本概念</h1><h2 id="1、对象和类"><a href="#1、对象和类" class="headerlink" title="1、对象和类"></a>1、对象和类</h2><p>对象是描述客观事物的实体，由对象标识（名称）、属性（状态、数据、成员变量）和服务（操作、行为、方法）是3个要素组成，封装成一个整体，以接口的形式对外提供服务。<br>类是具有相同属性和服务的一个或一组对象的抽象。<br>类与对象是抽象描述和具体实例的关系。一个具体的对象被称为类的一个实例。</p><p>类可以分为实体类、边界类、控制类。</p><h3 id="（1）实体类"><a href="#（1）实体类" class="headerlink" title="（1）实体类"></a>（1）实体类</h3><p>实体类映射需求中的每个实体，实体类保存需要存储在永久存储体重的信息。<br>实体类一定有属性，不一定有操作。</p><h3 id="（2）控制类"><a href="#（2）控制类" class="headerlink" title="（2）控制类"></a>（2）控制类</h3><p>控制类是用于控制用力工作的类，一般由动宾结构的短语转化来的名称，例如身份验证。<br>控制类没有属性，但是有方法。</p><h3 id="（3）边界类"><a href="#（3）边界类" class="headerlink" title="（3）边界类"></a>（3）边界类</h3><p>边界类用于封装在用例内、外流动的信息或数据流。边界类位于系统与外界的交界处，包括所有窗体、报表、打印机和扫描仪等硬件接口，以及与其他系统的接口。<br>边界类通常既有属性也要方法。</p><h2 id="2、继承与泛化"><a href="#2、继承与泛化" class="headerlink" title="2、继承与泛化"></a>2、继承与泛化</h2><p>用来说明特殊类（子类）与一般类（父类）的关系。</p><p><img src="/images/ruankao/6-7.png"></p><h2 id="3、多态与重载"><a href="#3、多态与重载" class="headerlink" title="3、多态与重载"></a>3、多态与重载</h2><p>一般类中定义的属性或服务被特殊类集成后，可以具有不同的数据类型或表现出不同的行为。<br>通常用重载和改写实现。<br>重载是编译时制定的，改写是运行时选择的。</p><h2 id="4、模板类"><a href="#4、模板类" class="headerlink" title="4、模板类"></a>4、模板类</h2><p>也称为类属类，用来实现参数多态机制。<br>一个类属类是一组类的一个特性抽象。</p><h2 id="5、消息和消息通信"><a href="#5、消息和消息通信" class="headerlink" title="5、消息和消息通信"></a>5、消息和消息通信</h2><p>消息是想对象发出的服务请求。 为对象间提供唯一合法的动态联系的途径。</p><h1 id="二、面向对象分析"><a href="#二、面向对象分析" class="headerlink" title="二、面向对象分析"></a>二、面向对象分析</h1><p>对象技术的流行，演化出数十种不同的OOA方法，其中比较流行的包括OMT、OOA、OOSE、Booch等。OMT、OOSE、Booch最后统一成为UML。</p><h2 id="1、OOA-OOD方法"><a href="#1、OOA-OOD方法" class="headerlink" title="1、OOA/OOD方法"></a>1、OOA/OOD方法</h2><p>面向对象分析（OOA），面向对象设计（OOD）。<br>OOA模型包括<em><strong>主题、对象类、结构、属性和服务</strong></em>5个层次。需要经过<em><strong>标识对象类、标识结构与关联、划分主题、定义属性、定义服务</strong></em>5个步骤完成整个分析工作。<br>OOD贯穿OOA的5个层次和5个活动，由<em><strong>人机交互部件、问题域部件、任务管理部件、数据管理部件</strong></em>4个部分组成。</p><h3 id="（1）设计问题域部分"><a href="#（1）设计问题域部分" class="headerlink" title="（1）设计问题域部分"></a>（1）设计问题域部分</h3><p>OOA的结果是OOD的问题域部件，分析的结果在OOD中可以被改动或增补，但基于问题域的总体组织架构是长时间稳定的。</p><h3 id="（2）设计人机交互部件"><a href="#（2）设计人机交互部件" class="headerlink" title="（2）设计人机交互部件"></a>（2）设计人机交互部件</h3><p>在上述结果中加入人机交互的设计和交互细节。</p><h3 id="（3）设计任务管理部分"><a href="#（3）设计任务管理部分" class="headerlink" title="（3）设计任务管理部分"></a>（3）设计任务管理部分</h3><p>识别事件驱动任务、识别时钟驱动任务、识别优先任务和关键任务、识别协调者、审查每个任务并定义每个任务。</p><h3 id="（4）设计数据管理部分"><a href="#（4）设计数据管理部分" class="headerlink" title="（4）设计数据管理部分"></a>（4）设计数据管理部分</h3><p>数据管理部分提供了在数据管理系统中存储和紧缩对象的基本结构，其目的是隔离数据管理方法对其他部分的影响。</p><h2 id="2、Booch方法"><a href="#2、Booch方法" class="headerlink" title="2、Booch方法"></a>2、Booch方法</h2><p>Booch认为软件开发是螺旋上升的过程，每个周期包括 标识类和对象、确定类和对象的含义、标识关系、说明每个类的接口和实现 4个步骤。</p><table><thead><tr><th></th><th>静态模型</th><th>动态模型</th></tr></thead><tbody><tr><td>逻辑模型</td><td>类图、对象图</td><td>状态转换图、时序图</td></tr><tr><td>物理模型</td><td>模块图、进程图</td><td>-</td></tr></tbody></table><p>Booch方法的开发过程是一个迭代的渐进式的系统开发过程，分为宏过程和微过程梁两类。<br>宏过程用于控制微过程，5个主要活动包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">建立核心需求的概念化</span><br><span class="line">建立模型的分析</span><br><span class="line">建立架构的设计</span><br><span class="line">形成实现的进化</span><br><span class="line">管理软件交付使用的维护</span><br></pre></td></tr></table></figure><p>微过程基本上代表开发人团的日常活动，4个重要、没有顺序的步骤包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在给定的抽象层次上识别出类和对象</span><br><span class="line">识别出这些类和对象的语义</span><br><span class="line">识别出类间和对象间的关系</span><br><span class="line">实现类和对象</span><br></pre></td></tr></table></figure><h2 id="3、OMT方法"><a href="#3、OMT方法" class="headerlink" title="3、OMT方法"></a>3、OMT方法</h2><p>对象建模技术（OMT）主要用于分析、系统设计和对象设计。<br>包括对象模型、动态模型、功能模型。</p><table><thead><tr><th>模型</th><th>说明</th><th>主要技术</th></tr></thead><tbody><tr><td>对象模型</td><td>描述系统中对象的静态结构、对象之间的关系、属性、操作。他表示静态的、结构上的、系统的“数据”特征。</td><td>对象图</td></tr><tr><td>动态模型</td><td>描述与时间和操作顺序有关的系统特征，如激发时间、时间序列、确定时间先后关系的状态。他表示瞬时、行为上的、系统的“控制”特征</td><td>状态图</td></tr><tr><td>功能模型</td><td>描述与值的变换有关的系统特征：功能、映射、约束和函数依赖</td><td>数据流图</td></tr></tbody></table><h2 id="4、OOSE方法"><a href="#4、OOSE方法" class="headerlink" title="4、OOSE方法"></a>4、OOSE方法</h2><p>面向对象软件工程（OOSE）在OMT的基础上对功能模型进行了补充，提出了“用例”的概念，最终取代数据流图进行需求分析和建立功能模型。</p><h1 id="三、统一建模语言"><a href="#三、统一建模语言" class="headerlink" title="三、统一建模语言"></a>三、统一建模语言</h1><p>统一建模语言（UML）</p><h2 id="1、UML是什么"><a href="#1、UML是什么" class="headerlink" title="1、UML是什么"></a>1、UML是什么</h2><p>是一种用于详细描述的可视化语言。<br>是一种构造语言，虽然不是一种可视化的编程语言，但与编程语言直接相连，有较好的映射关系。允许正向工程、逆向工程。<br>是一种文档化语言。</p><h2 id="2、UML的结构"><a href="#2、UML的结构" class="headerlink" title="2、UML的结构"></a>2、UML的结构</h2><p>UML由构造块、公共机制和架构三部分组成。</p><h3 id="（1）构造块"><a href="#（1）构造块" class="headerlink" title="（1）构造块"></a>（1）构造块</h3><p>构造块也就是基本的UML建模元素、关系和图。<br>建模元素：包括构造事物（类、接口、协作、用例、活动类、组件、节点等）、行为事物（交互、状态机）、分组事物（包）、注释事物。<br>关系：包括关联关系、依赖关系、泛化关系、实现关系。<br>图：UML2.0包括14种不同的图，分为表示系统静态结构的静态模型（包括类图、对象图、包图、构件图、部署图、制品图），以及表示系统动态结构的动态模型（包括对象图、用例图、顺序图、通信图、定时图、状态图、活动图、我交互概览图）。</p><h3 id="（2）公共机制"><a href="#（2）公共机制" class="headerlink" title="（2）公共机制"></a>（2）公共机制</h3><p>指达到特定目标的公共UML方法，包括规格说明、修饰、公共分类和扩展机制4种。<br>规格说明：是元素语义的文本描述。<br>修饰：通过修饰给模型元素表达更多的信息。<br>公共分类：包括类元和实体、接口和实现两组公共分类。<br>扩展机制：包括约束、构造型、标记值。</p><h3 id="（3）架构"><a href="#（3）架构" class="headerlink" title="（3）架构"></a>（3）架构</h3><p>架构是系统的组织结构，包括系统分解的组成部分、他们的关联性、交互、机制和指导原则。</p><p>具体来说，就是5个系统视图。</p><p>逻辑视图：以问题域的语汇组成的类和对象集合。<br>进程视图：可执行线程和进程作为活动类的建模，他是逻辑视图的一次执行实例。<br>实现视图：对组成基于系统的物理代码的文件和组件进行建模。<br>部署视图：把组件物理的部署到一组物理的可计算的节点上。<br>用例视图：最基本的需求分析模型。</p><h2 id="3、用例图基础"><a href="#3、用例图基础" class="headerlink" title="3、用例图基础"></a>3、用例图基础</h2><p>外部参与者所理解的系统功能。</p><p><img src="/images/ruankao/6-8.png"></p><p>包括参与者、用例、包含和扩展。</p><h2 id="4、类图和对象图基础"><a href="#4、类图和对象图基础" class="headerlink" title="4、类图和对象图基础"></a>4、类图和对象图基础</h2><p>类图技术是OO方法的核心。</p><p><img src="/images/ruankao/6-9.png"></p><h3 id="（1）类和对象"><a href="#（1）类和对象" class="headerlink" title="（1）类和对象"></a>（1）类和对象</h3><p>类是对一类具有相同特征的对象的描述。<br>对象是类的实例。<br>类的属性的语法为: “可见性 属性名:类型 = 默认值 {约束特性}”。<br>可见性包括 Public、Private 和 Protected，分别用+、-、#号表示。<br>类的操作的语法为: “可见性:操作名(参数表):返回类型 {约束特性}”。</p><h3 id="（2）类之间的关系"><a href="#（2）类之间的关系" class="headerlink" title="（2）类之间的关系"></a>（2）类之间的关系</h3><p>①依赖关系。使用带箭头的虚线表示依赖关系。<br>②泛化关系。继承关系是泛化关系的反关系，也就是说子类是从父类中继承的，而父类则是子类的泛化。使用带空心箭头的实线表示，箭头指向父类。<br>③关联关系。用一条实线来表示关联关系。<br>聚合关系:聚合是一种特殊形式的关联。聚合表示类之间的关系是整体与部分的关系。例如 一辆轿车包含四个车轮、一个方向盘、一个发动机和一个底盘，就是聚合的一个例子。在 UML 中，用一个带空心菱形的实线表示，空心菱形指向的是代表“整体”的类。<br>组合关系:如果聚合关系中的表示“部分”的类的存在，与表示“整体”的类有着紧密的关系，例如“公司”与“部门”之间的关系，那么就应该使用“组合”关系来表示。在 UML 中， 用带有实心菱形的实线表示，菱形指向的是代表“整体”的类。<br>④实现关系。用一个带空心箭头的虚线表示。<br><img src="/images/ruankao/6-9-1.png"></p><h3 id="（3）多重性问题"><a href="#（3）多重性问题" class="headerlink" title="（3）多重性问题"></a>（3）多重性问题</h3><p>多重性是用来说明关联的两个类之间的数量关系的。<br>0…1;0…<em>;1…1;1…</em>;*</p><h3 id="（4）类图"><a href="#（4）类图" class="headerlink" title="（4）类图"></a>（4）类图</h3><p>对于软件系统，其类模型和对象模型类图描述类和类之间的静态关系。与数据模型不同，它不仅显示了信息的结构，同时还描述了系统的行为。类图是定义其他图的基础。</p><h3 id="（5）对象图"><a href="#（5）对象图" class="headerlink" title="（5）对象图"></a>（5）对象图</h3><p>UML 中对象图与类图具有相同的表示形式。对象图可以看作是类图的一个实例。</p><h2 id="5、交互图基础"><a href="#5、交互图基础" class="headerlink" title="5、交互图基础"></a>5、交互图基础</h2><p>交互图是表示各组对象如何按某种行为进行协作的模型。通常可以使用一个交互图来表示和说明一个用例的行为。</p><h3 id="（1）顺序图"><a href="#（1）顺序图" class="headerlink" title="（1）顺序图"></a>（1）顺序图</h3><p>顺序图用来描述对象之间动态的交互关系，着重体现对象间消息传递的时间顺序。顺序图允许直观地表示出对象的生存期，在生存期内，对象可以对输入消息做出响应，并且可以发送信息。<br><img src="/images/ruankao/6-10.png"></p><h3 id="（2）通信图"><a href="#（2）通信图" class="headerlink" title="（2）通信图"></a>（2）通信图</h3><p>通信图用于描述相互合作的对象间的交互关系和链接关系。虽然顺序图和通信图都用来描述对象间的交互关系，但侧重点不一样。顺序图着重体现交互的时间顺序，通信图则着重体现交互对象间的静态链接关系。<br><img src="/images/ruankao/6-11.png"></p><h3 id="（3）定时图"><a href="#（3）定时图" class="headerlink" title="（3）定时图"></a>（3）定时图</h3><p>定时图是一种特殊形式的顺序图。<br><img src="/images/ruankao/6-12.png"></p><h2 id="6、状态图基础"><a href="#6、状态图基础" class="headerlink" title="6、状态图基础"></a>6、状态图基础</h2><p>状态图用来描述一个特定对象的所有可能状态及其引起状态转移的事件。<br><img src="/images/ruankao/6-13.png"></p><h2 id="7、活动图基础"><a href="#7、活动图基础" class="headerlink" title="7、活动图基础"></a>7、活动图基础</h2><p>活动图的应用非常广泛，它既可用来描述操作(类的方法)的行为，也可以描述用例和对象内部的工作过程。<br>活动图是由状态图变化而来的，它们各自用于不同的目的。活动图依据对象状态的变化来捕获动作(将要执行的工作或活动)与动作的结果。活动图中一个活动结束后将立即进入下一个活动(在状态图中状态的变迁可能需要事件的触发)。</p><h3 id="1-基本活动图。"><a href="#1-基本活动图。" class="headerlink" title="(1)基本活动图。"></a>(1)基本活动图。</h3><p><img src="/images/ruankao/6-14.png"><br>判定:用菱形表示。<br>分支与组合:用粗线来表示分支和组合。</p><h3 id="2-带泳道的活动图。"><a href="#2-带泳道的活动图。" class="headerlink" title="(2)带泳道的活动图。"></a>(2)带泳道的活动图。</h3><p><img src="/images/ruankao/6-15.png"></p><h3 id="3-对象流。"><a href="#3-对象流。" class="headerlink" title="(3)对象流。"></a>(3)对象流。</h3><p>在活动图中可以出现对象。对象可以作为活动的输入或输出，对象与活 动间的输入/输出关系由虚线箭头来表示。如果仅表示对象受到某一活动的影响，则可用不带箭头的虚线来连接对象与活动。</p><h3 id="4-信号。"><a href="#4-信号。" class="headerlink" title="(4)信号。"></a>(4)信号。</h3><p>在活动图中可以表示信号的发送与接收，分别用发送和接收标识来表示。 发送和接收标识也可与对象相连，用于表示消息的发送者和接收者。</p><h2 id="8、构件图基础"><a href="#8、构件图基础" class="headerlink" title="8、构件图基础"></a>8、构件图基础</h2><p>构件图是面向对象系统的物理方面进行建模要用的两种图之一。它可以有效地显示一组构件，以及它们之间的关系。构件图中通常包括构件、接口及各种关系。<br><img src="/images/ruankao/6-16.png"><br>通常构件指的是源代码文件、二进制代码文件和可执行文件等。而构件图就是用来显示编译、链接或执行时构件之间的依赖关系的。</p><h3 id="对源代码进行建模"><a href="#对源代码进行建模" class="headerlink" title="对源代码进行建模"></a>对源代码进行建模</h3><p>这样可以清晰地表示出各个不同源程序文件之间的关系。</p><h3 id="对物理数据库建模"><a href="#对物理数据库建模" class="headerlink" title="对物理数据库建模"></a>对物理数据库建模</h3><p>用来表示各种类型的数据库、表之间的关系。</p><h3 id="对可调整的系统建模"><a href="#对可调整的系统建模" class="headerlink" title="对可调整的系统建模"></a>对可调整的系统建模</h3><p>例如对应用了负载均衡、故障恢复等系统的建模。</p><p>在绘制构件图时，应该注意侧重于描述系统的静态实现视图的一个方面，图形不要过于简化，应该为构件图取一个直观的名称，在绘制时避免产生线的交叉。</p><h2 id="9、部署图基础"><a href="#9、部署图基础" class="headerlink" title="9、部署图基础"></a>9、部署图基础</h2><p>部署图，也称为实施图，它和构件图一样，是面向对象系统的物理方面建模的两种图之一。构件图是说明构件之间的逻辑关系，而部署图则是在此基础上更进一步地描述系统硬件的物理拓扑结构及在此结构上执行的软件。部署图可以显示计算结点的拓扑结构和通信路径、结点上运行的软件构件，常用于帮助理解分布式系统。</p><h3 id="1-节点和连接。"><a href="#1-节点和连接。" class="headerlink" title="(1)节点和连接。"></a>(1)节点和连接。</h3><p>节点代表一个物理设备及其上运行的软件系统，如一台 UNIX 主机、一个 PC 终端、一台打印机、一个传感器等。<br>节点之间的连线表示系统之间进行交互的通信路径，在 UML 中被称为连接。<br>通信类型则放在连接旁边的“《》”之间，表示所用的通信协议或网络类型。</p><h3 id="2-构件和接口。"><a href="#2-构件和接口。" class="headerlink" title="(2)构件和接口。"></a>(2)构件和接口。</h3><p>在部署图中，构件代表可执行的物理代码模块，如一个可执行程序。</p><p><img src="/images/ruankao/6-17.png"><br>在面向对象方法中，类和构件等元素并不是所有的属性和操作都对外可见。它们对外提供了可见操作和属性，称之为类和构件的接口。界面可以表示为一头是小圆圈的直线。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-系统分析与设计方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统分析与设计方法（一）定义问题与归结模型</title>
      <link href="/2021/09/22/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%9A%E4%B9%89%E9%97%AE%E9%A2%98%E4%B8%8E%E5%BD%92%E7%BB%93%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/09/22/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%9A%E4%B9%89%E9%97%AE%E9%A2%98%E4%B8%8E%E5%BD%92%E7%BB%93%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>软件系统的目的是为了解决问题。<br>定义问题的过程包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、理解真实世界中的问题和用户的需要。</span><br><span class="line">2、提出满足这些需要的解决方案的过程。</span><br></pre></td></tr></table></figure><h1 id="一、问题分析"><a href="#一、问题分析" class="headerlink" title="一、问题分析"></a>一、问题分析</h1><h2 id="1、在问题定义上达成共识"><a href="#1、在问题定义上达成共识" class="headerlink" title="1、在问题定义上达成共识"></a>1、在问题定义上达成共识</h2><p>用标准化的格式将问题写出来。</p><h2 id="2、理解问题的本质"><a href="#2、理解问题的本质" class="headerlink" title="2、理解问题的本质"></a>2、理解问题的本质</h2><p>通常用因果鱼骨图和帕累托图两种方式。</p><h3 id="（1）因果鱼骨图"><a href="#（1）因果鱼骨图" class="headerlink" title="（1）因果鱼骨图"></a>（1）因果鱼骨图</h3><p><img src="/images/ruankao/5-1.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将问题简明扼要的写在右侧方框中。</span><br><span class="line">确定问题潜在原因的主要类别，将他们连在鱼的脊骨上。</span><br><span class="line">用头脑风暴法寻找原因并归类。</span><br></pre></td></tr></table></figure><h3 id="（2）帕累托图"><a href="#（2）帕累托图" class="headerlink" title="（2）帕累托图"></a>（2）帕累托图</h3><p><img src="/images/ruankao/5-2.png"><br>采用直方图的形式，将问题的相对频率或大小从高到低排列，聚焦重要的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">明确问题。</span><br><span class="line">找到问题的各种可能原因。</span><br><span class="line">选择评价标准和考察期限，最常用的标准是频率和费用。</span><br><span class="line">收集各种原因发生的频率和费用数据。</span><br><span class="line">将原因按发生的频率或费用从大到小排列。</span><br><span class="line">将原因排在横轴，频率或费用排在纵轴。</span><br></pre></td></tr></table></figure><h2 id="3、确认项目干系人和用户"><a href="#3、确认项目干系人和用户" class="headerlink" title="3、确认项目干系人和用户"></a>3、确认项目干系人和用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">系统的用户是谁？</span><br><span class="line">系统的客户是谁？</span><br><span class="line">那些人收到系统输出的影响？</span><br><span class="line">系统完成收入使用后谁对她进行评估？</span><br><span class="line">其他系统内部或外部的客户？</span><br><span class="line">系统将来谁维护？</span><br></pre></td></tr></table></figure><h2 id="4、定义系统的边界"><a href="#4、定义系统的边界" class="headerlink" title="4、定义系统的边界"></a>4、定义系统的边界</h2><p>解决方案系统和现实世界之间的边界。在系统边界中，信息以输入和输出的形式流入系统，并由系统流向系统外的用户。</p><h3 id="（1）上下文范围图"><a href="#（1）上下文范围图" class="headerlink" title="（1）上下文范围图"></a>（1）上下文范围图</h3><p>数据流图中的顶层图，它反映领域信息，能够清晰的显示出系统和相邻系统的职责，能够从宏观层面了解系统。</p><h3 id="（2）用例模型"><a href="#（2）用例模型" class="headerlink" title="（2）用例模型"></a>（2）用例模型</h3><p>以参与者的角度描述“和系统进行交互的事物”。<br><img src="/images/ruankao/5-3.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">谁会对系统提供信息？</span><br><span class="line">谁会在系统中使用信息？</span><br><span class="line">谁会从系统中删除信息？</span><br><span class="line">谁将操作系统？</span><br><span class="line">系统将会在哪里使用？</span><br><span class="line">系统从那里得到信息？</span><br><span class="line">哪些外部系统要和系统进行交互？</span><br></pre></td></tr></table></figure><h2 id="5、确定系统实现的约束"><a href="#5、确定系统实现的约束" class="headerlink" title="5、确定系统实现的约束"></a>5、确定系统实现的约束</h2><p>从约束源开始考虑。<br>进度、投资收益、人员、设备预算、环境、操作系统、数据库、主机和客户机系统、技术问题、行政问题、已有软件、公司总体战略和程序、工具和语言的选择、人员和其他资源限制等。</p><h1 id="二、问题定义"><a href="#二、问题定义" class="headerlink" title="二、问题定义"></a>二、问题定义</h1><h2 id="1、目标"><a href="#1、目标" class="headerlink" title="1、目标"></a>1、目标</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">优势：目标不仅仅是解决问题，还要提供业务上的优势。</span><br><span class="line">度量：度量优势的标准</span><br><span class="line">合理性：获得的业务优势要大于工作量成本，才是合理的解决方案。</span><br><span class="line">可行性：要探寻能够满足度量标准的解决方案。</span><br><span class="line">可达成性：是否具备需要的技能，建设完成后是否能够操作它。</span><br></pre></td></tr></table></figure><p><img src="/images/ruankao/5-4.png"></p><h2 id="2、功能需求"><a href="#2、功能需求" class="headerlink" title="2、功能需求"></a>2、功能需求</h2><p>系统必须做的事，功能需求源于业务需求。</p><h2 id="3、非功能需求"><a href="#3、非功能需求" class="headerlink" title="3、非功能需求"></a>3、非功能需求</h2><p>系统必须具备的属性。<br>功能需求通常以动词为特征，非功能需求以副词为特征。<br>非功能需求主要包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">观感需求</span><br><span class="line">易用性需求</span><br><span class="line">性能需求</span><br><span class="line">可操作性需求</span><br><span class="line">可维护性和可移植性需求</span><br><span class="line">安全性需求</span><br><span class="line">文化和政策需求</span><br><span class="line">法律需求</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-系统分析与设计方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统分析与设计方法（二）需求分析与软件设计</title>
      <link href="/2021/09/22/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E4%B8%8E%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/09/22/%E8%BD%AF%E8%80%83/8%E3%80%81%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E4%B8%8E%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>需求分析阶段的主要任务是通过开发人员与用户之间的广泛交流，不断澄清模糊的概念，最终形成一个完整的、清晰的、一直的需求说明。（做什么）</p><p>在需求明确之后，下一步就是对软件系统进行设计。（怎么做）</p><h1 id="一、需求分析的任务与过程"><a href="#一、需求分析的任务与过程" class="headerlink" title="一、需求分析的任务与过程"></a>一、需求分析的任务与过程</h1><p>需求分析主要是确定待开发软件的功能、性能、数据、界面等要求。<br>需求分析的步骤包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取当前系统的物理模型</span><br><span class="line">抽象出当前系统的逻辑模型</span><br><span class="line">建立目标系统的逻辑模型</span><br></pre></td></tr></table></figure><p>需求分析工作的4个方面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">问题识别：用于发现需求、描述需求</span><br><span class="line">分析与综合：对问题进行分析，并给出解决方案</span><br><span class="line">编制需求分析的文档：输出《需求规格说明书》</span><br><span class="line">需求分析与评审：主要对功能的正确性、完整性和清晰性等给与评价。</span><br></pre></td></tr></table></figure><h2 id="1、需求的分类"><a href="#1、需求的分类" class="headerlink" title="1、需求的分类"></a>1、需求的分类</h2><p>软件需求包括功能需求、非功能需求、设计约束三方面。<br><img src="/images/ruankao/5-5.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">功能需求：系统必须完成的事，为了向用户提供有用的功能，产品必须执行的动作。</span><br><span class="line">非功能需求：产品必须具备的属性或者品质，如性能、响应时间、可靠性、容错性、扩展性等。</span><br><span class="line">设计约束：也叫限制条件、补充规约，比如必须采用国内自主知识版权的数据库等。</span><br></pre></td></tr></table></figure><p>除了上面三种需求之外，在其他维度，还有业务需求、用户需求、系统需求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">业务需求：客户对系统、产品高层次的目标要求。</span><br><span class="line">用户需求：用户使用产品必须要完成上面任务，通过访谈、调查，从用户角度出发的需求。</span><br><span class="line">系统需求：从系统角度的需求，包括用特性说明的功能需求、质量属性、非功能需求及设计约束。</span><br></pre></td></tr></table></figure><h2 id="2、需求工程"><a href="#2、需求工程" class="headerlink" title="2、需求工程"></a>2、需求工程</h2><p>创建和维护系统需求文档的所有活动，包括需求开发和需求管理两大工作。</p><h3 id="（1）需求开发"><a href="#（1）需求开发" class="headerlink" title="（1）需求开发"></a>（1）需求开发</h3><p>包括需求捕获、需求分析、编写规格说明书和需求验证四个阶段。<br>需求开发是目标，是主线，是努力掌握客户对系统的需求。</p><h3 id="（2）需求管理"><a href="#（2）需求管理" class="headerlink" title="（2）需求管理"></a>（2）需求管理</h3><p>包括需求基线、处理需求变更、需求跟踪等。<br>需求管理是支持，是保障，是对需求的变化进行管理的过程。</p><h2 id="2、需求分析方法"><a href="#2、需求分析方法" class="headerlink" title="2、需求分析方法"></a>2、需求分析方法</h2><p>根据分析方法发展的历史，分为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">结构化分析方法</span><br><span class="line">软系统方法</span><br><span class="line">面向对象分析方法</span><br><span class="line">面向问题域的分析</span><br></pre></td></tr></table></figure><h1 id="二、如何进行系统设计"><a href="#二、如何进行系统设计" class="headerlink" title="二、如何进行系统设计"></a>二、如何进行系统设计</h1><p>系统设计与其说是在设计，不如说是在选择和妥协。<br>妥协，就是在各个系统目标之间找到一个平衡点。系统目标包括但不限于功能、性能、健壮性、开发周期、交付日期等，但这些目标往往都是矛盾的。<br>没有一个设计者会完全重新开始设计一个系统，他们总参考多个与目标系统相类似的系统，再从中进行甄别、取舍和补充来作为新系统的设计。<br>要成为优秀的设计者，了解、掌握、消化、总结前人和自己以前的设计成果是最好的、也是唯一的方法。</p><p>优秀的系统设计一般在以下几个方面都很出色：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">组建的独立性。做到高内聚、低耦合。</span><br><span class="line">例外的识别和处理。</span><br><span class="line">防错和容错。</span><br></pre></td></tr></table></figure><p>也有一些技术能够改进系统设计，这些方法包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">降低复杂性</span><br><span class="line">通过合约进行设计</span><br><span class="line">原型化设计</span><br><span class="line">错误树分析等</span><br></pre></td></tr></table></figure><h1 id="三、软件设计的任务与活动"><a href="#三、软件设计的任务与活动" class="headerlink" title="三、软件设计的任务与活动"></a>三、软件设计的任务与活动</h1><p>软件设计时把软件需求变成软件表示的过程。<br>软件表示先是总体框架，然后在进一步细化，并在框架中填入细节。<br>1、从工程管理角度，软件设计可以分为两个步骤：<br>（1）概要设计：也称为高层设计<br>将软件需求转化为数据结构和软件的系统结构。<br>（2）详细设计：也称为底层设计<br>对结构表示进行细化，得到详细的数据结构与算法。<br>2、主要的设计方法比较<br>结构化设计的时代，主要设计方法包括Jackson方法和Parnas方法。结构化方法侧重于“模块相对独立且功能单一，使模块间联系弱、模块内联系强”；<br>Jackson方法是从数据结构导出模块结构。<br>Parnas方法是将可能引起变化的因素隐藏在有关模块内部，是这些因素变化时的影响范围受到限制。<br>近年来，对象技术凭借数据的高效封装和良好的消息机制，实现了高内聚、低耦合，成为现代软件设计的主流方法。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-系统分析与设计方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发方法（五）软件重用</title>
      <link href="/2021/09/17/%E8%BD%AF%E8%80%83/6%E3%80%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89%E8%BD%AF%E4%BB%B6%E9%87%8D%E7%94%A8/"/>
      <url>/2021/09/17/%E8%BD%AF%E8%80%83/6%E3%80%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%94%EF%BC%89%E8%BD%AF%E4%BB%B6%E9%87%8D%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>软件重用是一种重要的开发方法，虽然还不成熟，但现在已经有一些重用技术（中间件、应用服务器）改变了开发过程。</p><h1 id="软件重用"><a href="#软件重用" class="headerlink" title="软件重用"></a>软件重用</h1><p>软件产品是抽象的，可以无限复制的，因此重复利用可以节约人力物力，提高开发效率、降低成本、缩短开发周期、提高软件质量。<br>软件重用可以是软件产品、源程序、文档、设计思想甚至是领域知识。</p><p>常见的软件重用形式包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">源代码重用</span><br><span class="line">架构重用</span><br><span class="line">应用框架重用</span><br><span class="line">业务建模重用</span><br><span class="line">文件及过程重用</span><br><span class="line">软构件重用</span><br><span class="line">软件服务重用</span><br></pre></td></tr></table></figure><h1 id="构件技术"><a href="#构件技术" class="headerlink" title="构件技术"></a>构件技术</h1><p>构件又称为组件，是自包容、可复用的程序集。构件整体向外提供统一的访问接口，外部只能访问接口，不能直接操作构件内部。</p><p>自包容是指构件本身是一个功能完整地独立体，构建内部与外部界限明确，可独立配置和使用。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-开发方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发方法（六）软件设计方法</title>
      <link href="/2021/09/17/%E8%BD%AF%E8%80%83/6%E3%80%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%EF%BC%88%E5%85%AD%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/"/>
      <url>/2021/09/17/%E8%BD%AF%E8%80%83/6%E3%80%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%EF%BC%88%E5%85%AD%EF%BC%89%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="基于架构的软件设计ABSD"><a href="#基于架构的软件设计ABSD" class="headerlink" title="基于架构的软件设计ABSD"></a>基于架构的软件设计ABSD</h1><p>三个基础</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">功能分解，ABSD使用已有的基于模块的内聚和耦合技术。</span><br><span class="line">通过选择架构风格来实现质量和业务需求。</span><br><span class="line">软件模板的使用</span><br></pre></td></tr></table></figure><p><img src="/images/ruankao/3-5.png"><br>ABSD方法的输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">抽象功能需求：对功能需求进行抽象，在获取需求的时候，需要考虑到所有最终用户。</span><br><span class="line">用例：用例是对功能需求的具体化。在架构设计阶段，对用例进行分组，设置优先级，重要的用例才有用。</span><br><span class="line">抽象的质量和业务需求：</span><br><span class="line">架构选项：对于每个质量和业务需求，我们都要列举能够满足该需求的所有可能得架构。</span><br><span class="line">质量场景：质量场景是质量需求的具体化。同样，需要对质量场景进行分组、设置优先级，验证最重要的质量场景。</span><br><span class="line">约束：</span><br></pre></td></tr></table></figure><h1 id="基于架构的软件开发模型ABSDM"><a href="#基于架构的软件开发模型ABSDM" class="headerlink" title="基于架构的软件开发模型ABSDM"></a>基于架构的软件开发模型ABSDM</h1><p>ABSDM把基于架构的软件过程划分为架构需求、架构设计、架构文档化、架构复审、架构实现、架构演化等六个子过程。<br><img src="/images/ruankao/3-6.png"></p><h2 id="一、架构需求"><a href="#一、架构需求" class="headerlink" title="一、架构需求"></a>一、架构需求</h2><p>需求是用户对软件系统在功能、行为、性能、设计约束等方面的期望，架构需求受技术环境和架构设计师的惊艳影像。<br><img src="/images/ruankao/3-7.png"></p><h3 id="获取需求"><a href="#获取需求" class="headerlink" title="获取需求"></a>获取需求</h3><p>架构需求一般来自于 系统的质量目标、系统的业务目标、系统开发人员的业务目标。获取架构需求的目的是为了让开发出来的软件能够满足用户业务上的功能需求。</p><h3 id="标识构件"><a href="#标识构件" class="headerlink" title="标识构件"></a>标识构件</h3><p>标识构件的目的是为了生成系统的初始逻辑结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">生成类图</span><br><span class="line">对类进行分组</span><br><span class="line">把类打包成构件</span><br></pre></td></tr></table></figure><h3 id="需求评审"><a href="#需求评审" class="headerlink" title="需求评审"></a>需求评审</h3><p>评审的主要内容是需求是否是真实需求、类的分组是否合理、构件是否合理。</p><h2 id="二、架构设计"><a href="#二、架构设计" class="headerlink" title="二、架构设计"></a>二、架构设计</h2><p>架构设计是一个迭代的过程。<br><img src="/images/ruankao/3-8.png"></p><h3 id="提出架构模型"><a href="#提出架构模型" class="headerlink" title="提出架构模型"></a>提出架构模型</h3><p>在架构初期，最重要的是确定架构风格，即使这个模型是理想化的，但该模型为将来实现和演化过程建立了目标。</p><h3 id="把已标识的构建映射到软件架构中"><a href="#把已标识的构建映射到软件架构中" class="headerlink" title="把已标识的构建映射到软件架构中"></a>把已标识的构建映射到软件架构中</h3><h3 id="分析构件之间的相互作用"><a href="#分析构件之间的相互作用" class="headerlink" title="分析构件之间的相互作用"></a>分析构件之间的相互作用</h3><h3 id="产生软件架构"><a href="#产生软件架构" class="headerlink" title="产生软件架构"></a>产生软件架构</h3><h3 id="设计评审"><a href="#设计评审" class="headerlink" title="设计评审"></a>设计评审</h3><h2 id="三、架构文档化"><a href="#三、架构文档化" class="headerlink" title="三、架构文档化"></a>三、架构文档化</h2><p>大多数架构都是抽象的，是由一些概念上的构件组成。<br>文档是在系统演化的每一个阶段、系统设计和开发人员的通信媒介，视为验证架构设计和提炼或修改这些设计的基础。<br>架构文档化的主要输出结果是《架构需求规格说明书》和《测试架构需求的质量设计说明书》两个文档。</p><h2 id="四、架构复审"><a href="#四、架构复审" class="headerlink" title="四、架构复审"></a>四、架构复审</h2><p>目的是标识潜在风险，及早发现架构设计中的缺陷和错误。包括架构是否满足需求、质量需求是否在设计中得到体现、层次是否清晰、构建划分是否合理、文档表达是否明确、goUI结案设计师够满足功能和性能的需求等。</p><h2 id="五、架构实现"><a href="#五、架构实现" class="headerlink" title="五、架构实现"></a>五、架构实现</h2><p><img src="/images/ruankao/3-9.png"></p><h2 id="六、架构演化"><a href="#六、架构演化" class="headerlink" title="六、架构演化"></a>六、架构演化</h2><p>由于最终用户的需求可能变化、移植时需求产生变化等情况，就必须对架构进行修改，以适应新的软件需求。<br><img src="/images/ruankao/3-10.png"></p><h3 id="需求变化归类"><a href="#需求变化归类" class="headerlink" title="需求变化归类"></a>需求变化归类</h3><p>让变化的需求与已有构建对应，对应不到的变动，做好记录，在后续创建新的构件应该这部分变化的需求</p><h3 id="架构演化计划"><a href="#架构演化计划" class="headerlink" title="架构演化计划"></a>架构演化计划</h3><p>在改变原有架构之前，必须制定一个周密的架构演化计划，为后续演化开发工作做指南。</p><h3 id="构件变动"><a href="#构件变动" class="headerlink" title="构件变动"></a>构件变动</h3><p>在演化计划的基础上新增、修改或者删除构件，根据需求变化归类决定对构件新增修改或删除。最后对构件进行功能性测试。</p><h3 id="更新构件的相互作用"><a href="#更新构件的相互作用" class="headerlink" title="更新构件的相互作用"></a>更新构件的相互作用</h3><p>更新构建之间的控制流程</p><h3 id="构建组装与测试"><a href="#构建组装与测试" class="headerlink" title="构建组装与测试"></a>构建组装与测试</h3><p>通过工具把构建的实现体组装起来，完成真个软件系统的连接与合成。最后进行整体功能和性能测试。</p><h3 id="技术评审"><a href="#技术评审" class="headerlink" title="技术评审"></a>技术评审</h3><p>评审是否符合用户需求，如果不符合，则在2-6步进行迭代。</p><h3 id="演化后的架构"><a href="#演化后的架构" class="headerlink" title="演化后的架构"></a>演化后的架构</h3><p>将演化后的架构在原来系统上所做的所有修改必须集成到原来的架构中，完成一次演化过程。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-开发方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统规划（一）项目提出与选择</title>
      <link href="/2021/09/17/%E8%BD%AF%E8%80%83/7%E3%80%81%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92/%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92%EF%BC%88%E4%B8%80%EF%BC%89%E9%A1%B9%E7%9B%AE%E6%8F%90%E5%87%BA%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
      <url>/2021/09/17/%E8%BD%AF%E8%80%83/7%E3%80%81%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92/%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92%EF%BC%88%E4%B8%80%EF%BC%89%E9%A1%B9%E7%9B%AE%E6%8F%90%E5%87%BA%E4%B8%8E%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<p>系统规划主要记录从项目提出、选择到确立的过程。包括系统项目的提出与可行性分析，系统方案的制定、评价和改进，新旧系统的分析和比较，以及现有软件、硬件和数据资源的有效利用等问题。</p><h1 id="一、项目的提出与选择"><a href="#一、项目的提出与选择" class="headerlink" title="一、项目的提出与选择"></a>一、项目的提出与选择</h1><p>根据项目的动机确定系统的范围及方案选择。</p><h2 id="1、系统的立项目标和动机"><a href="#1、系统的立项目标和动机" class="headerlink" title="1、系统的立项目标和动机"></a>1、系统的立项目标和动机</h2><p>项目立项的动机包括</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">进行基础研究并获取技术：大学、企业、研究所等科研类</span><br><span class="line">进行应用研发并获得产品：产品研发，卖产品获利</span><br><span class="line">提供技术服务：卖服务获利</span><br><span class="line">信息技术产品的使用者：买软件或者产品使用</span><br></pre></td></tr></table></figure><h2 id="2、项目选择和确定"><a href="#2、项目选择和确定" class="headerlink" title="2、项目选择和确定"></a>2、项目选择和确定</h2><p>项目选择的目的可能有两种。<br>1是软件开发公司在诸多产品方向中选择格式的方向研究和开发。<br>2是客户从诸多的产品中购买适合自己的产品或方案。</p><h3 id="（1）选择有核心价值的产品-项目或开发方向"><a href="#（1）选择有核心价值的产品-项目或开发方向" class="headerlink" title="（1）选择有核心价值的产品/项目或开发方向"></a>（1）选择有核心价值的产品/项目或开发方向</h3><p>关键在于确定什么样的系统项目是有价值的。价值通常与核心业务有关系，立项单位所在的行业或上下游位置不同，价值判断也不同。</p><h3 id="（2）评估项目风险、收益和代价"><a href="#（2）评估项目风险、收益和代价" class="headerlink" title="（2）评估项目风险、收益和代价"></a>（2）评估项目风险、收益和代价</h3><p>1、对于开发产品进行销售<br>主要评估产品期望收益和开发投入的时间、资金、人力等资源。项目的风险主要是技术难度、技术能力、经济能力、开发进度、法律风险、政策风险。<br>2、对于购买产品或技术服务<br>需要评估项目实施后的变更情况，组织机构和人员职责的影响，现有流程和人员能否满足要去，规章制度是否满足要求等。</p><h3 id="（3）评估项目的多种实施方式"><a href="#（3）评估项目的多种实施方式" class="headerlink" title="（3）评估项目的多种实施方式"></a>（3）评估项目的多种实施方式</h3><h3 id="（4）平衡地选择合适的方案"><a href="#（4）平衡地选择合适的方案" class="headerlink" title="（4）平衡地选择合适的方案"></a>（4）平衡地选择合适的方案</h3><p>1、新技术与就技术</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新技术意味着风险、学习和导入期。</span><br><span class="line">旧技术享受不了新技术的好处。</span><br></pre></td></tr></table></figure><p>2、快速开发平台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">基于某平台的产品会让用户绑定在该平台上，减少未来自主选择性。</span><br><span class="line">不基于某平台可能会延长项目开发时间，从而导致更多开销。</span><br></pre></td></tr></table></figure><p>3、系统扩展性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">不考虑系统扩展性很可能在业务变更时受阻。</span><br><span class="line">过多考虑系统扩展性会花费大量时间进行设计。在IT发展迅速的今天，很有可能在有升级的时候，原来的技术体系已被淘汰。</span><br></pre></td></tr></table></figure><p>4、抛弃明显存在问题的“差”项目，选择基本立场“合适”的项目，而不是尽可能的“好”。<br><img src="/images/ruankao/4-1.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">要求质量是客户认为产品应该具备的功能或性能，实现越多客户越满意。</span><br><span class="line">假想质量是客户想当然认为产品应具备的功能或性能，客户不能正确描述自己想当然要得到的这些功能或性能需求。</span><br><span class="line">兴奋质量是客户要求范围外的功能或性能，通常是开发者很愿意增加的技术特性，实现这些客户会更高兴，但是不识闲也不影响其购买。</span><br><span class="line"></span><br><span class="line">系统设计师常犯的错误是用自己对技术产生的兴奋质量，替换客户最基本的要求质量或假想质量。</span><br><span class="line">企业经营者场贩的错误可能是对客户提出的合理要求质量视而不见，或者不加区分的把未经评估的假想质量指派给开发团队。</span><br></pre></td></tr></table></figure><h2 id="2、项目提出和选择的结果"><a href="#2、项目提出和选择的结果" class="headerlink" title="2、项目提出和选择的结果"></a>2、项目提出和选择的结果</h2><p>项目提出和选择的结果最终会以“产品/项目建议书”的方式体现。典型的应用场景是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在投标项目中，建议书通常是乙方提交给甲方竞标方案的一部分。</span><br><span class="line">在企业确立要开发某产品后，对该产品进行多角度评估，最终项目立项人向上级提交建议书进行决策。</span><br></pre></td></tr></table></figure><p>产品/项目建议书包括以下几部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">用户单位、项目或产品的立项背景、需求来源和目标性的介绍；</span><br><span class="line">用户的内外部环境、组织机构、现有的IT设施情况等；</span><br><span class="line">用户的业务模型和业务规划；</span><br><span class="line">预期要建设的技术系统在用户业务中的位置和作用；</span><br><span class="line">信息化后的用户业务模型、软件应用方式、相关的部署环境、运行规划、管理规范等；</span><br><span class="line">为实现信息化业务模型，技术系统的产品需求鼎业（功能、性能、约束）和部署方式等；</span><br><span class="line">产品或项目的技术框架；</span><br><span class="line">项目的要点、技术难点、主要实施障碍等。</span><br><span class="line">项目或产品的可行性研究结果；</span><br><span class="line">项目可选择的试试方式、组织方式、沟通和协调机制等；</span><br><span class="line">项目的资源范围和规划，人、财、物、时间等；</span><br><span class="line">项目的成本、收益分析；</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>其他项目建议书可能包含的内容或已单独文档列举的内容包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">项目风险及影响评估</span><br><span class="line">项目进度计划</span><br><span class="line">项目质量计划</span><br><span class="line">项目过渡期资金的获得方式、财务计划</span><br><span class="line">产品或项目的商务模式、盈利模式论述</span><br><span class="line">同类产品或公司的市场调查结果，以及竞争性比较</span><br><span class="line">企业成功案例、资质等</span><br><span class="line">商务条款或供应商、客户合同。</span><br></pre></td></tr></table></figure><p>项目建议书标志着项目立项和选择阶段性工作的完成，一旦项目建议书被批准通过，项目可进入正式的开发准备和实施阶段。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-系统规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统规划（三）方案的制定和改进</title>
      <link href="/2021/09/17/%E8%BD%AF%E8%80%83/7%E3%80%81%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92/%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92%EF%BC%88%E4%B8%89%EF%BC%89%E6%96%B9%E6%A1%88%E7%9A%84%E5%88%B6%E5%AE%9A%E5%92%8C%E6%94%B9%E8%BF%9B/"/>
      <url>/2021/09/17/%E8%BD%AF%E8%80%83/7%E3%80%81%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92/%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92%EF%BC%88%E4%B8%89%EF%BC%89%E6%96%B9%E6%A1%88%E7%9A%84%E5%88%B6%E5%AE%9A%E5%92%8C%E6%94%B9%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<p>主要完成的工作是解析“系统如何实现”的问题。<br>主要包括一下几个方面。</p><h2 id="1、确定软件架构"><a href="#1、确定软件架构" class="headerlink" title="1、确定软件架构"></a>1、确定软件架构</h2><p>1、分析模型的结构。<br>2、对应于系统目标的最基本。最重要的实现要素。<br>3、特性和要点的解释。</p><h2 id="2、确定实现的各种关键性要素"><a href="#2、确定实现的各种关键性要素" class="headerlink" title="2、确定实现的各种关键性要素"></a>2、确定实现的各种关键性要素</h2><p>1、关键的用例、主要的控制类、功能和服务的首要组织方式<br>2、对象的组织模式<br>3、常用和最关键的实现算法模型。<br>4.选定开发工具和开发环境</p><h2 id="3、归结目标到最适合的计算体系"><a href="#3、归结目标到最适合的计算体系" class="headerlink" title="3、归结目标到最适合的计算体系"></a>3、归结目标到最适合的计算体系</h2><p>1、表示层：用户的界面部分<br>2、事务逻辑层：负责处理表示层的应用请求，完成商务逻辑的计算任务并肩结果返回用户。<br>3、数据服务层：为应用提供数据来源。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-系统规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统规划（二）可行性研究</title>
      <link href="/2021/09/17/%E8%BD%AF%E8%80%83/7%E3%80%81%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92/%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6/"/>
      <url>/2021/09/17/%E8%BD%AF%E8%80%83/7%E3%80%81%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92/%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92%EF%BC%88%E4%BA%8C%EF%BC%89%E5%8F%AF%E8%A1%8C%E6%80%A7%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<p>可行性研究的范围包括技术、经济、执行、环境等方面。虽然可行性研究不能给出详细的计划和方向，但是可以以最小的成本识别出错误构思的系统，从而避免更大的损失。</p><h1 id="一、可行性研究的内容"><a href="#一、可行性研究的内容" class="headerlink" title="一、可行性研究的内容"></a>一、可行性研究的内容</h1><p>可行性研究包括经济可行性、技术可行性、法律可行性、执行可行性、方案的选择等5个方面。</p><h2 id="经济可行性"><a href="#经济可行性" class="headerlink" title="经济可行性"></a>经济可行性</h2><p>评估项目的开发成本及项目成功后可能获得的经济收益。</p><h2 id="技术可行性"><a href="#技术可行性" class="headerlink" title="技术可行性"></a>技术可行性</h2><p>评估对于假想的软件系统需要实现的功能和性能，以及技术能力约束。可通过“提问-回答”的方式进行论证。<br>投资不足、时间不足、技术难度过大、没有足够的技术积累、没有熟练的员工、没有足够的合作公司、晚报资源不足等都是技术可行性的约束。</p><h2 id="法律可行性"><a href="#法律可行性" class="headerlink" title="法律可行性"></a>法律可行性</h2><p>评估可能有系统开发引起的侵权或法律责任。<br>可能包括过年政策和法律的限制，合同的订立和条款，职责、侵权情况的设定，违约、争议的解决等。</p><h2 id="执行可行性"><a href="#执行可行性" class="headerlink" title="执行可行性"></a>执行可行性</h2><p>评估与其的软件系统在真实的环境中能够被应用的程度和实施过程中的障碍。</p><h2 id="方案的选择"><a href="#方案的选择" class="headerlink" title="方案的选择"></a>方案的选择</h2><p>评估系统或者产品开发的可选方法，可以采用折中的方法，反复比较各个方案的成本和效益，选择可行的方案。</p><h1 id="二、成本效益分析"><a href="#二、成本效益分析" class="headerlink" title="二、成本效益分析"></a>二、成本效益分析</h1><p>对项目开发目标的成本及可度量的项目现金收入和无形收益进行一次转化的评估。</p><h2 id="项目可能涉及的成本"><a href="#项目可能涉及的成本" class="headerlink" title="项目可能涉及的成本"></a>项目可能涉及的成本</h2><p>基础建设支出<br>一次性支出<br>运行维护费用</p><h2 id="项目可能涉及的利益"><a href="#项目可能涉及的利益" class="headerlink" title="项目可能涉及的利益"></a>项目可能涉及的利益</h2><p>一次性收益<br>非一次性收益<br>不可定量的收益</p><h2 id="效益分析的若干指标和进一步的分析"><a href="#效益分析的若干指标和进一步的分析" class="headerlink" title="效益分析的若干指标和进一步的分析"></a>效益分析的若干指标和进一步的分析</h2><p>收益/投资比<br>投资回收周期<br>敏感性分析</p><h1 id="三、可行性分析报告"><a href="#三、可行性分析报告" class="headerlink" title="三、可行性分析报告"></a>三、可行性分析报告</h1><p>国标 GB 8567-1988 中定义了可行性分析报告的格式和内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">项目背景：包括问题描述、实现环境和限制条件</span><br><span class="line">管理概要和建议：包括重要的研究成果、说明、建议和影响</span><br><span class="line">候选方案：包括候选系统的配置和最终方案的选择标准</span><br><span class="line">系统描述：包括系统工作范围的简要说明和被分配系统元素的可行性</span><br><span class="line">经济可行性：包括经费概算和与其的经济效益</span><br><span class="line">技术可行性：包括技术实力、已有工作基础和设备条件</span><br><span class="line">法律可行性：包括系统开发可能导致的侵权，违法和责任等</span><br><span class="line">用户使用可行性：包括用户单位的行政管理，工作制度和使用人员的素质</span><br><span class="line">其他与项目有关的问题：例如其他方案接收和未来可能的变化</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-系统规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统规划（四）新旧系统的分析和比较</title>
      <link href="/2021/09/17/%E8%BD%AF%E8%80%83/7%E3%80%81%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92/%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92%EF%BC%88%E5%9B%9B%EF%BC%89%E6%96%B0%E6%97%A7%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%88%86%E6%9E%90%E5%92%8C%E6%AF%94%E8%BE%83/"/>
      <url>/2021/09/17/%E8%BD%AF%E8%80%83/7%E3%80%81%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92/%E7%B3%BB%E7%BB%9F%E8%A7%84%E5%88%92%EF%BC%88%E5%9B%9B%EF%BC%89%E6%96%B0%E6%97%A7%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%88%86%E6%9E%90%E5%92%8C%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<p>遗留系统的特点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">系统虽然能完成很多重要的业务工作，但是已经不能外圈满足要求。</span><br><span class="line">系统在性能上已经落后，或者采用的技术已经过时。</span><br><span class="line">通常是大型的系统，已经融入业务工作中，维护工作十分困难。</span><br><span class="line">系统没有使用现代系统工程方法进行管理和开发，基本没有文档，很难理解。</span><br></pre></td></tr></table></figure><p>对于遗留系统，可以根据系统的技术条件、商业价值及维护和运行系统的组织特征不同，采取继续维护、重构或替代、或联合使用几种策略。</p><h1 id="一、遗留系统的评价方法"><a href="#一、遗留系统的评价方法" class="headerlink" title="一、遗留系统的评价方法"></a>一、遗留系统的评价方法</h1><p><img src="/images/ruankao/4-2.png"><br>1、启动评价<br>评价是为了对遗留系统足够的理解。评价前需要了解以下问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">对企业来说，遗留系统是否至关重要</span><br><span class="line">企业的商业目标是什么</span><br><span class="line">演化需求是什么</span><br><span class="line">所期望的系统寿命多长</span><br><span class="line">系统的使用期限多久</span><br><span class="line">系统的技术状态如何</span><br><span class="line">企业是否愿意改变</span><br><span class="line">企业是否有能力承受演化</span><br></pre></td></tr></table></figure><p>2、商业价值评价<br>判断遗留系统对企业的重要性。可以包括概要和详细两个级别，概要评价包括：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">咨询</span><br><span class="line">评价问卷</span><br><span class="line">进行评价</span><br></pre></td></tr></table></figure><p>详细评价包括应用系统不符合业务规范的风险分析，该分析十分费时，最好由业务分析师来完成。<br>3、外部环境评价<br>外部环境评价系统的外部技术环境，是硬件、支撑软件和其他基础设施的统一体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">硬件</span><br><span class="line">    系统一些常见特征有供应商、维护费用、市销率、年龄、功能、性能等。</span><br><span class="line">    具体评价方法是对每一个部件或整个系统的每个特征打分（1-4），求总分。</span><br><span class="line">支撑软件</span><br><span class="line">    支撑软件可包括操作系统、数据库、事务处理程序、编译器、网络软件、应用软件等。</span><br><span class="line">    评价方式同硬件。</span><br><span class="line">企业基础设施</span><br><span class="line">    需要考虑企业和使用者的类型、开发组织的技术成熟度、企业的培训过程、系统支持人员的技术水平、企业是否愿意改变。</span><br></pre></td></tr></table></figure><p>4、应用软件评价</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">系统级，整个系统看作不可分的原子。</span><br><span class="line">部件级，关注系统的每个子系统，考虑子系统的特征，包括复杂性、数据、文档、外部依赖型、合法性、维护记录、大小、安全性等。</span><br><span class="line">评价方式同硬件。</span><br></pre></td></tr></table></figure><p>5、分析评价结果<br>加权平均值。</p><p><img src="/images/ruankao/4-3.png"></p><h1 id="二、遗留系统的演化策略"><a href="#二、遗留系统的演化策略" class="headerlink" title="二、遗留系统的演化策略"></a>二、遗留系统的演化策略</h1><p>1、淘汰策略<br>第3象限低水平、低价值区，淘汰，全面开发新的系统替代遗留系统。<br>一般在业务发生根本变化，或维护人员、维护资料全部丢失了。经过评价，重新开发比改造旧系统更划算。<br>2、继承策略<br>第4象限低水平、高价值区，遗留，在开发系统时需要完全兼容遗留系统的功能模型和数据模型，新老系统同时运行，逐渐切换到新系统。<br>3、改造策略<br>第1象限高水平、高价值区，改造，这种系统通常建成时间段。其他功能不变，增加新功能。<br>4、集成策略<br>第2象限高水平、低价值区，集成，这种系统可能只完成某部门或子公司的业务，从整体看，他们基于不同的平台，不同的数据模型，无法互联互通，数据还不一致，属于较严重的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-系统规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>干啊，软考之路</title>
      <link href="/2021/09/16/%E8%BD%AF%E8%80%83/start/"/>
      <url>/2021/09/16/%E8%BD%AF%E8%80%83/start/</url>
      
        <content type="html"><![CDATA[<p>干啊，软考之路，记录些比较有价值的知识点吧。</p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发方法（一）软件生命周期</title>
      <link href="/2021/09/16/%E8%BD%AF%E8%80%83/6%E3%80%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2021/09/16/%E8%BD%AF%E8%80%83/6%E3%80%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="1970年-Boehm定义的软件生命周期模型"><a href="#1970年-Boehm定义的软件生命周期模型" class="headerlink" title="1970年 Boehm定义的软件生命周期模型"></a>1970年 Boehm定义的软件生命周期模型</h1><p><img src="/images/ruankao/1-6.png"></p><h1 id="《GB-8566-1988计算机软件开发规范》定义的软件生命周期模型"><a href="#《GB-8566-1988计算机软件开发规范》定义的软件生命周期模型" class="headerlink" title="《GB 8566-1988计算机软件开发规范》定义的软件生命周期模型"></a>《GB 8566-1988计算机软件开发规范》定义的软件生命周期模型</h1><p><img src="/images/ruankao/1-7.png"></p><table><thead><tr><th>阶段</th><th>说明</th></tr></thead><tbody><tr><td>可行性研究与计划</td><td>初步确定软件的目标、范围、风险、成本，从而确定软件是否有开发的必要。输出《可行性研究报告》《软件开发计划》</td></tr><tr><td>需求分析</td><td>对软件的需求进行详细分析</td></tr><tr><td>概要设计</td><td>确定软件的技术蓝图，将需求分析结果转为技术设计方案，输出系统架构、子系统之间的关系、数据库模型、接口规范、编码规范</td></tr><tr><td>详细设计</td><td>在概要设计的基础上进行细化，可裁剪，在一些小项目或者结构简单的项目可以没有详设，或者对重要模块进行详设</td></tr><tr><td>实现</td><td>包括编码和单元测试</td></tr><tr><td>集成测试</td><td>-</td></tr><tr><td>确认测试</td><td>验证软件实现与需求是否一致，是否达到了预期目标</td></tr><tr><td>使用和维护</td><td>软件维护的过程会贯穿整个软件的使用过程。当使用和维护阶段结 束后，软件系统也就自然消亡，软件系统的生命周期结束。</td></tr></tbody></table><h1 id="《GB-T-8566-1995-信息技术-软件生存期过程》定义的软件生命周期模型"><a href="#《GB-T-8566-1995-信息技术-软件生存期过程》定义的软件生命周期模型" class="headerlink" title="《GB/T 8566-1995 信息技术-软件生存期过程》定义的软件生命周期模型"></a>《GB/T 8566-1995 信息技术-软件生存期过程》定义的软件生命周期模型</h1><p><img src="/images/ruankao/1-8.png"></p><h1 id="1999年-《统一软件开发过程》"><a href="#1999年-《统一软件开发过程》" class="headerlink" title="1999年 《统一软件开发过程》"></a>1999年 《统一软件开发过程》</h1><p>包括4个阶段和5种工作流<br><img src="/images/ruankao/1-9.png"></p><h3 id="五种工作流"><a href="#五种工作流" class="headerlink" title="五种工作流"></a>五种工作流</h3><p><img src="/images/ruankao/1-10.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-开发方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发方法（三）统一过程UP</title>
      <link href="/2021/09/16/%E8%BD%AF%E8%80%83/6%E3%80%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%9F%E4%B8%80%E8%BF%87%E7%A8%8BUP/"/>
      <url>/2021/09/16/%E8%BD%AF%E8%80%83/6%E3%80%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%9F%E4%B8%80%E8%BF%87%E7%A8%8BUP/</url>
      
        <content type="html"><![CDATA[<p>UP是一个统一的软件开发过程，可以用于各种类型的项目。UP是基于构件的，使用统一建模语言（UML）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">特点：</span><br><span class="line">用例驱动</span><br><span class="line">以基本架构为中心</span><br><span class="line">迭代和增量</span><br></pre></td></tr></table></figure><p><img src="/images/ruankao/3-1.png"><br><img src="/images/ruankao/3-2.png"></p><p>初始阶段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">明确项目规模。了解核心需求及约束，以确定验收标准。</span><br><span class="line">计划和准备商业理由。评估风险管理、人员配备、项目计划、成本、进度、收益率折中的备选方案。</span><br><span class="line">综合考虑备选架构。评估设计和自制、外购、复用方面的折中，从而估算成本、进度和资源。</span><br><span class="line">准备项目的环境，评估项目和组织，选择工具，决定流程中要改进的部分。</span><br></pre></td></tr></table></figure><p>细化阶段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">快速确定架构。</span><br><span class="line">进一步明确需求，充分了解对推动架构和计划决策的最关键的用例。</span><br><span class="line">创建详细的迭代计划，并建立基线。</span><br><span class="line">优化开发流程，确定构建和自动化工具。</span><br><span class="line">优化架构，并选择构件。自制、外购或者复用。</span><br></pre></td></tr></table></figure><p>构建阶段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">资源管理、控制和流程优化。</span><br><span class="line">完成构件开发，并根据已定义的评估标准进行测试。</span><br><span class="line">根据验收标准对产品进行评估。</span><br></pre></td></tr></table></figure><p>交付阶段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">执行部署计划</span><br><span class="line">完成用户手册</span><br><span class="line">确认测试</span><br><span class="line">打包发布</span><br><span class="line">获得用户反馈</span><br><span class="line">基于反馈调整产品</span><br><span class="line">最终版上线</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-开发方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发方法（二）软件开发模型</title>
      <link href="/2021/09/16/%E8%BD%AF%E8%80%83/6%E3%80%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/09/16/%E8%BD%AF%E8%80%83/6%E3%80%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h1><p>瀑布模型严格遵守软件生命周期各阶段的固定顺序，上一阶段完成后才能进入下一阶段，整个模型就像一个飞流直下的瀑布。<br><img src="/images/ruankao/2-1.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">可强迫开发人员采用规范的方法</span><br><span class="line">严格规定了各阶段必须提交的文档</span><br><span class="line">要求每个阶段结束后，都要进行严格评审</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">过于理想化</span><br><span class="line">缺乏灵活性</span><br><span class="line">无法再开发过程中逐步明确用户无法表达准确的需求</span><br></pre></td></tr></table></figure><h1 id="瀑布V模型"><a href="#瀑布V模型" class="headerlink" title="瀑布V模型"></a>瀑布V模型</h1><p>瀑布V模型是瀑布模型的一种变体。在开发过程中任一阶段都可能引入缺陷，最后的测试只能在交付前发现更多的缺陷。瀑布V模型强调了测试。<br><img src="/images/ruankao/2-2.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">瀑布V模型不但保证了瀑布模型的阶段式文档驱动的特点，更强调了软件产品的验证工作</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">需求分析集中在项目开始，而一旦需求不准确，存在偏差，之后的设计、实现、验证会放大偏差。</span><br><span class="line">瀑布模型后期维护工作相当繁重，而这些维护工作大都是修正需求阶段引入的缺陷，这个问题是瀑布模型难以克服的。</span><br></pre></td></tr></table></figure><h1 id="快速原型模型"><a href="#快速原型模型" class="headerlink" title="快速原型模型"></a>快速原型模型</h1><p>快速原型是指在计算机上快速建立可以运行的程序或者界面。让用户能尽快了解系统的概貌，一旦用户确认了原型，就可以快速按照原型开发出满足用户真实需求的软件产品。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">特点：</span><br><span class="line">引入了迭代的概念</span><br><span class="line">强调用户参与</span><br><span class="line">在用户需求分析、系统功能描述、系统实现方法等方面允许有较大的灵活性，可以逐步完善。</span><br><span class="line">可以用来评价几种不同的设计方案</span><br><span class="line">可以用来建立系统的某个部分</span><br><span class="line">不排斥传统生命周期的有效的方法和工具，与传统方法互为补充。</span><br><span class="line"></span><br><span class="line">动态定义需求，适用于需求不明确的项目。</span><br><span class="line"></span><br><span class="line">不适合使用原型法的情况：</span><br><span class="line">缺乏使用的原型开发工具</span><br><span class="line">用户不参与、不积极配合开发过程</span><br><span class="line">用户的数据资源缺乏组织和管理</span><br><span class="line">用户的软件资源缺乏组织和管理</span><br></pre></td></tr></table></figure><h1 id="演化模型"><a href="#演化模型" class="headerlink" title="演化模型"></a>演化模型</h1><p>演化模型也是一种原型化的开发方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">快速原型模型中，原型的用途是获取用户的真实需求，一旦需求确定了，原型就被抛弃，是一种“抛弃式”的原型化方法。</span><br><span class="line">演化模型中，则是从初始模型逐步演化为最终软件产品的渐进过程，是一种“渐进式”的原型化方法。</span><br><span class="line">一个演化模型可以看做若干次瀑布模型的迭代。</span><br></pre></td></tr></table></figure><h1 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h1><p>增量模型是第三种原型化开发方法，它既不是“抛弃式”的，也不是“渐进式”的，而是“递增式”的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在系统的技术架构成熟、风险较低的时候，可以采用增量的方式进行系统开发，</span><br><span class="line">这样可以提前进行集成测试和系统测试，缩短初始版本的发布周期，提高用户对系统的可见度，降低系统的风险。</span><br><span class="line">第一版本往往是系统的核心功能，可以满足用户最基本的需求。之后增量版本的功能逐步丰富、完善。</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">每一个版本都是一个完整的、可用的版本</span><br><span class="line">版本间的增量要均匀</span><br></pre></td></tr></table></figure><h1 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h1><p>螺旋模型结合了瀑布模型和演化模型的有点，不仅体现了两个模型的优点，而且还强调了其他模型均忽略了的风险分析。<br>螺旋模型在“瀑布模型”的每一个开发阶段前，引入一个非常严格的风险识别、风险分析和风险控制。它把软件项目分解成一个个小项目，每个小项目都标识一个或多个主要风险，直到所有的主要风险因素都被确定。<br>螺旋模型特别适用于庞大而复杂、具有高风险的系统。<br><img src="/images/ruankao/2-3.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">螺旋模型支持需求的动态变化，为用户的关键决策提供了方便，有助于需求准确性；为项目管理决策调整提供了便利，从而降低软件开发风险。</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">需要具有相当丰富的风险评估经验和专业知识，如果未能及时标识风险，势必会造成重大损失。</span><br><span class="line">过多的迭代次数会增加开发成本，延迟提交时间。</span><br></pre></td></tr></table></figure><h1 id="构件组装模型"><a href="#构件组装模型" class="headerlink" title="构件组装模型"></a>构件组装模型</h1><p>利用软构件进行搭积木的方式开发。<br><img src="/images/ruankao/2-4.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">让系统扩展更容易</span><br><span class="line">构件更容易被重用，降低软件开发成本</span><br><span class="line">构件粒度较小，开发任务更灵活，可用若干小组并行开发。</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">需要经验丰富的架构师，设计不好的构件难以实现构件的优点，降低构件组装模型的重用度。</span><br><span class="line">在考虑重用度的时候，往往会在其他方面让步，比如性能。</span><br><span class="line">使用构件的时候，要求开发人员熟练掌握构件，增加了开发人员的学习成本。</span><br><span class="line">第三方构件的质量难以掌握，且会最终影响软件的质量。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-开发方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发方法（四）敏捷方法</title>
      <link href="/2021/09/16/%E8%BD%AF%E8%80%83/6%E3%80%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89%E6%95%8F%E6%8D%B7%E6%96%B9%E6%B3%95/"/>
      <url>/2021/09/16/%E8%BD%AF%E8%80%83/6%E3%80%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%EF%BC%88%E5%9B%9B%EF%BC%89%E6%95%8F%E6%8D%B7%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>进阶方法包括极限编程、自适应开发、水晶方法、特征驱动开发等，他们都认为传统的软件工程方法文档量太“重”了，成为“重量级”方法，而敏捷方法则是“轻量级”方法。</p><h1 id="一、极限编程"><a href="#一、极限编程" class="headerlink" title="一、极限编程"></a>一、极限编程</h1><p>极限编程由价值观、原则、实践和行为四个部分组成，它们彼此相互依赖、关联，并通过行为贯穿于整个生命周期。</p><h2 id="四大价值观"><a href="#四大价值观" class="headerlink" title="四大价值观"></a>四大价值观</h2><h3 id="沟通"><a href="#沟通" class="headerlink" title="沟通"></a>沟通</h3><p>如果小组成员之间无法做到持续的、无间断的交流，那么协作就无从谈起。</p><h3 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h3><p>“够用即好”，尽量地简单化。</p><h3 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h3><p>向团队内部、客户、管理层反馈，通过持续、明确的反馈来暴露软件状态的问题。</p><h3 id="勇气"><a href="#勇气" class="headerlink" title="勇气"></a>勇气</h3><p>每时每刻都在变化，需要有勇气来面对快速开发，甚至重新开发。<br>在四大价值观之下，隐藏着一种更深刻的东西，那就是尊重。因为这一切都建立在团队成员之间相互关心、相互理解的基础之上。</p><h2 id="五大原则"><a href="#五大原则" class="headerlink" title="五大原则"></a>五大原则</h2><p>快速反馈<br>简单性假设<br>逐步修改<br>提倡更改<br>优质工作</p><h2 id="12个最佳实践"><a href="#12个最佳实践" class="headerlink" title="12个最佳实践"></a>12个最佳实践</h2><h3 id="计划游戏"><a href="#计划游戏" class="headerlink" title="计划游戏"></a>计划游戏</h3><p>先快速指定一份概要的计划，随着细节不断清晰，在逐步完善计划。</p><h3 id="小型发布"><a href="#小型发布" class="headerlink" title="小型发布"></a>小型发布</h3><p>持续集成，小步快走</p><h3 id="隐喻"><a href="#隐喻" class="headerlink" title="隐喻"></a>隐喻</h3><h3 id="简单设计"><a href="#简单设计" class="headerlink" title="简单设计"></a>简单设计</h3><p>简单不是忽略设计，而是认为设计不应该在编码前一次性完成。</p><h3 id="测试先行"><a href="#测试先行" class="headerlink" title="测试先行"></a>测试先行</h3><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>要有重构的勇气，目的是降低变化引起的风险、使得代码优化更加容易。</p><h3 id="结对编程"><a href="#结对编程" class="headerlink" title="结对编程"></a>结对编程</h3><p>降低了沟通成本，提高了工作质量。</p><h3 id="集体代码所有制"><a href="#集体代码所有制" class="headerlink" title="集体代码所有制"></a>集体代码所有制</h3><p>每个人都拥有全部代码，也都需要对全部代码负责。</p><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><h3 id="每周工作40小时"><a href="#每周工作40小时" class="headerlink" title="每周工作40小时"></a>每周工作40小时</h3><h3 id="现场客户"><a href="#现场客户" class="headerlink" title="现场客户"></a>现场客户</h3><p>将客户请到现场，时刻保证“客户负责业务决策，开发团队负责技术决策”。</p><h3 id="编码标准"><a href="#编码标准" class="headerlink" title="编码标准"></a>编码标准</h3><p>确保代码清晰，便于交流指导。</p><h1 id="二、特征驱动开发FDD"><a href="#二、特征驱动开发FDD" class="headerlink" title="二、特征驱动开发FDD"></a>二、特征驱动开发FDD</h1><p>FDD也是一个迭代的开发模型，弱化了过程在软件开发的地位。FDD强调软件开发不可缺少的三个要素：人、过程、技术。</p><h2 id="FDD角色"><a href="#FDD角色" class="headerlink" title="FDD角色"></a>FDD角色</h2><h3 id="项目经理"><a href="#项目经理" class="headerlink" title="项目经理"></a>项目经理</h3><p>是开发的组织者，同时对外沟通</p><h3 id="首席架构设计师"><a href="#首席架构设计师" class="headerlink" title="首席架构设计师"></a>首席架构设计师</h3><p>系统架构设计</p><h3 id="开发经理"><a href="#开发经理" class="headerlink" title="开发经理"></a>开发经理</h3><p>负责团队日常开发，解决开发中的技术问题和资源冲突。</p><h3 id="主程序员"><a href="#主程序员" class="headerlink" title="主程序员"></a>主程序员</h3><p>带领小组完成特征的详细设计和构建工作，要求有一定工作经验病能带动小组工作。</p><h3 id="程序员"><a href="#程序员" class="headerlink" title="程序员"></a>程序员</h3><p>开发</p><h3 id="领域专家"><a href="#领域专家" class="headerlink" title="领域专家"></a>领域专家</h3><p>对业务领域精通的人，一般是客户、系统分析员等。</p><p><img src="/images/ruankao/3-3.png"></p><h2 id="FDD核心过程"><a href="#FDD核心过程" class="headerlink" title="FDD核心过程"></a>FDD核心过程</h2><h3 id="开发整体对象模型"><a href="#开发整体对象模型" class="headerlink" title="开发整体对象模型"></a>开发整体对象模型</h3><p>业务建模，强调系统的完整地面向对象建模。</p><h3 id="构造特征列表"><a href="#构造特征列表" class="headerlink" title="构造特征列表"></a>构造特征列表</h3><p>特征是一个小的、对客户有价值的功能，特征包括动作、结果、目标，颗粒度最好在两周之内。</p><h3 id="计划特征开发"><a href="#计划特征开发" class="headerlink" title="计划特征开发"></a>计划特征开发</h3><p>项目经理根据特征列表、特征之间的关系安排开发任务。</p><h3 id="特征设计"><a href="#特征设计" class="headerlink" title="特征设计"></a>特征设计</h3><p>主程序员带领小组进行详细设计，为构建做准备。</p><h3 id="特征构建"><a href="#特征构建" class="headerlink" title="特征构建"></a>特征构建</h3><p>特征设计和构建合起来就是实现阶段，这两个阶段反复迭代，直到开发完成。</p><p>FDD主张个体所有对系统开发更有帮助。</p><h1 id="三、Scrum"><a href="#三、Scrum" class="headerlink" title="三、Scrum"></a>三、Scrum</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">特点：</span><br><span class="line">Scrum是一个增量的、迭代的开发过程。</span><br><span class="line">整个开发过程由多个短的迭代周期（Sprint）组成，每个周期建议2-4周。</span><br><span class="line">由Backlog管理产品需求，Backlog是按商业价值排序的需求列表，每个需求通常是一个故事。</span><br><span class="line">总是优先开发最客户最有价值的需求。</span><br></pre></td></tr></table></figure><p><img src="/images/ruankao/3-4.png"></p><h2 id="（1）五个活动"><a href="#（1）五个活动" class="headerlink" title="（1）五个活动"></a>（1）五个活动</h2><h3 id="产品待办事项列表梳理"><a href="#产品待办事项列表梳理" class="headerlink" title="产品待办事项列表梳理"></a>产品待办事项列表梳理</h3><h3 id="Sprint计划会议"><a href="#Sprint计划会议" class="headerlink" title="Sprint计划会议"></a>Sprint计划会议</h3><p>固定时长：推荐时长是每周对应两小时或者更少。<br>一、需要完成那些工作：由开发团队根据当前产品增量的状态、团队过去的工作情况、团队生产力及代办事项优先级决定。<br>二、如何完成工作：工作拆分成小的单元，每个单元不超过一天。</p><h3 id="每日Scrum会议"><a href="#每日Scrum会议" class="headerlink" title="每日Scrum会议"></a>每日Scrum会议</h3><p>团队内部沟通<br>固定时长，不超过15分钟<br>我完成了什么，我要做什么，我的阻碍</p><h3 id="Sprint评审会议"><a href="#Sprint评审会议" class="headerlink" title="Sprint评审会议"></a>Sprint评审会议</h3><p>固定时长：推荐时长是每周对应一个小时。<br>会议邀请其他相关干系人参加。<br>会议内容：演示产品增量、新想法，调整产品待办事项列表。</p><h3 id="Sprint回顾会议"><a href="#Sprint回顾会议" class="headerlink" title="Sprint回顾会议"></a>Sprint回顾会议</h3><p>固定时长：推荐时长是每周对应一个小时。<br>回顾团队在流程人际关系及工具方面做得情况，识别出好的，不好的，找出潜在改进事项。</p><h2 id="（2）五大价值观"><a href="#（2）五大价值观" class="headerlink" title="（2）五大价值观"></a>（2）五大价值观</h2><h3 id="承诺"><a href="#承诺" class="headerlink" title="承诺"></a>承诺</h3><p>愿意对目标作出承诺</p><h3 id="专注"><a href="#专注" class="headerlink" title="专注"></a>专注</h3><p>把心思和能力用到承诺的工作上</p><h3 id="开放"><a href="#开放" class="headerlink" title="开放"></a>开放</h3><p>项目中的一切开放给每个人看</p><h3 id="尊重"><a href="#尊重" class="headerlink" title="尊重"></a>尊重</h3><p>每个人都有他独特的背景和经验</p><h3 id="勇气-1"><a href="#勇气-1" class="headerlink" title="勇气"></a>勇气</h3><p>有勇气做出承诺，履行承诺，接受别人的尊重</p><h1 id="四、水晶方法Crystal"><a href="#四、水晶方法Crystal" class="headerlink" title="四、水晶方法Crystal"></a>四、水晶方法Crystal</h1><p>水晶方法Crystal家族包括Crystal Clear、Crystal Yellow、Crystal Orange、Crystal Red。<br>最常用的是Crystal Clear——透明水晶方法。<br>透明水晶方法七大体系特征</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">经常交付</span><br><span class="line">反思改进</span><br><span class="line">渗透式交流</span><br><span class="line">个人安全</span><br><span class="line">焦点</span><br><span class="line">与专家用户建立方便的联系</span><br><span class="line">配有自动测试、配置管理和经常集成功能的技术环境</span><br></pre></td></tr></table></figure><h1 id="五、其他敏捷方法"><a href="#五、其他敏捷方法" class="headerlink" title="五、其他敏捷方法"></a>五、其他敏捷方法</h1><p>开放式源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开发人员地域分布广</span><br><span class="line">查错排障高度并行，任何人都可以将补丁发给维护人</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软考-系统架构设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软考-开发方法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
